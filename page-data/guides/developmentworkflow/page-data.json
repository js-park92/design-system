{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/guides/developmentworkflow",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Development workflow\",\n  \"route\": \"/developmentworkflow\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Intro = makeShortcode(\"Intro\");\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"development-workflow\"\n  }, \"Development workflow\"), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"Installation & configuration\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(\"h2\", {\n    \"id\": \"asset-types\"\n  }, \"Asset types\"), mdx(\"p\", null, \"There are 3 main types of code assets that the Design System will give you as a developer:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Normalize\"), \" - A reset and base css stylesheet that is required in any app that uses the Design System components.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Core\"), \" - A collection of basic values for color, type, layout, etc.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Components\"), \" - UI Widgets\")), mdx(\"h2\", {\n    \"id\": \"installation\"\n  }, \"Installation\"), mdx(\"h3\", {\n    \"id\": \"install-normalize\"\n  }, \"Install Normalize\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\",\n    \"metastring\": \"startExpanded noRender\",\n    \"startExpanded\": true,\n    \"noRender\": true\n  }, \"npm install @pluralsight/ps-design-system-normalize\\n\")), mdx(\"p\", null, \"For CSS configuration options, follow the \\\"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#css-configuration\"\n  }, \"CSS configuration\"), \"\\\" section instructions.\"), mdx(\"h3\", {\n    \"id\": \"install-core\"\n  }, \"Install Core\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\",\n    \"metastring\": \"startExpanded\",\n    \"startExpanded\": true\n  }, \"npm install @pluralsight/ps-design-system-core\\n\")), mdx(\"p\", null, \"If you use Core values via CSS custom properties, installing Core is not required because those properites are included in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":root\"), \" in Normalize. If, however, you want to import into JS and use the JS variables, you'll want to install Core separately.\"), mdx(\"p\", null, \"For CSS configuration options, follow the \\\"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#css-configuration\"\n  }, \"CSS configuration\"), \"\\\" section instructions.\"), mdx(\"p\", null, \"For usage options, follow the \\\"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#core-usage\"\n  }, \"Core usage\"), \"\\\" section instructions.\"), mdx(\"h3\", {\n    \"id\": \"install-components\"\n  }, \"Install components\"), mdx(\"p\", null, \"All components are built on React as a UI framework. Install it as a peer dependency along with the appropriate renderer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\",\n    \"metastring\": \"startExpanded\",\n    \"startExpanded\": true\n  }, \"npm install react react-dom\\n\")), mdx(\"p\", null, \"All components support theming and have a peer dependency on the Theme package. Install with:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\",\n    \"metastring\": \"startExpanded\",\n    \"startExpanded\": true\n  }, \"npm install @pluralsight/ps-design-system-theme\\n\")), mdx(\"p\", null, \"Each component is installed separately. For example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\",\n    \"metastring\": \"startExpanded\",\n    \"startExpanded\": true\n  }, \"npm install @pluralsight/ps-design-system-button\\n\")), mdx(\"p\", null, \"The JavaScript is compiled as ES5 and dual-published as CommonJS and ES Modules.\"), mdx(\"h3\", {\n    \"id\": \"polyfills\"\n  }, \"Polyfills\"), mdx(\"p\", null, \"Pluralsight still supports IE11 and compiling to ES5 doesn't solve the issue of using JS APIs that don't exist in that browser.  You will likely want to bundle a global polyfill with your application such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"core-js\"), \". \"), mdx(\"p\", null, \"It will be challenging to not bloat your polyfill because what exact polyfills are needed by the Design System has not been documented well to date. For now, either including the full \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"core-js\"), \" or testing in IE11 is recommended.\"), mdx(\"h2\", {\n    \"id\": \"css-configuration\"\n  }, \"CSS configuration\"), mdx(\"h3\", {\n    \"id\": \"webpack-bundling\"\n  }, \"Webpack bundling\"), mdx(\"p\", null, \"You'll need to include the CSS for Design System Core and components.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\",\n    \"metastring\": \"startExpanded\",\n    \"startExpanded\": true\n  }, \"npm install style-loader css-loader\\n\")), mdx(\"p\", null, \"Add a loader chain for CSS to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"webpack.config.js\"), \". Make sure it processes CSS from the installed Design System packages by including those paths. For example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"noRender startExpanded\",\n    \"noRender\": true,\n    \"startExpanded\": true\n  }, \"module.exports = {\\n  module: {\\n    rules: [\\n      {\\n        test: /\\\\.css$/,\\n        use: [{ loader: 'style-loader' }, { loader: 'css-loader' }],\\n        include: [\\n          path.resolve(__dirname, 'src'),\\n          path.resolve(__dirname, 'node_modules', '@pluralsight'),\\n        ],\\n      },\\n    ],\\n  },\\n}\\n\")), mdx(\"p\", null, \"With CSS Modules\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"module.exports = {\\n  module: {\\n    rules: [\\n      {\\n        test: /\\\\.css$/,\\n        use: [\\n          { loader: 'style-loader' }\\n          {\\n            loader: 'css-loader',\\n            options: {\\n              modules: {\\n                mode: (resourcePath) => {\\n                  if (resourcePath.includes('@pluralsight/ps-design-system')) {\\n                    return \\\"global\\\";\\n                  }\\n                  return \\\"local\\\";\\n                },\\n                localIdentName: '[local]__[hash:base64:5]',\\n              },\\n            },\\n          }\\n        ],\\n        include: [\\n          path.resolve(__dirname, 'src'),\\n          path.resolve(__dirname, 'node_modules', '@pluralsight'),\\n        ],\\n      },\\n    ],\\n  },\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"postcss\"\n  }, \"PostCSS\"), mdx(\"p\", null, \"If you're using Core as CSS variables, you'll want to process your app css with PostCSS in order to give fallback values to CSS custom properties. Processing Design System component CSS with PostCSS is not needed because the CSS in components has already been processed and should be browser-ready.\"), mdx(\"p\", null, \"Install the tool dependencies:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\",\n    \"metastring\": \"startExpanded\",\n    \"startExpanded\": true\n  }, \"npm install postcss-import postcss-preset-env\\n\")), mdx(\"p\", null, \"And add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"postcss.config.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"noRender startExpanded\",\n    \"noRender\": true,\n    \"startExpanded\": true\n  }, \"module.exports = {\\n  plugins: {\\n    'postcss-import': {},\\n    'postcss-preset-env': { browsers: ['Last 2 versions', 'IE >= 11'] }\\n  }\\n}\\n\")), mdx(\"p\", null, \"For webpack bundling, install the extra loader: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\",\n    \"metastring\": \"startExpanded\",\n    \"startExpanded\": true\n  }, \"npm install postcss-loader cssnano\\n\")), mdx(\"p\", null, \"And add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"postcss-loader\"), \" to then end of your loader chain:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"noRender startExpanded\",\n    \"noRender\": true,\n    \"startExpanded\": true\n  }, \"use: ['style-loader', 'css-loader', 'postcss-loader'],\\n\")), mdx(\"h3\", {\n    \"id\": \"sass\"\n  }, \"Sass\"), mdx(\"p\", null, \"Core publishes Sass variables. Components with vanilla CSS publish a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".scss\"), \" stylesheet (that's identical to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".css\"), \") but it's not what's used internal to components. You could access it from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node_modules\"), \" if desired for your use case.\"), mdx(\"p\", null, \"To use Sass, installed the required build tools, such as:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\",\n    \"metastring\": \"startExpanded\",\n    \"startExpanded\": true\n  }, \"npm install node-sass\\n\")), mdx(\"p\", null, \"If you use Webpack for loading CSS, you'll also need to install your additional CSS loaders:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\",\n    \"metastring\": \"startExpanded\",\n    \"startExpanded\": true\n  }, \"npm install sass-loader\\n\")), mdx(\"p\", null, \"And add the loader to the chain that processes CSS:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"noRender startExpanded\",\n    \"noRender\": true,\n    \"startExpanded\": true\n  }, \"use: ['style-loader', 'css-loader', 'sass-loader']\\n\")), mdx(\"h3\", {\n    \"id\": \"nextjs\"\n  }, \"Next.js\"), mdx(\"p\", null, \"The latest version of Next.js should handle CSS natively. No additional configuration is required.\\nVersions 10 and 11 of Next.js have a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"\"\n  }, \"restriction on import CSS from node_modules\"), \". This has had a lot of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/vercel/next.js/issues/19936#issuecomment-878465841\"\n  }, \"community pushback\"), \" and there's a current \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/vercel/next.js/discussions/27953\"\n  }, \"RFC\"), \" to change it.\"), mdx(\"p\", null, \"In the meantime, you'll need to work around the restriction by using this \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/bem/next-global-css\"\n  }, \"library\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"npm install next-global-css\\n\")), mdx(\"p\", null, \"And editing your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"next.config.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const { withGlobalCss } = require('next-global-css')\\n\\nconst withConfig = withGlobalCss()\\n\\nmodule.exports = withConfig({\\n  /* Next.js config options here */\\n})\\n\")), mdx(\"h3\", {\n    \"id\": \"configuration-examples\"\n  }, \"Configuration examples\"), mdx(\"p\", null, \"See the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/pluralsight/design-system/tree/master/examples/\"\n  }, \"examples on Github\"), \" for config in project context.\"), mdx(\"h2\", {\n    \"id\": \"core-usage\"\n  }, \"Core usage\"), mdx(\"p\", null, \"After, installation, use Core in the flavor of your choice. JavaScript or CSS are equally recommended.\"), mdx(\"h3\", {\n    \"id\": \"import-javascript\"\n  }, \"Import JavaScript\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"noRender startExpanded\",\n    \"noRender\": true,\n    \"startExpanded\": true\n  }, \"import * as core from '@pluralsight/ps-design-system-core'\\n\\n<button style={{ backgroundColor: core.colorsPink[6] }}>Click</button>\\n\")), mdx(\"h3\", {\n    \"id\": \"import-css\"\n  }, \"Import CSS\"), mdx(\"p\", null, \"To use the Core variables in CSS:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\",\n    \"metastring\": \"noRender startExpanded\",\n    \"noRender\": true,\n    \"startExpanded\": true\n  }, \".mySelector {\\n  color: var(--ps-colors-pink-6);\\n}\\n\")), mdx(\"p\", null, \"Importing the Core package is not required because Normalize should already be on every page.\"), mdx(\"h3\", {\n    \"id\": \"import-sass\"\n  }, \"Import SASS\"), mdx(\"p\", null, \"To use the Core variables in SASS:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\",\n    \"metastring\": \"noRender startExpanded\",\n    \"noRender\": true,\n    \"startExpanded\": true\n  }, \"@import '~@pluralsight/ps-design-system-core/dist/index.module.scss';\\n\\n.mySelector {\\n  color: $ps-colors-pink6;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"overriding-component-styles\"\n  }, \"Overriding component styles\"), mdx(\"h3\", {\n    \"id\": \"use-the-standard\"\n  }, \"Use the standard\"), mdx(\"p\", null, \"The Design System is meant, among other things, to provide continuity of the user experience across Pluralsight products. But sometimes it will make sense to override a visual standard. This should not be the common case. And it should be done by product designers and developers who are clear about the tradeoffs and have a clear rationale of the value that such an override would create. If the value add isn't significant, the standard should be kept.\"), mdx(\"h3\", {\n    \"id\": \"limit-the-effects-of-overrides\"\n  }, \"Limit the effects of overrides\"), mdx(\"p\", null, \"Design System component CSS is not modularized. This is so that targetting and overriding become simple. But it does come with tradeoffs. In a way, it's going back to the olden days. Now the CSS for Design System components all lives in the global namespace of a web page. Thus we all need to be careful to be a good citizens and not unintentionally clobber the styles of other things. Limit the effects of your override. To do this, be as specific as possible.\"), mdx(\"h3\", {\n    \"id\": \"never-override-tag-names\"\n  }, \"Never override tag names\"), mdx(\"p\", null, \"Do not target tag names like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"h1\"), \", etc. The effect of such changes are much too broad. Leave this to the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#install-normalize\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"normalize\")), \" stylesheet.\"), mdx(\"h3\", {\n    \"id\": \"use-a-custom-selector\"\n  }, \"Use a custom selector\"), mdx(\"p\", null, \"All components should allow a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"className\"), \" prop to be passed so you can use your own CSS selectors. This is also true for exposed sub-components in compound component packages.\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"className\"), \" prop to pass your own selector. Never target the CSS selectors of a component directly.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"startExpanded noRender\",\n    \"startExpanded\": true,\n    \"noRender\": true\n  }, \"/* good */\\n<Button className=\\\"my-custom-button\\\" />\\n\\n/* bad */\\n// my-stylesheet.css\\n.psds-button {\\n  color: var(--that-old-orange-i-like);\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"use-child-selectors-where-needed\"\n  }, \"Use child selectors where needed\"), mdx(\"p\", null, \"In some cases, you might want to override the styles of a child element. That element is not exposed as an exported subcomponent. The only way to target it is through the CSS selector it ships with. In this case, that's is ok, provided the child element is targeted as a child selector of a selector specific to your application.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\",\n    \"metastring\": \"startExpanded noRender\",\n    \"startExpanded\": true,\n    \"noRender\": true\n  }, \"/* good */\\n.my-custom-avatar .psds-avatar__initials {\\n  display: none;\\n}\\n\\n/* bad */\\n.psds-avatar__initials {\\n  display: none;\\n}\\n\")), mdx(\"p\", null, \"Using child combinators to target direct children or traversing nodes in selectors to get to child nodes is generally discouraged. This ties you to the implementation of the internal structure, and changes to this structure are not considered changes to the public API, are not versioned as such and could thus could break at any time.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Development workflow","route":"/developmentworkflow"},"headings":[{"value":"Development workflow","depth":1},{"value":"Asset types","depth":2},{"value":"Installation","depth":2},{"value":"Install Normalize","depth":3},{"value":"Install Core","depth":3},{"value":"Install components","depth":3},{"value":"Polyfills","depth":3},{"value":"CSS configuration","depth":2},{"value":"Webpack bundling","depth":3},{"value":"PostCSS","depth":3},{"value":"Sass","depth":3},{"value":"Next.js","depth":3},{"value":"Configuration examples","depth":3},{"value":"Core usage","depth":2},{"value":"Import JavaScript","depth":3},{"value":"Import CSS","depth":3},{"value":"Import SASS","depth":3},{"value":"Overriding component styles","depth":2},{"value":"Use the standard","depth":3},{"value":"Limit the effects of overrides","depth":3},{"value":"Never override tag names","depth":3},{"value":"Use a custom selector","depth":3},{"value":"Use child selectors where needed","depth":3}]}},"pageContext":{"slug":"/guides/developmentworkflow/","version":"CHANGELOG"}},
    "staticQueryHashes": []}