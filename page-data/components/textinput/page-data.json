{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/textinput",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Text input\",\n  \"route\": \"/components/textinput\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar TypesEnum = makeShortcode(\"TypesEnum\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"text-input\"\n  }, \"Text input\"), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"Text inputs are text boxes that allow users to input custom text entries with a keyboard.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/PSDS-Web-Components?node-id=11313%3A95\",\n    install: \"npm install @pluralsight/ps-design-system-textinput\",\n    import: \"import TextInput from '@pluralsight/ps-design-system-textinput'\",\n    packageName: \"textinput\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"labels\"\n  }, \"Labels\"), mdx(\"p\", null, \"Primary identification of a text input comes through the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \". Usage hints are given in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"placeholder\"), \". Supporting text and error messaging is set in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"subLabel\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport TextInput from '@pluralsight/ps-design-system-textinput'\\n\\nconst Comp = () => (\\n  <div className=\\\"example-flex-column\\\">\\n    <TextInput label=\\\"First name\\\" />\\n    <TextInput label=\\\"First name\\\" placeholder=\\\"Your given name\\\" />\\n    <TextInput\\n      label=\\\"First name\\\"\\n      placeholder=\\\"Your given name\\\"\\n      subLabel=\\\"As you'd like printed on your badge\\\"\\n    />\\n  </div>\\n)\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"icon\"\n  }, \"Icon\"), mdx(\"p\", null, \"Text Inputs may include an icon to the left or right of the field. Read more in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/icon\"\n  }, \"icon docs\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport TextInput from '@pluralsight/ps-design-system-textinput'\\nimport { SearchIcon } from '@pluralsight/ps-design-system-icon'\\n\\nconst Comp = () => (\\n  <div className=\\\"example-flex-column\\\">\\n    <TextInput icon={<SearchIcon />} placeholder=\\\"Search\\\" />\\n    <TextInput\\n      icon={<SearchIcon />}\\n      iconAlign={TextInput.iconAligns.right}\\n      placeholder=\\\"Search\\\"\\n    />\\n  </div>\\n)\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"appearance\"\n  }, \"Appearance\"), mdx(\"p\", null, \"For a more subtle look, use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"subtle\"), \" appearance. So subtle. (Switch theme to dark)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport TextInput from '@pluralsight/ps-design-system-textinput'\\nimport { SearchIcon } from '@pluralsight/ps-design-system-icon'\\n\\nconst Comp = () => (\\n  <TextInput\\n    appearance={TextInput.appearances.subtle}\\n    icon={<SearchIcon />}\\n    placeholder=\\\"Search\\\"\\n  />\\n)\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"disabled\"\n  }, \"Disabled\"), mdx(\"p\", null, \"Disabled text inputs are unmodifiable and diminished visually.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport TextInput from '@pluralsight/ps-design-system-textinput'\\n\\nconst Comp = () => <TextInput disabled label=\\\"Can't touch this\\\" />\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"error\"\n  }, \"Error\"), mdx(\"p\", null, \"Error states are engaged with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"error\"), \" flag. Error-related messaging is sent to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"subLabel\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport TextInput from '@pluralsight/ps-design-system-textinput'\\n\\nconst Comp = () => (\\n  <TextInput error label=\\\"First name\\\" subLabel=\\\"Field is required\\\" />\\n)\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"size\"\n  }, \"Size\"), mdx(\"p\", null, \"The small text input is ideal for usage within table rows otherwise use the default, medium size text input, in forms for example.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport TextInput from '@pluralsight/ps-design-system-textinput'\\n\\nconst Comp = () => (\\n  <div className=\\\"example-flex-column\\\">\\n    <TextInput placeholder=\\\"medium text input\\\" />\\n    <TextInput placeholder=\\\"small text input\\\" size={TextInput.sizes.small} />\\n  </div>\\n)\\n\\nexport default Comp\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"appearance\",\n    type: mdx(TypesEnum, {\n      enum: TextInput.appearances,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"visual style (from TextInput.appearances)\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"disabled\",\n    type: \"boolean\",\n    desc: \"standard input disable flag\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"error\",\n    type: \"boolean\",\n    desc: \"error state flag\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"icon\",\n    type: \"*Icon\",\n    desc: \"An Icon component\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"iconAlign\",\n    type: mdx(TypesEnum, {\n      enum: TextInput.iconAligns,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"horizontal icon placement (from TextInput.iconAligns)\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"label\",\n    type: \"string\",\n    desc: \"identifying string for input\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"placeholder\",\n    type: \"string\",\n    desc: \"in-field usage hint\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"ref\",\n    type: \"Ref || { field: Ref,input: Ref, }\",\n    desc: \"refs to access underlying elements\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"size\",\n    type: mdx(TypesEnum, {\n      enum: TextInput.sizes,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"horizontal icon placement (from TextInput.sizes)\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"subLabel\",\n    type: \"string\",\n    desc: \"supporting text or error messaging\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Text input","route":"/components/textinput"},"headings":[{"value":"Text input","depth":1},{"value":"Examples","depth":2},{"value":"Labels","depth":3},{"value":"Icon","depth":3},{"value":"Appearance","depth":3},{"value":"Disabled","depth":3},{"value":"Error","depth":3},{"value":"Size","depth":3},{"value":"Accessibility","depth":2},{"value":"Props","depth":2}]}},"pageContext":{"slug":"/components/textinput/","version":"12.0.8"}},
    "staticQueryHashes": []}