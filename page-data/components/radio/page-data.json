{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/radio",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Radio\",\n  \"route\": \"/components/radio\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar A = makeShortcode(\"A\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"radio\"\n  }, \"Radio\"), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"Radio buttons allow users to select a single option from a list of mutually exclusive options.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/PSDS-Web-Components?node-id=13432%3A551\",\n    install: \"npm install @pluralsight/ps-design-system-radio\",\n    import: \"import Radio from '@pluralsight/ps-design-system-radio'\",\n    packageName: \"radio\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"uncontrolled\"\n  }, \"Uncontrolled\"), mdx(\"p\", null, \"Uncontrolled with inital value set. Radio buttons present a group of options, of which only a single option can be selected at a time. The grouping is commonly defined by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Radio from '@pluralsight/ps-design-system-radio'\\n\\nconst Comp = () => (\\n  <Radio.Group name=\\\"courseLevel\\\">\\n    <Radio.Button value=\\\"beginner\\\" label=\\\"Beginner\\\" />\\n    <Radio.Button value=\\\"intermediate\\\" label=\\\"Intermediate\\\" />\\n    <Radio.Button value=\\\"advanced\\\" label=\\\"Advanced\\\" />\\n  </Radio.Group>\\n)\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"controlled\"\n  }, \"Controlled\"), mdx(\"p\", null, \"Controlled Radios require both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handleChange\"), \" callback\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Radio from '@pluralsight/ps-design-system-radio'\\nimport Button from '@pluralsight/ps-design-system-button'\\nimport { layout, type, colorsTextIcon, colorsBackgroundLight } from '@pluralsight/ps-design-system-core'\\n\\nconst Comp = () => {\\n  const [value, setValue] = React.useState('intermediate')\\n\\n  function handleChange(evt, nextValue) {\\n    setValue(nextValue)\\n  }\\n  return (\\n    <div className=\\\"example-grid--col-2\\\">\\n      <Radio.Group onChange={handleChange} value={value} name=\\\"controlled\\\">\\n        <Radio.Button value=\\\"beginner\\\" label=\\\"Beginner\\\" />\\n        <Radio.Button value=\\\"intermediate\\\" label=\\\"Intermediate\\\" />\\n        <Radio.Button value=\\\"advanced\\\" label=\\\"Advanced\\\" />\\n      </Radio.Group>\\n      <div\\n        className=\\\"example-flex-column\\\"\\n        style={{\\n          padding: layout.spacingLarge,\\n          fontSize: type.fontSize400,\\n          color: colorsTextIcon.lowOnLight,\\n          background: colorsBackgroundLight[2],\\n          borderRadius: 12\\n        }}\\n      >\\n        Selected: {value}\\n        <Button\\n          onClick={() => setValue('intermediate')}\\n          appearance={Button.appearances.secondary}\\n        >\\n          Set Intermediate\\n        </Button>\\n      </div>\\n    </div>\\n  )\\n}\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"disabled\"\n  }, \"Disabled\"), mdx(\"p\", null, \"Disabled radio buttons are unmodifiable and diminished visually.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Radio from '@pluralsight/ps-design-system-radio'\\n\\nconst Comp = () => (\\n  <Radio.Group disabled name=\\\"courseLevel\\\">\\n    <Radio.Button value=\\\"beginner\\\" label=\\\"Beginner\\\" />\\n    <Radio.Button value=\\\"intermediate\\\" label=\\\"Intermediate\\\" />\\n    <Radio.Button value=\\\"advanced\\\" label=\\\"Advanced\\\" />\\n  </Radio.Group>\\n)\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"error\"\n  }, \"Error\"), mdx(\"p\", null, \"Error states are engaged with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"error\"), \" flag.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Radio from '@pluralsight/ps-design-system-radio'\\n\\nconst Comp = () => (\\n  <Radio.Group error name=\\\"courseLevel\\\">\\n    <Radio.Button value=\\\"beginner\\\" label=\\\"Beginner\\\" />\\n    <Radio.Button value=\\\"intermediate\\\" label=\\\"Intermediate\\\" />\\n    <Radio.Button value=\\\"advanced\\\" label=\\\"Advanced\\\" />\\n  </Radio.Group>\\n)\\n\\nexport default Comp\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"p\", null, \"WAI-ARIA Patterns: \", mdx(A, {\n    href: \"https://www.w3.org/TR/wai-aria-practices-1.2/#radiobutton\",\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    mdxType: \"A\"\n  }, \"Radio Group\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"radiogroup\"\n  }, \"Radio.Group\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"disable\",\n    type: \"boolean\",\n    desc: \"standard input disable flag\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"error\",\n    type: \"boolean\",\n    desc: \"error state flag\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"label\",\n    type: \"string\",\n    desc: \"identifying string for group\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"name\",\n    type: \"string\",\n    desc: \"form data identifier\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"onChange\",\n    type: \"(Event, value: any) => void\",\n    desc: \"triggers on radio select\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"subLabel\",\n    type: \"string\",\n    desc: \"supporting text or error messaging\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"value\",\n    type: \"string | number\",\n    desc: \"if Radio.Group is controlled current selected radio value else if uncontrolled initial selected value\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"radiobutton\"\n  }, \"Radio.Button\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"label\",\n    type: \"React.ReactNode\",\n    desc: \"display text\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"onBlur\",\n    type: \"(Event) => void\",\n    desc: \"triggers on radio blur\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"onClick\",\n    type: \"(Event, value: any) => void\",\n    desc: \"triggers on radio select\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"onFocus\",\n    type: \"(Event) => void\",\n    desc: \"triggers on radio focus\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"value\",\n    type: \"string | number\",\n    desc: \"radio option value\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Radio","route":"/components/radio"},"headings":[{"value":"Radio","depth":1},{"value":"Examples","depth":2},{"value":"Uncontrolled","depth":3},{"value":"Controlled","depth":3},{"value":"Disabled","depth":3},{"value":"Error","depth":3},{"value":"Accessibility","depth":2},{"value":"Props","depth":2},{"value":"Radio.Group","depth":3},{"value":"Radio.Button","depth":3}]}},"pageContext":{"slug":"/components/radio/","version":"CHANGELOG"}},
    "staticQueryHashes": []}