{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/note",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Note\",\n  \"route\": \"/components/note\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"note\"\n  }, \"Note\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"Use the note component for conversational elements. A note may have an author, metadata and available actions.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=10235%3A30024\",\n    install: \"npm install @pluralsight/ps-design-system-note\",\n    import: \"import Note from '@pluralsight/ps-design-system-note'\",\n    packageName: \"note\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Note\"), \" is a flexible component that will fit the container it's given. A\\nuser generated list is a common container layout that one might encounter in\\nthe product.\"), mdx(\"p\", null, \"Use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Note.List\"), \" to display a group of related \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Notes\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Avatar from '@pluralsight/ps-design-system-avatar'\\nimport { MoreIcon } from '@pluralsight/ps-design-system-icon'\\nimport Note from '@pluralsight/ps-design-system-note'\\nimport { P } from '@pluralsight/ps-design-system-text'\\nimport React from 'react'\\n\\nconst userName = 'Mark Twain'\\nconst userAvatar = 'http://placebear.com/128/128'\\n\\nconst Example: React.FC = props => {\\n  return (\\n    <Note.List>\\n      <Note\\n        actionBar={[<Note.Action icon={<MoreIcon />} title=\\\"More\\\" />]}\\n        avatar={<Avatar name={userName} src={userAvatar} />}\\n        heading={userName}\\n        message={\\n          <P>\\n            Customs do not concern themselves with right or wrong or reason. But\\n            they have to be obeyed; one reasons all around them until he is\\n            tired, but he must not transgress them, it is sternly forbidden.\\n          </P>\\n        }\\n        metadata={['June 18, 2019', '10:30am']}\\n      />\\n\\n      <Note\\n        actionBar={[<Note.Action icon={<MoreIcon />} title=\\\"More\\\" />]}\\n        avatar={<Avatar name={userName} src={userAvatar} />}\\n        heading={userName}\\n        message={\\n          <P>\\n            There are those who imagine that the unlucky accidents of\\n            life\\u2014life's 'experiences'\\u2014are in some way useful to us. I wish I\\n            could find out how. I never know one of them to happen twice. They\\n            always change off and swap around and catch you on your\\n            inexperienced side.\\n          </P>\\n        }\\n        metadata={['June 18, 2019', '10:30am']}\\n      />\\n\\n      <Note\\n        actionBar={[<Note.Action icon={<MoreIcon />} title=\\\"More\\\" />]}\\n        avatar={<Avatar name={userName} src={userAvatar} />}\\n        heading={userName}\\n        message={\\n          <P>\\n            Clothes make the man. Naked people have little or no influence on\\n            society.\\n          </P>\\n        }\\n        metadata={['June 18, 2019', '10:30am']}\\n      />\\n    </Note.List>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"title-and-avatar\"\n  }, \"Title and avatar\"), mdx(\"p\", null, \"Title and avatar are useful to depict the author of a note.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Avatar from '@pluralsight/ps-design-system-avatar'\\nimport Link from '@pluralsight/ps-design-system-link'\\nimport Note from '@pluralsight/ps-design-system-note'\\nimport { P } from '@pluralsight/ps-design-system-text'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  return (\\n    <Note\\n      avatar={\\n        <Note.AvatarLink>\\n          <a href=\\\"#\\\">\\n            <Avatar name=\\\"Mark Twain\\\" src=\\\"http://placebear.com/128/128\\\" />\\n          </a>\\n        </Note.AvatarLink>\\n      }\\n      heading={\\n        <P>\\n          <Link appearance={Link.appearances.subtle}>\\n            <a href=\\\"#\\\">Mark Twain</a>\\n          </Link>\\n        </P>\\n      }\\n      message={\\n        <P>\\n          Customs do not concern themselves with right or wrong or reason. But\\n          they have to be obeyed; one reasons all around them until he is tired,\\n          but he must not transgress them, it is sternly forbidden.\\n        </P>\\n      }\\n    />\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"metadata\"\n  }, \"Metadata\"), mdx(\"p\", null, \"Metadata is free-form strings or displayable elements like links. Each bit of\\nmetadata is separated by an interpunct.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Link from '@pluralsight/ps-design-system-link'\\nimport Note from '@pluralsight/ps-design-system-note'\\nimport { P } from '@pluralsight/ps-design-system-text'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  return (\\n    <Note\\n      message={\\n        <P>\\n          Customs do not concern themselves with right or wrong or reason. But\\n          they have to be obeyed; one reasons all around them until he is tired,\\n          but he must not transgress them, it is sternly forbidden.\\n        </P>\\n      }\\n      metadata={[\\n        'Great American author',\\n        'Satirist',\\n        <Link appearance={Link.appearances.subtle}>\\n          <a href=\\\"#\\\">14 minutes ago</a>\\n        </Link>\\n      ]}\\n    />\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"action-bar\"\n  }, \"Action bar\"), mdx(\"p\", null, \"The action bar contains the on-note affordances a user can take. These are\\nusually icon buttons. The actions can be displayed always, on hover, or without\\nthe title.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Avatar from '@pluralsight/ps-design-system-avatar'\\nimport { PencilIcon, MoreIcon } from '@pluralsight/ps-design-system-icon'\\nimport Note from '@pluralsight/ps-design-system-note'\\nimport { Heading, P } from '@pluralsight/ps-design-system-text'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  return (\\n    <Note\\n      actionBar={[\\n        <Note.Action icon={<PencilIcon />} title=\\\"Edit\\\" />,\\n        <Note.Action icon={<MoreIcon />} title=\\\"More\\\" />\\n      ]}\\n      actionBarVisible\\n      avatar={<Avatar name=\\\"Mark Twain\\\" src=\\\"http://placebear.com/128/128\\\" />}\\n      heading={\\n        <Heading size={Heading.sizes.smallCaps}>\\n          <h2>Mark Twain</h2>\\n        </Heading>\\n      }\\n      message={\\n        <P>\\n          Customs do not concern themselves with right or wrong or reason. But\\n          they have to be obeyed; one reasons all around them until he is tired,\\n          but he must not transgress them, it is sternly forbidden.\\n        </P>\\n      }\\n    />\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"without-attribution\"\n  }, \"Without attribution\"), mdx(\"p\", null, \"A note can also be used without the avatar and heading. The actions will be\\nmoved to the bottom next to the metadata.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { BookmarkIcon, MoreIcon } from '@pluralsight/ps-design-system-icon'\\nimport Note from '@pluralsight/ps-design-system-note'\\nimport { P } from '@pluralsight/ps-design-system-text'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  return (\\n    <Note\\n      actionBar={[\\n        <Note.Action icon={<BookmarkIcon />} title=\\\"Bookmark\\\" />,\\n        <Note.Action icon={<MoreIcon />} title=\\\"More\\\" />\\n      ]}\\n      actionBarVisible\\n      message={\\n        <P>\\n          Customs do not concern themselves with right or wrong or reason. But\\n          they have to be obeyed; one reasons all around them until he is tired,\\n          but he must not transgress them, it is sternly forbidden.\\n        </P>\\n      }\\n      metadata={['Metadata 1', 'Metadata 2', '14 minutes ago']}\\n    />\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"note-1\"\n  }, \"Note\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"actionBar\",\n    type: \"Note.Action[]\",\n    desc: \"action buttons\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"actionBarVisible\",\n    type: \"boolean\",\n    desc: \"locks actionBar visible\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"avatar\",\n    type: \"Avatar | Note.AvatarLink\",\n    desc: \"a user's avatar\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"heading\",\n    type: \"React.ReactNode\",\n    desc: \"the note heading\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"message\",\n    type: \"React.ReactNode\",\n    desc: \"the main message body\",\n    required: true,\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"metadata\",\n    type: \"React.ReactNode[]\",\n    desc: \"a row of metadata\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"noteaction\"\n  }, \"Note.Action\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"icon\",\n    type: \"Icon\",\n    desc: \"icon representing action\",\n    required: true,\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"title\",\n    type: \"string\",\n    desc: \"text representing action\",\n    required: true,\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"noteavatarlink\"\n  }, \"Note.AvatarLink\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"children\",\n    type: \"a > Avatar\",\n    desc: \"hyperlinked avatar\",\n    required: true,\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"notelist\"\n  }, \"Note.List\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"children\",\n    type: \"Note[]\",\n    desc: \"Notes to be placed in list\",\n    required: true,\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Note","route":"/components/note"},"headings":[{"value":"Note","depth":1},{"value":"Examples","depth":2},{"value":"Title and avatar","depth":3},{"value":"Metadata","depth":3},{"value":"Action bar","depth":3},{"value":"Without attribution","depth":3},{"value":"Accessibility","depth":2},{"value":"Props","depth":2},{"value":"Note","depth":3},{"value":"Note.Action","depth":3},{"value":"Note.AvatarLink","depth":3},{"value":"Note.List","depth":3}]}},"pageContext":{"slug":"/components/note/","version":"CHANGELOG"}},
    "staticQueryHashes": []}