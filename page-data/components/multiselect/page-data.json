{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/multiselect",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Multi Select\",\n  \"route\": \"/components/multiselect\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"multi-select\"\n  }, \"Multi Select\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"The MultiSelect wrapper component can be used when an input supports combining multiple values in a single form field with a dropdown list of options to select from. The component is a complete form control supporting labels, errors and disabled states.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=10235%3A30028\",\n    install: \"npm install @pluralsight/ps-design-system-multiselect\",\n    import: \"import MultiSelect from '@pluralsight/ps-design-system-multiselect'\",\n    packageName: \"multiselect\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport MultiSelect, { Option } from '@pluralsight/ps-design-system-multiselect'\\n\\nconst Comp = () => {\\n  const options = useMemo(() => [\\n    { label: 'Hydrogen', value: 'H' },\\n    { label: 'Helium', value: 'He' },\\n    { label: 'Lithium', value: 'Li' },\\n    { label: 'Beryllium', value: 'Be' },\\n    { label: 'Boron', value: 'B' },\\n    { label: 'Carbon', value: 'C' },\\n    { label: 'Nitrogren', value: 'N' },\\n    { label: 'Oxygen', value: 'O' },\\n    { label: 'Fluorine', value: 'F' },\\n    { label: 'Neon', value: 'Ne' },\\n    { label: 'Sodium', value: 'Na' },\\n    { label: 'Magnesium', value: 'Mg' },\\n    { label: 'Aluminum', value: 'Al' },\\n    { label: 'Silicon', value: 'Si' },\\n    { label: 'Phosphorus', value: 'P' },\\n  ], [])\\n  const [value, setValue] = useState<Option[]>(options.slice(0, 2))\\n\\n  return (\\n    <MultiSelect\\n      onChange={(_, nextValue) => {\\n        setValue(nextValue)\\n      }}\\n      options={options}\\n      value={value}\\n    />\\n  )\\n}\\n\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"labels\"\n  }, \"Labels\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport MultiSelect from '@pluralsight/ps-design-system-multiselect'\\n\\nconst noop = () => {}\\n\\nconst Comp = () => (\\n  <div className=\\\"example-flex-column\\\">\\n    <MultiSelect\\n      onChange={noop}\\n      options={[{ label: 'tag', value: 'tag'}]}\\n      placeholder=\\\"Enter tags\\\"\\n      value={[]}\\n    />\\n\\n    <MultiSelect\\n      label=\\\"Label area\\\"\\n      onChange={noop}\\n      options={[{ label: 'tag', value: 'tag'}]}\\n      subLabel=\\\"Hint text displayed here\\\"\\n      value={[]}\\n    />\\n\\n    <MultiSelect\\n      label={<MultiSelect.Label>ReactNode label</MultiSelect.Label>}\\n      onChange={noop}\\n      options={[{ label: 'tag', value: 'tag'}]}\\n      subLabel={<MultiSelect.SubLabel>ReactNode sublabel</MultiSelect.SubLabel>}\\n      value={[]}\\n    />\\n  </div>\\n)\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"prefix\"\n  }, \"Prefix\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport { SearchIcon } from '@pluralsight/ps-design-system-icon'\\nimport MultiSelect from '@pluralsight/ps-design-system-multiselect'\\n\\nconst noop = () => {}\\n\\nconst Comp = () => (\\n  <div className=\\\"example-flex-column\\\">\\n    <MultiSelect\\n      label=\\\"Input with prefix\\\"\\n      onChange={noop}\\n      options={[{ label: 'tag', value: 'tag'}]}\\n      prefix={<SearchIcon />}\\n      value={[]}\\n    />\\n  </div>\\n)\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"disabled\"\n  }, \"Disabled\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport MultiSelect from '@pluralsight/ps-design-system-multiselect'\\n\\nconst noop = () => {}\\n\\nconst Comp = () => (\\n  <div className=\\\"example-flex-column\\\">\\n    <MultiSelect\\n      disabled\\n      label=\\\"Disabled input\\\"\\n      onChange={noop}\\n      options={[{ label: 'tag', value: 'tag'}]}\\n      value={[]}\\n    />\\n  </div>\\n)\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"error\"\n  }, \"Error\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport MultiSelect from '@pluralsight/ps-design-system-multiselect'\\n\\nconst noop = () => {}\\n\\nconst Comp = () => (\\n  <div className=\\\"example-flex-column\\\">\\n    <MultiSelect\\n      error\\n      label=\\\"Error input\\\"\\n      onChange={noop}\\n      options={[{ label: 'tag', value: 'tag'}]}\\n      value={[]}\\n    />\\n  </div>\\n)\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"advanced-customization\"\n  }, \"Advanced customization\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MultiSelect\"), \" component is a convenience wrapper for common usecases. If you need advanced customization, please explore building your own wrapper using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Field\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tag\"), \" components.\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"disabled\",\n    type: \"boolean\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"error\",\n    type: \"boolean\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"label\",\n    type: \"string | ReactNode\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"filterFn\",\n    type: \"(term: string, options: Option[]) => Option[]\",\n    desc: \"custom filtering function\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"onChange\",\n    required: true,\n    type: \"(evt, nexValue: Option[]) => void\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"options\",\n    required: true,\n    type: \"Option[]\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"placeholder\",\n    type: \"string\",\n    desc: \"in-field usage hint\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"renderInputTag\",\n    type: \"(props, ref) => ReactNode\",\n    desc: \"render prop used to replace the default input\",\n    default: \"(props, ref) => <input ref={ref} {...props} />\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"subLabel\",\n    type: \"string | ReactNode\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"value\",\n    required: true,\n    type: \"Option[]\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Multi Select","route":"/components/multiselect"},"headings":[{"value":"Multi Select","depth":1},{"value":"Examples","depth":2},{"value":"Labels","depth":3},{"value":"Prefix","depth":3},{"value":"Disabled","depth":3},{"value":"Error","depth":3},{"value":"Advanced customization","depth":3},{"value":"Props","depth":2}]}},"pageContext":{"slug":"/components/multiselect/","version":"CHANGELOG"}},
    "staticQueryHashes": []}