{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/tag",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Tag\",\n  \"route\": \"/components/tag\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar TypesEnum = makeShortcode(\"TypesEnum\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"tag\"\n  }, \"Tag\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"Tags allow users to categorize content. They can represent keywords or people.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=10232%3A1\",\n    install: \"npm install @pluralsight/ps-design-system-tag\",\n    import: \"import Tag from '@pluralsight/ps-design-system-tag'\",\n    packageName: \"tag\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"size\"\n  }, \"Size\"), mdx(\"p\", null, \"Tags come in two sizes. Try to use the default size, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"medium\"), \", whenever possible.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Tag from '@pluralsight/ps-design-system-tag'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  return (\\n    <div className=\\\"example-grid--col-2\\\">\\n      <Tag size={Tag.sizes.small}>small</Tag>\\n      <Tag size={Tag.sizes.medium}>medium</Tag>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"icon\"\n  }, \"Icon\"), mdx(\"p\", null, \"A tag may contain an icon, consistently placed on the right. An icon may also\\nreceive on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \" prop in this position.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { CloseIcon } from '@pluralsight/ps-design-system-icon'\\nimport Tag from '@pluralsight/ps-design-system-tag'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  return (\\n    <div className=\\\"example-grid--col-3\\\">\\n      <Tag icon={<CloseIcon />}>With Icon</Tag>\\n\\n      <Tag icon={<CloseIcon />} size={Tag.sizes.small}>\\n        With Icon\\n      </Tag>\\n\\n      <Tag\\n        icon={<CloseIcon onClick={_ => alert('icon clicked')} />}\\n        size={Tag.sizes.small}\\n      >\\n        With Icon\\n      </Tag>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"hover-state\"\n  }, \"Hover state\"), mdx(\"p\", null, \"A tag may made actionable by adding an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"href\"), \". If it's actionable,\\na standard hover state is present.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Tag from '@pluralsight/ps-design-system-tag'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  return (\\n    <div className=\\\"example-grid--col-2\\\">\\n      <Tag onClick={_ => alert('click')}>With Click</Tag>\\n      <Tag href=\\\"https://duckduckgo.com\\\">With Link</Tag>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"as-a-toggle\"\n  }, \"As a Toggle\"), mdx(\"p\", null, \"A tag is sometimes used as a toggle. The toggled-on state is trigged with the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isPressed\"), \" prop. It will handle styling and accessibility concerns. Controlling\\napplications are in charge of storing toggled state.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Tag from '@pluralsight/ps-design-system-tag'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  return (\\n    <div className=\\\"example-grid--col-2\\\">\\n      <Tag isPressed>Toggled on</Tag>\\n      <Tag>Toggled off</Tag>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"error\"\n  }, \"Error\"), mdx(\"p\", null, \"Error states are engaged with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"error\"), \" flag. This is useful when tags are\\nused from within a form\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Tag from '@pluralsight/ps-design-system-tag'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  return <Tag error>Problem tag</Tag>\\n}\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"error\",\n    type: \"boolean\",\n    desc: \"error state flag\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"icon\",\n    type: \"*Icon\",\n    desc: \"Icon component, right-aligned\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"isPressed\",\n    type: \"boolean\",\n    desc: \"for accessibility of tags used as toggles\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"size\",\n    type: mdx(TypesEnum, {\n      enum: Tag.sizes,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"tag size (from Tag.sizes)\",\n    default: Tag.sizes.medium,\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Tag","route":"/components/tag"},"headings":[{"value":"Tag","depth":1},{"value":"Examples","depth":2},{"value":"Size","depth":3},{"value":"Icon","depth":3},{"value":"Hover state","depth":3},{"value":"As a Toggle","depth":3},{"value":"Error","depth":3},{"value":"Accessibility","depth":2},{"value":"Props","depth":2}]}},"pageContext":{"slug":"/components/tag/","version":"10.1.28"}},
    "staticQueryHashes": []}