{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/viewtoggle",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"View toggle\",\n  \"route\": \"/components/viewtoggle\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar A = makeShortcode(\"A\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"view-toggle\"\n  }, \"View toggle\"), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"View toggle is for switching between 1-3 views of content.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=10235%3A29980\",\n    install: \"npm install @pluralsight/ps-design-system-viewtoggle\",\n    import: \"import ViewToggle from '@pluralsight/ps-design-system-viewtoggle'\",\n    packageName: \"viewtoggle\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"toggling\"\n  }, \"Toggling\"), mdx(\"p\", null, \"View toggles are used when there are just a couple options to switch between. Use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tab\"), \" component when more options exist.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import ViewToggle from '@pluralsight/ps-design-system-viewtoggle'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <ViewToggle>\\n      <ViewToggle.Option active>Option 1</ViewToggle.Option>\\n      <ViewToggle.Option>Option 2</ViewToggle.Option>\\n    </ViewToggle>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"more-options\"\n  }, \"More options\"), mdx(\"p\", null, \"Make a toggle with up to 3 options.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import ViewToggle from '@pluralsight/ps-design-system-viewtoggle'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <ViewToggle>\\n      <ViewToggle.Option>Option 1</ViewToggle.Option>\\n      <ViewToggle.Option>Option 2</ViewToggle.Option>\\n      <ViewToggle.Option active>Option 3</ViewToggle.Option>\\n    </ViewToggle>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"long-labels\"\n  }, \"Long labels\"), mdx(\"p\", null, \"View toggles are used when there are just a couple options to switch between. Use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tab\"), \" component when more options exist.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import ViewToggle from '@pluralsight/ps-design-system-viewtoggle'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <ViewToggle>\\n      <ViewToggle.Option active>Option 1</ViewToggle.Option>\\n      <ViewToggle.Option>\\n        Option 2 that is such long you'll never see the end of it\\n      </ViewToggle.Option>\\n    </ViewToggle>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"p\", null, \"WAI-ARIA Patterns: \", mdx(A, {\n    href: \"https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\",\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    mdxType: \"A\"\n  }, \"Tabs\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"viewtoggle\"\n  }, \"ViewToggle\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"children\",\n    type: \"ViewToggle.Option[]\",\n    desc: \"options to appear in toggle\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"onSelect\",\n    type: \"function\",\n    desc: \"triggered when an option is clicked\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"viewtoggleoptions\"\n  }, \"ViewToggle.Options\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"active\",\n    type: \"boolean\",\n    desc: \"marks as selected\",\n    default: \"first option is active\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"View toggle","route":"/components/viewtoggle"},"headings":[{"value":"View toggle","depth":1},{"value":"Examples","depth":2},{"value":"Toggling","depth":3},{"value":"More options","depth":3},{"value":"Long labels","depth":3},{"value":"Accessibility","depth":2},{"value":"Props","depth":2},{"value":"ViewToggle","depth":3},{"value":"ViewToggle.Options","depth":3}]}},"pageContext":{"slug":"/components/viewtoggle/","version":"CHANGELOG"}},
    "staticQueryHashes": []}