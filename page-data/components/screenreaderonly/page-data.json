{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/screenreaderonly",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Screen reader only\",\n  \"route\": \"/components/screenreaderonly\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Intro = makeShortcode(\"Intro\");\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Usage = makeShortcode(\"Usage\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"screen-reader-only\"\n  }, \"Screen reader only\"), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"Use when you need to hide elements visually, but it needs to be read by screen reader.\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(Usage, {\n    install: \"npm install @pluralsight/ps-design-system-screenreaderonly\",\n    import: \"import ScreenReaderOnly from '@pluralsight/ps-design-system-screenreaderonly'\",\n    packageName: \"screenreaderonly\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import ScreenReaderOnly from '@pluralsight/ps-design-system-screenreaderonly'\\nimport React from 'react'\\n\\nconst Example: React.FC = () => (\\n    <div>\\n      <p>\\n        What comes once in a minute, twice in a moment, but never in a thousand years?\\n        <ScreenReaderOnly>The letter M</ScreenReaderOnly>\\n      </p>\\n    </div>\\n)\\n\\nexport default Example\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Screen reader only","route":"/components/screenreaderonly"},"headings":[{"value":"Screen reader only","depth":1},{"value":"Examples","depth":2}]}},"pageContext":{"slug":"/components/screenreaderonly/","version":"5.0.9"}},
    "staticQueryHashes": []}