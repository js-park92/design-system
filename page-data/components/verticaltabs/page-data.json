{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/verticaltabs",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Vertical tabs\",\n  \"route\": \"/components/verticaltabs\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar A = makeShortcode(\"A\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"vertical-tabs\"\n  }, \"Vertical tabs\"), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"Used for creating expanding and collapsing vertical navigation menus.\"), mdx(Usage, {\n    figmaUrl: \"\",\n    install: \"npm install @pluralsight/ps-design-system-verticaltabs\",\n    import: \"import VerticalTabs from '@pluralsight/ps-design-system-verticaltabs'\",\n    packageName: \"verticaltabs\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"app-side-nav\"\n  }, \"App side nav\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import VerticalTabs from '@pluralsight/ps-design-system-verticaltabs'\\nimport { PlaceholderIcon } from '@pluralsight/ps-design-system-icon'\\nimport React from 'react'\\n\\nconst FLOW_NAV = [\\n  {\\n    collapsible: false,\\n    header: {\\n      href: '#',\\n      icon: <PlaceholderIcon />,\\n      id: 'reports-home',\\n      title: 'Reports Home'\\n    },\\n    items: []\\n  },\\n  {\\n    collapsible: true,\\n    header: {\\n      icon: <PlaceholderIcon />,\\n      id: 'operational-reports',\\n      title: 'Operational Reports'\\n    },\\n    items: [\\n      {\\n        href: '#',\\n        id: 'work-log',\\n        title: 'Work Log'\\n      },\\n      {\\n        href: '#',\\n        id: 'project-timeline',\\n        title: 'Project Timeline'\\n      },\\n      {\\n        href: '#',\\n        id: 'leaderboard',\\n        title: 'Leaderboard'\\n      },\\n      {\\n        href: '#',\\n        id: 'snapshot',\\n        title: 'Snapshot'\\n      },\\n      {\\n        href: '#',\\n        id: 'daily-updates',\\n        title: 'Daily Updates'\\n      },\\n      {\\n        href: '#',\\n        id: 'spot-check',\\n        title: 'Spot Check'\\n      }\\n    ]\\n  },\\n  {\\n    collapsible: true,\\n    header: {\\n      icon: <PlaceholderIcon />,\\n      id: 'review-collaborate',\\n      title: 'Review & Collaborate'\\n    },\\n    items: [\\n      {\\n        href: '#',\\n        id: 'review-workflow',\\n        title: 'Review Workflow'\\n      },\\n      {\\n        href: '#',\\n        id: 'review-collab',\\n        title: 'Review Collaboration'\\n      },\\n      {\\n        href: '#',\\n        id: 'pr-resolution',\\n        title: 'PR Resolution'\\n      },\\n      {\\n        href: '#',\\n        id: 'knowledge-sharing',\\n        title: 'Knowledge Sharing'\\n      },\\n      {\\n        href: '#',\\n        id: 'player-card',\\n        title: 'Player Card'\\n      }\\n    ]\\n  },\\n  {\\n    collapsible: true,\\n    header: {\\n      icon: <PlaceholderIcon />,\\n      id: 'delivery',\\n      title: 'Delivery'\\n    },\\n    items: [\\n      {\\n        href: '#',\\n        title: 'Retrospective'\\n      }\\n    ]\\n  },\\n  {\\n    collapsible: true,\\n    header: {\\n      icon: <PlaceholderIcon />,\\n      id: 'fundamentals',\\n      title: 'Fundamentals'\\n    },\\n    items: [\\n      {\\n        href: '#',\\n        id: 'fundamentals-code',\\n        title: 'Code'\\n      },\\n      {\\n        href: '#',\\n        id: 'fundamentals-submit',\\n        title: 'Submit'\\n      },\\n      {\\n        href: '#',\\n        id: 'fundamentals-review',\\n        title: 'Review'\\n      }\\n    ]\\n  }\\n]\\n\\nconst Example: React.FC = props => {\\n  const [open, setOpen] = React.useState(false)\\n  const [activeId, setActiveId] = React.useState('pr-resolution')\\n  const isActive = id => activeId === id\\n\\n  const activate = (evt, id) => {\\n    evt.preventDefault()\\n    setActiveId(id)\\n  }\\n\\n  return (\\n    <div\\n      onMouseEnter={() => setOpen(true)}\\n      onMouseLeave={() => setOpen(false)}\\n      style={{\\n        display: 'flex',\\n        height: '100%',\\n        justifyContent: 'start',\\n        minHeight: 500\\n      }}\\n    >\\n      <div style={{ width: open ? 240 : 72 }}>\\n        <VerticalTabs {...props} forceCollapsed={!open} hideLabels={!open}>\\n          <VerticalTabs.Group>\\n            {FLOW_NAV.map((section, sectionKey) => {\\n              const sectionHeader = section.header && (\\n                <VerticalTabs.Tier1.Header icon={section.header.icon}>\\n                  {section.header.title}\\n                </VerticalTabs.Tier1.Header>\\n              )\\n\\n              return (\\n                <VerticalTabs.Tier1\\n                  collapsible={section.collapsible}\\n                  key={sectionKey}\\n                  header={sectionHeader}\\n                >\\n                  {section.items.map((item, itemKey) => {\\n                    const active = isActive(item.id)\\n                    const itemHeader = (\\n                      <VerticalTabs.Tier2.Header\\n                        href={item.href}\\n                        onClick={evt => activate(evt, item.id)}\\n                      >\\n                        {item.title}\\n                      </VerticalTabs.Tier2.Header>\\n                    )\\n\\n                    return (\\n                      <VerticalTabs.Tier2\\n                        active={active}\\n                        header={itemHeader}\\n                        key={itemKey}\\n                      />\\n                    )\\n                  })}\\n                </VerticalTabs.Tier1>\\n              )\\n            })}\\n          </VerticalTabs.Group>\\n        </VerticalTabs>\\n      </div>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"tiers-as-links\"\n  }, \"Tiers as links\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import VerticalTabs from '@pluralsight/ps-design-system-verticaltabs'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <VerticalTabs>\\n      <VerticalTabs.Tier1\\n        header={\\n          <VerticalTabs.Tier1.Header href=\\\"#\\\">\\n            Tier 1 link\\n          </VerticalTabs.Tier1.Header>\\n        }\\n      />\\n\\n      <VerticalTabs.Tier2\\n        header={\\n          <VerticalTabs.Tier2.Header href=\\\"#\\\">\\n            Tier 2 link\\n          </VerticalTabs.Tier2.Header>\\n        }\\n      />\\n    </VerticalTabs>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"tiers-as-buttons\"\n  }, \"Tiers as buttons\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import VerticalTabs from '@pluralsight/ps-design-system-verticaltabs'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <VerticalTabs>\\n      <VerticalTabs.Tier1\\n        header={\\n          <VerticalTabs.Tier1.Header onClick={() => {}}>\\n            Tier 1 link\\n          </VerticalTabs.Tier1.Header>\\n        }\\n      />\\n\\n      <VerticalTabs.Tier2\\n        header={\\n          <VerticalTabs.Tier2.Header onClick={() => {}}>\\n            Tier 2 link\\n          </VerticalTabs.Tier2.Header>\\n        }\\n      />\\n    </VerticalTabs>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"tiers-wreact-router\"\n  }, \"Tiers w/React Router\"), mdx(\"p\", null, \"Many users of this component are using it in conjunction with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-router\"), \". If you'd like to do the same and use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"VerticalTabs.Tier1\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"VerticalTabs.Tier2\"), \" to trigger \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-router\"), \" links, you can follow this pattern.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"noRender\",\n    \"noRender\": true\n  }, \"import VerticalTabs from '@pluralsight/ps-design-system-verticaltabs'\\nimport React from 'react'\\nimport { BrowserRouter as Router, withRouter } from 'react-router-dom'\\n\\nconst HeaderLink = withRouter(props => {\\n  const { history, onClick, to, ...rest } = props\\n\\n  const handleClick = evt => {\\n    evt.preventDefault()\\n\\n    if (onClick) onClick(evt)\\n    props.history.push(to)\\n  }\\n\\n  return (\\n    <VerticalTabs.Tier1.Header\\n      href={props.to}\\n      onClick={handleClick}\\n      {...rest}\\n    />\\n  )\\n})\\n\\nfunction Example() {\\n  return (\\n    <VerticalTabs>\\n      <Router>\\n        <VerticalTabs.Tier1\\n          header={\\n            <HeaderLink to=\\\"/other\\\">React-router Link as DS button</HeaderLink>\\n          }\\n        />\\n      </Router>\\n    </VerticalTabs>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"start-collapsed\"\n  }, \"Start collapsed\"), mdx(\"p\", null, \"Each \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"VerticalTabs.Tier1\"), \" item can start collapsed if the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"collapse\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"collapsible\"), \" prop are both set.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { PlaceholderIcon } from '@pluralsight/ps-design-system-icon'\\nimport VerticalTabs from '@pluralsight/ps-design-system-verticaltabs'\\nimport * as React from 'react'\\n\\nconst EXAMPLE_NAV = [\\n  {\\n    collapsible: true,\\n    collapsed: true,\\n    header: {\\n      icon: <PlaceholderIcon />,\\n      title: 'Starts collapsed'\\n    },\\n    items: [\\n      {\\n        title: 'See me after opening'\\n      }\\n    ]\\n  },\\n  {\\n    collapsible: true,\\n    header: {\\n      icon: <PlaceholderIcon />,\\n      title: 'Starts open'\\n    },\\n    items: [\\n      {\\n        href: '#',\\n        title: 'See me on load'\\n      }\\n    ]\\n  }\\n]\\n\\nconst Example: React.FC = () => {\\n  return (\\n    <VerticalTabs>\\n      <VerticalTabs.Group>\\n        {EXAMPLE_NAV.map((section, sectionKey) => (\\n          <VerticalTabs.Tier1\\n            collapsible={section.collapsible}\\n            collapsed={section.collapsed}\\n            key={sectionKey}\\n            header={\\n              <VerticalTabs.Tier1.Header icon={section.header.icon}>\\n                {section.header.title}\\n              </VerticalTabs.Tier1.Header>\\n            }\\n          >\\n            {section.items.map((item, itemKey) => (\\n              <VerticalTabs.Tier2\\n                header={\\n                  <VerticalTabs.Tier2.Header href={item.href}>\\n                    {item.title}\\n                  </VerticalTabs.Tier2.Header>\\n                }\\n                key={itemKey}\\n              />\\n            ))}\\n          </VerticalTabs.Tier1>\\n        ))}\\n      </VerticalTabs.Group>\\n    </VerticalTabs>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"p\", null, \"WAI-ARIA Patterns: \", mdx(A, {\n    href: \"https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\",\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    mdxType: \"A\"\n  }, \"Disclosure\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"verticaltabs\"\n  }, \"VerticalTabs\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"forceCollapsed\",\n    type: \"boolean\",\n    desc: \"force lists to be collapsed\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"hideLabels\",\n    type: \"boolean\",\n    desc: \"hide text labels\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"verticaltabsgroup\"\n  }, \"VerticalTabs.Group\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"children\",\n    type: \"VerticalTabs.Tier1[]\",\n    desc: \"VerticalTabs.Tier1 components\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"header\",\n    type: \"VerticalTabs.Group.Header\",\n    desc: \"slot group header into position\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"verticaltabsgroupheader\"\n  }, \"VerticalTabs.Group.Header\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"children\",\n    type: \"string\",\n    desc: \"header text\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"tagName\",\n    type: \"string\",\n    desc: \"change default tag of header root tag\",\n    default: \"h2\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"verticaltabscollapsiblegroup\"\n  }, \"VerticalTabs.CollapsibleGroup\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"children\",\n    type: \"VerticalTabs.Tier1\",\n    desc: \"VerticalTabs.Tier1 components\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"header\",\n    type: \"VerticalTabs.CollapsibleGroup\",\n    desc: \"slot group header into position\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"startOpen\",\n    type: \"boolean\",\n    desc: \"group in open is open on first render\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"groupButtonAriaLabel\",\n    type: \"string\",\n    desc: \"custom label for collapsible group toggle toggle for screenreaders\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"verticaltabscollapsiblegroupheader\"\n  }, \"VerticalTabs.CollapsibleGroup.Header\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"children\",\n    type: \"string\",\n    desc: \"header text\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"tagName\",\n    type: \"string\",\n    desc: \"change default tag of header root tag\",\n    default: \"h2\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"verticaltabstier1\"\n  }, \"VerticalTabs.Tier1\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"active\",\n    type: \"boolean\",\n    desc: \"changes visual state to active tab tier\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"children\",\n    type: \"VerticalTabs.Tier2\",\n    desc: \"VerticalTabs.Tier2 components\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"collapsed\",\n    type: \"boolean\",\n    desc: \"start item collapsed if collapsible also true\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"collapsible\",\n    type: \"boolean\",\n    desc: \"allows collapsing of children\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"header\",\n    type: \"VerticalTabs.Tier1.Header\",\n    desc: \"slot tier1 header into position\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"verticaltabstier1header\"\n  }, \"VerticalTabs.Tier1.Header\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"children\",\n    type: \"string\",\n    desc: \"header text\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"icon\",\n    type: \"Icon\",\n    desc: \"Icon component\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"verticaltabstier2\"\n  }, \"VerticalTabs.Tier2\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"active\",\n    type: \"boolean\",\n    desc: \"changes visual state to active tab tier\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"header\",\n    type: \"VerticalTabs.Tier2.Header\",\n    desc: \"slot tier2 header into position\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"verticaltabstier2header\"\n  }, \"VerticalTabs.Tier2.Header\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"children\",\n    type: \"string\",\n    desc: \"header text\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Vertical tabs","route":"/components/verticaltabs"},"headings":[{"value":"Vertical tabs","depth":1},{"value":"Examples","depth":2},{"value":"App side nav","depth":3},{"value":"Tiers as links","depth":3},{"value":"Tiers as buttons","depth":3},{"value":"Tiers w/React Router","depth":3},{"value":"Start collapsed","depth":3},{"value":"Accessibility","depth":2},{"value":"Props","depth":2},{"value":"VerticalTabs","depth":3},{"value":"VerticalTabs.Group","depth":3},{"value":"VerticalTabs.Group.Header","depth":3},{"value":"VerticalTabs.CollapsibleGroup","depth":3},{"value":"VerticalTabs.CollapsibleGroup.Header","depth":3},{"value":"VerticalTabs.Tier1","depth":3},{"value":"VerticalTabs.Tier1.Header","depth":3},{"value":"VerticalTabs.Tier2","depth":3},{"value":"VerticalTabs.Tier2.Header","depth":3}]}},"pageContext":{"slug":"/components/verticaltabs/","version":"CHANGELOG"}},
    "staticQueryHashes": []}