{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/circularprogress",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Circular progress\",\n  \"route\": \"/components/circularprogress\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Intro = makeShortcode(\"Intro\");\nvar A = makeShortcode(\"A\");\nvar Usage = makeShortcode(\"Usage\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar TypesEnum = makeShortcode(\"TypesEnum\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"circular-progress\"\n  }, \"Circular progress\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"The circular progress visually represents completion status when horizontal space is tight (determinate) or as a loading spinner (indeterminate). If sufficient horizontal space is available, use the \", mdx(A, {\n    href: \"../linearprogress\",\n    mdxType: \"A\"\n  }, \"Linear progress\"), \" component instead.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=10232%3A285\",\n    install: \"npm install @pluralsight/ps-design-system-circularprogress\",\n    import: \"import Avatar from '@pluralsight/ps-design-system-circularprogress'\",\n    packageName: \"circularprogress\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"size\"\n  }, \"Size\"), mdx(\"p\", null, \"Circular progress comes in two standard sizes.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import CircularProgress from '@pluralsight/ps-design-system-circularprogress'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <div className=\\\"example-grid--col-2\\\">\\n      <CircularProgress size={CircularProgress.sizes.small} value={75} />\\n      <CircularProgress size={CircularProgress.sizes.medium} value={75} />\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"mode\"\n  }, \"Mode\"), mdx(\"p\", null, \"Mode is determined by the presence of the value prop. When a value is given the mode is \\\"determinate\\\", and visual progress is set to that static value. When a value is absent the mode is \\\"indeterminate\\\" and becomes an infinite spinner.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import CircularProgress from '@pluralsight/ps-design-system-circularprogress'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <div className=\\\"example-grid--col-2\\\">\\n      <CircularProgress value={66} />\\n      <CircularProgress />\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"animation\"\n  }, \"Animation\"), mdx(\"p\", null, \"Mode is determined by the presence of the value prop. When a value is given the mode is \\\"determinate\\\", and visual progress is set to that static value. When a value is absent the mode is \\\"indeterminate\\\" and becomes an infinite spinner.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { colorsBackgroundDark, colorsBackgroundLight, colorsTextIcon, layout, type } from '@pluralsight/ps-design-system-core'\\nimport CircularProgress from '@pluralsight/ps-design-system-circularprogress'\\nimport Theme from '@pluralsight/ps-design-system-theme'\\nimport React from 'react'\\n\\nfunction AnimationDemo() {\\n  const [value, setValue] = React.useState(0)\\n  React.useEffect(() => {\\n    const timer = setInterval(() => {\\n      const rando = Math.floor(Math.random() * 115)\\n      setValue(rando > 100 ? 100 : rando)\\n    }, 2500)\\n    return () => clearInterval(timer)\\n  })\\n\\n  return (\\n    <div className=\\\"root\\\">\\n      <div className=\\\"value\\\">\\n        Value: <span className=\\\"exampleNumber\\\">{value}</span>\\n      </div>\\n      <Theme>\\n        <div className=\\\"example\\\">\\n          <CircularProgress value={value} />\\n        </div>\\n      </Theme>\\n      <style jsx>{`\\n        .root {\\n          display: flex;\\n          justify-content: center;\\n          height: 150px;\\n        }\\n        .value,\\n        .example {\\n          display: flex;\\n          justify-content: center;\\n          align-items: center;\\n          flex: 1;\\n        }\\n        .value {\\n          background: ${colorsBackgroundLight[2]};\\n          border-radius: 12px 0 0 12px;\\n          font-size: ${type.fontSize600};\\n          color: ${colorsTextIcon.lowOnLight};\\n        }\\n        .example {\\n          background: ${colorsBackgroundDark[3]};\\n          border-radius: 0 12px 12px 0;\\n        }\\n        .exampleNumber {\\n          padding-left: ${layout.spacingSmall};\\n          width: 3em;\\n        }\\n      `}</style>\\n    </div>\\n  )\\n}\\n\\nexport default AnimationDemo\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"p\", null, \"WAI-ARIA Patterns: \", mdx(A, {\n    href: \"https://www.w3.org/TR/wai-aria-practices-1.2/#meter\",\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    mdxType: \"A\"\n  }, \"Meter\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"size\",\n    type: mdx(TypesEnum, {\n      enum: CircularProgress.sizes,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"standard size for widget (from CircularProgress.sizes)\",\n    default: \"medium\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"value\",\n    type: \"number\",\n    desc: \"current progress out of 100\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Circular progress","route":"/components/circularprogress"},"headings":[{"value":"Circular progress","depth":1},{"value":"Examples","depth":2},{"value":"Size","depth":3},{"value":"Mode","depth":3},{"value":"Animation","depth":3},{"value":"Accessibility","depth":2},{"value":"Props","depth":2}]}},"pageContext":{"slug":"/components/circularprogress/","version":"12.0.6"}},
    "staticQueryHashes": []}