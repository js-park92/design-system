{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/button",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Button\",\n  \"route\": \"/components/button\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar A = makeShortcode(\"A\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar TypesEnum = makeShortcode(\"TypesEnum\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"button\"\n  }, \"Button\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"Used to call attention, perform an action, or to navigate.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=10235%3A30026\",\n    install: \"npm install @pluralsight/ps-design-system-button\",\n    import: \"import Button from '@pluralsight/ps-design-system-button'\",\n    packageName: \"button\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"appearance\"\n  }, \"Appearance\"), mdx(\"p\", null, \"Buttons come in four standard visual styles.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <div className=\\\"example-grid\\\">\\n      <Button appearance={Button.appearances.primary}>Primary</Button>\\n      <Button appearance={Button.appearances.secondary}>Secondary</Button>\\n      <Button appearance={Button.appearances.stroke}>Stroke</Button>\\n      <Button appearance={Button.appearances.flat}>Flat</Button>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"size\"\n  }, \"Size\"), mdx(\"p\", null, \"Buttons come in four standard sizes. The default size is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"medium\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <div className=\\\"example-grid\\\">\\n      <Button size={Button.sizes.large}>Large</Button>\\n      <Button size={Button.sizes.medium}>Medium</Button>\\n      <Button size={Button.sizes.small}>Small</Button>\\n      <Button size={Button.sizes.xSmall}>XSmall</Button>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"icon\"\n  }, \"Icon\"), mdx(\"p\", null, \"Buttons may include an icon to the left or right of the label. Read more \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/icon\"\n  }, \"icon docs\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport { CheckIcon, ChannelIcon, PlayIcon } from '@pluralsight/ps-design-system-icon'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <div className=\\\"example-grid\\\">\\n      <Button icon={<CheckIcon />}>With Icon</Button>\\n      <Button icon={<ChannelIcon />} appearance={Button.appearances.stroke}>\\n        With Icon\\n      </Button>\\n      <Button\\n        icon={<PlayIcon />}\\n        iconAlign={Button.iconAligns.right}\\n        appearance={Button.appearances.flat}\\n      >\\n        Aligned to Right\\n      </Button>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"icon-only\"\n  }, \"Icon only\"), mdx(\"p\", null, \"Buttons may include an icon without a label. Please provide a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title\"), \" prop to display the native tooltip as well as to support assistive technology (i.e. screen readers).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport { UserIcon } from '@pluralsight/ps-design-system-icon'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <div className=\\\"example-grid\\\">\\n      <Button icon={<UserIcon />} title=\\\"Profile\\\" />\\n      <Button\\n        icon={<UserIcon />}\\n        appearance={Button.appearances.flat}\\n        title=\\\"Profile\\\"\\n      />\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"disabled-prop\"\n  }, \"Disabled prop\"), mdx(\"p\", null, \"Each button may be displayed as disabled. Do not use disabled treatment for non-disabled buttons.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport { UserIcon } from '@pluralsight/ps-design-system-icon'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <div className=\\\"example-grid\\\">\\n      <Button disabled>Disabled</Button>\\n      <Button disabled appearance={Button.appearances.stroke}>\\n        Disabled\\n      </Button>\\n      <Button disabled appearance={Button.appearances.flat}>\\n        Disabled\\n      </Button>\\n      <Button disabled icon={<PencilIcon />}>\\n        Disabled\\n      </Button>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"as-link\"\n  }, \"As link\"), mdx(\"p\", null, \"Elements that are visually equivalent to buttons but change the URL and link to a new experience should be rendered as HTML anchor tags. Provide an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"href\"), \" prop, and the button will render as an anchor tag.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport { UserIcon } from '@pluralsight/ps-design-system-icon'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <div className=\\\"example-grid\\\">\\n      <Button href=\\\"https://duckduckgo.com?q=pluralsight\\\" target=\\\"_blank\\\">\\n        Link\\n      </Button>\\n      <Button\\n        href=\\\"https://duckduckgo.com?q=pluralsight%20icons\\\"\\n        target=\\\"_blank\\\"\\n        icon={<PencilIcon />}\\n      >\\n        Link with icon\\n      </Button>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"with-react-router\"\n  }, \"With react-router\"), mdx(\"p\", null, \"Many users of this component are using it in conjunction with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/ReactTraining/react-router/issues/1176\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"react-router\")), \" . If you'd like to do the same and use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Button\"), \" to trigger react-router links, you can follow this pattern.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"noRender\",\n    \"noRender\": true\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport React from 'react'\\nimport { BrowserRouter as Router, withRouter } from 'react-router-dom'\\n\\nfunction Example() {\\n  // #1 Define your react-router-specific ButtonLink\\n  const ButtonLink = withRouter(props => (\\n    <Button\\n      {...props}\\n      onClick={evt => {\\n        evt.preventDefault()\\n        props.onClick && props.onClick(evt)\\n        props.history.push(props.to)\\n      }}\\n      href={props.to}\\n    />\\n  ))\\n\\n  // #2 Invoke it like you'd usually use Link\\n  return (\\n    <Router>\\n      <ButtonLink to=\\\"/react-wonderland\\\">\\n        React-router Link as DS button\\n      </ButtonLink>\\n    </Router>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"loading-prop\"\n  }, \"Loading prop\"), mdx(\"p\", null, \"To show a spinner, pass a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loading\"), \" flag to your button. When \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loading\"), \" is passed dynamically, it replaces your icon when it toggles to true. If no icon is present, it replaces your text.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport { UserIcon } from '@pluralsight/ps-design-system-icon'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <Button icon={<UserIcon />} loading>\\n      Loading...\\n    </Button>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"p\", null, \"WAI-ARIA Patterns: \", mdx(A, {\n    href: \"https://www.w3.org/TR/wai-aria-practices-1.2/#button\",\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    mdxType: \"A\"\n  }, \"Button\"), \", \", mdx(A, {\n    href: \"https://www.w3.org/TR/wai-aria-practices-1.2/#link\",\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    mdxType: \"A\"\n  }, \"Link\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"appearance\",\n    required: true,\n    type: mdx(TypesEnum, {\n      enum: Button.appearances,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"visual style from Button.appearances\",\n    default: Button.appearances.primary,\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"disabled\",\n    type: \"boolean\",\n    desc: \"standard input disable flag\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"href\",\n    type: \"string\",\n    desc: \"url of resource (renders as anchor)\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"icon\",\n    type: \"Icon\",\n    desc: \"Icon component\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"iconAlign\",\n    type: mdx(TypesEnum, {\n      enum: Button.iconAligns,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"horizontal icon placement (from Button.iconAligns)\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"loading\",\n    type: \"boolean\",\n    desc: \"disables button and shows spinner\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"size\",\n    type: mdx(TypesEnum, {\n      enum: Button.sizes,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"button size (from Button.sizes)\",\n    default: Button.sizes.medium,\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Button","route":"/components/button"},"headings":[{"value":"Button","depth":1},{"value":"Examples","depth":2},{"value":"Appearance","depth":3},{"value":"Size","depth":3},{"value":"Icon","depth":3},{"value":"Icon only","depth":3},{"value":"Disabled prop","depth":3},{"value":"As link","depth":3},{"value":"With react-router","depth":3},{"value":"Loading prop","depth":3},{"value":"Accessibility","depth":2},{"value":"Props","depth":2}]}},"pageContext":{"slug":"/components/button/","version":"24.0.8"}},
    "staticQueryHashes": []}