{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/dialog",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Dialog\",\n  \"route\": \"/components/dialog\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Intro = makeShortcode(\"Intro\");\nvar A = makeShortcode(\"A\");\nvar Usage = makeShortcode(\"Usage\");\nvar Guideline = makeShortcode(\"Guideline\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar TypesEnum = makeShortcode(\"TypesEnum\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"dialog\"\n  }, \"Dialog\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"The purpose of a Dialog is to provide actionable messaging and may appear contextually or as a \", mdx(A, {\n    href: \"#modal\",\n    mdxType: \"A\"\n  }, \"modal\"), \". The Dialog adapts to various amounts and types of content. For contextual, non-actionable messaging, consider the \", mdx(A, {\n    href: \"/components/tooltip\",\n    mdxType: \"A\"\n  }, \"Tooltip\"), \" instead.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=10241%3A0\",\n    install: \"npm install @pluralsight/ps-design-system-dialog\",\n    import: \"import Dialog from '@pluralsight/ps-design-system-dialog'\",\n    packageName: \"dialog\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"in-app-example\"\n  }, \"In-app example\"), mdx(\"p\", null, \"Dialogs can appear automatically, or be triggered by hover, focus, tap or click.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport Dialog from '@pluralsight/ps-design-system-dialog'\\nimport { Below } from '@pluralsight/ps-design-system-position'\\nimport React from 'react'\\n\\nfunction Example() {\\n  const [isHovered, setHovered] = React.useState(false)\\n  const [isClicked, setClicked] = React.useState(false)\\n  return (\\n    <div className=\\\"example-grid--col-3\\\" style={{ height: '150px' }}>\\n      <Below\\n        show={\\n          <Dialog tailPosition={Dialog.tailPositions.topCenter}>Dialog</Dialog>\\n        }\\n        when\\n      >\\n        <Button appearance={Button.appearances.secondary}>Look at me</Button>\\n      </Below>\\n\\n      <Below\\n        show={\\n          <Dialog tailPosition={Dialog.tailPositions.topCenter}>Dialog</Dialog>\\n        }\\n        when={isHovered}\\n      >\\n        <Button\\n          appearance={Button.appearances.secondary}\\n          onMouseEnter={_ => setHovered(true)}\\n          onMouseOut={_ => setHovered(false)}\\n        >\\n          Hover me\\n        </Button>\\n      </Below>\\n\\n      <Below\\n        show={\\n          <Dialog tailPosition={Dialog.tailPositions.topCenter}>Dialog</Dialog>\\n        }\\n        when={isClicked}\\n      >\\n        <Button\\n          appearance={Button.appearances.secondary}\\n          onClick={_ => setClicked(!isClicked)}\\n        >\\n          Click me\\n        </Button>\\n      </Below>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"tail\"\n  }, \"Tail\"), mdx(\"p\", null, \"Dialogs can be shown with or without a tail (a directional indicator). To make the tail appear, use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dialog.tailPositions\"), \" option.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport Dialog from '@pluralsight/ps-design-system-dialog'\\nimport { P } from '@pluralsight/ps-design-system-text'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <div className=\\\"example-grid--col-2\\\">\\n      <Dialog disableFocusOnMount>\\n        <ExampleContent />\\n      </Dialog>\\n      <Dialog tailPosition={Dialog.tailPositions.topCenter} disableFocusOnMount>\\n        <ExampleContent />\\n      </Dialog>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\\nconst ExampleContent = _ => (\\n  <div style={{ maxWidth: '300px' }}>\\n    <P>\\n      Consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore\\n    </P>\\n    <div style={{ textAlign: 'right' }}>\\n      <Button>Primary button</Button>\\n    </div>\\n  </div>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"closing\"\n  }, \"Closing\"), mdx(\"p\", null, \"Dialogs may be closed using one of a number of methods: clicking the close button, clicking the overlay (in the case of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"modal\"), \" Dialog), and pressing the escape key. One or all of these methods, if available, will call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClose\"), \" function when triggered.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport Dialog from '@pluralsight/ps-design-system-dialog'\\nimport { P } from '@pluralsight/ps-design-system-text'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <div className=\\\"example-grid--col-2\\\">\\n      <Dialog disableFocusOnMount>\\n        <ExampleContent />\\n      </Dialog>\\n      <Dialog onClose={_ => alert('Closing')} disableFocusOnMount>\\n        <ExampleContent />\\n      </Dialog>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\\nconst ExampleContent = _ => (\\n  <div style={{ maxWidth: '300px' }}>\\n    <P>\\n      Consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore\\n    </P>\\n    <div style={{ textAlign: 'right' }}>\\n      <Button>Primary button</Button>\\n    </div>\\n  </div>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"modal\"\n  }, \"Modal\"), mdx(\"p\", null, \"A modal Dialog will be shown fullscreen with an overlay behind and positioned in the center of the viewport.\"), mdx(\"p\", null, \"When a modal Dialog (or non-modal Dialog) are shown on the screen, it will take browser focus. In the case of a modal Dialog, the rest of the body of the application will continue to be visible through the translucent overlay. But it should be hidden. To hide it from screenreaders, add an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-hidden=true\"), \" attribute to your application's containing node, and make sure Dialog is mounted outside of that node. To hide it from keyboard users, add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tabindex=\\\"-1\\\"\"), \" to that same application node.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport { colorsBackgroundLight, layout } from '@pluralsight/ps-design-system-core'\\nimport Dialog from '@pluralsight/ps-design-system-dialog'\\nimport { Heading } from '@pluralsight/ps-design-system-text'\\nimport React from 'react'\\n\\nfunction Example() {\\n  const [isOpen, setOpen] = React.useState(false)\\n  return (\\n    <>\\n      <div className=\\\"app\\\" aria-hidden={isOpen}>\\n        <Button onClick={() => setOpen(!isOpen)}>Open Modal</Button>\\n      </div>\\n      {isOpen && (\\n        <Dialog\\n          modal\\n          onClose={() => setOpen(false)}\\n          aria-label=\\\"example dialog\\\"\\n          style={{ zIndex: 1 }}\\n        >\\n          <Heading>\\n            <h2>Lorem ipsum dolor sit amet.</h2>\\n          </Heading>\\n          <div\\n            style={{\\n              background: colorsBackgroundLight[2],\\n              height: '176px'\\n            }}\\n          />\\n          <div className=\\\"buttons\\\">\\n            <Button appearance={Button.appearances.stroke}>Secondary</Button>\\n            <Button>Primary button</Button>\\n          </div>\\n        </Dialog>\\n      )}\\n\\n      <style jsx>{`\\n        .buttons {\\n          display: flex;\\n          justify-content: flex-end;\\n          margin-top: ${layout.spacingLarge};\\n        }\\n        .buttons > button:not(:last-child) {\\n          margin-right: ${layout.spacingMedium};\\n        }\\n      `}</style>\\n    </>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"guidelines\"\n  }, \"Guidelines\"), mdx(\"p\", null, \"In most cases, dialogs can assume the user to digest the content following a Z-Pattern. Readers will start in the top/left, move horizontally to the top/right and then diagonally to the bottom/left before finishing with another horizontal movement to the bottom/right. By that measure, place your actions at the bottom/right, with the primary action on the right.\"), mdx(Guideline, {\n    do: mdx(Dialog, {\n      disableFocusOnMount: true,\n      mdxType: \"Dialog\"\n    }, mdx(Text.Heading, null, mdx(\"h3\", null, \"Title\")), mdx(Text.P, null, \"Consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\"), mdx(\"div\", {\n      style: {\n        textAlign: 'right'\n      }\n    }, mdx(Button, {\n      appearance: Button.appearances.secondary,\n      style: {\n        marginRight: layout.spacingMedium\n      },\n      mdxType: \"Button\"\n    }, \"Secondary\"), mdx(Button, {\n      mdxType: \"Button\"\n    }, \"Primary\"))),\n    dont: mdx(Dialog, {\n      disableFocusOnMount: true,\n      mdxType: \"Dialog\"\n    }, mdx(Text.Heading, null, mdx(\"h3\", null, \"Title\")), mdx(Text.P, null, \"Consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\"), mdx(\"div\", null, mdx(Button, {\n      style: {\n        marginRight: layout.spacingMedium\n      },\n      mdxType: \"Button\"\n    }, \"Primary\"), mdx(Button, {\n      appearance: Button.appearances.secondary,\n      mdxType: \"Button\"\n    }, \"Secondary\"))),\n    mdxType: \"Guideline\"\n  }), mdx(\"p\", null, \"Don\\u2019t use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#modal\"\n  }, \"modal\"), \" dialogs when displaying non-critical information that doesn\\u2019t need to interrupt a workflow. Consider a dialog interaction which would be less intrusive.\"), mdx(Guideline, {\n    do: mdx(ModalGuidelineExample, {\n      mdxType: \"ModalGuidelineExample\"\n    }, mdx(\"div\", {\n      className: \"dialog\"\n    }, mdx(Dialog, {\n      disableFocusOnMount: true,\n      mdxType: \"Dialog\"\n    }, \"Bookmark added.\", ' ', mdx(Link, {\n      mdxType: \"Link\"\n    }, mdx(\"a\", {\n      href: \"#\"\n    }, \"Undo?\")))), mdx(\"style\", {\n      jsx: true\n    }, \"\\n        .dialog {\\n          position: absolute;\\n          bottom: \".concat(layout.spacingSmall, \";\\n          left: 50%;\\n          transform: translateX(-50%);\\n          white-space: nowrap;\\n        }\\n      \"))),\n    dont: mdx(\"div\", {\n      className: \"example\"\n    }, mdx(\"div\", {\n      className: \"background\"\n    }, mdx(ContentGridVisual, {\n      mdxType: \"ContentGridVisual\"\n    })), mdx(\"div\", {\n      className: \"fakeOverlay\"\n    }, mdx(Dialog, {\n      disableFocusOnMount: true,\n      style: {\n        maxWidth: '70%'\n      },\n      mdxType: \"Dialog\"\n    }, mdx(Text.Heading, null, mdx(\"h3\", null, \"Bookmark added\")), mdx(Text.P, null, \"Oh joy! You have successfully added a new bookmark.\"), mdx(\"div\", {\n      style: {\n        textAlign: 'right'\n      }\n    }, mdx(Button, {\n      mdxType: \"Button\"\n    }, \"Ok, got it\")))), mdx(\"style\", {\n      jsx: true\n    }, \"\\n        .example {\\n          position: relative;\\n          height: 100%;\\n          width: 100%;\\n          min-height: 400px;\\n        }\\n        .fakeOverlay {\\n          position: absolute;\\n          top: 0;\\n          left: 0;\\n          height: 100%;\\n          width: 100%;\\n          background-color: rgba(0, 0, 0, 0.5);\\n          border-radius: 12px;\\n          display: flex;\\n          justify-content: center;\\n          align-items: center;\\n        }\\n        .background {\\n          position: relative;\\n          height: 100%;\\n          width: 100%;\\n          padding: \".concat(layout.spacingXLarge, \";\\n        }\\n      \"))),\n    dontStyle: {\n      padding: 0\n    },\n    mdxType: \"Guideline\"\n  }), mdx(\"p\", null, \"Be explicit as possible when writing dialog buttons. Use affirmative action text to clearly indicate the outcome of the decision. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://material.io/guidelines/components/dialogs.html#dialogs-alerts\"\n  }, \"Material Design\")), mdx(Guideline, {\n    do: mdx(Dialog, {\n      disableFocusOnMount: true,\n      mdxType: \"Dialog\"\n    }, mdx(Text.Heading, null, mdx(\"h3\", null, \"Delete record?\")), mdx(Text.P, null, \"This action cannot be reversed. Are you sure you want to delete this record?\"), mdx(\"div\", {\n      style: {\n        textAlign: 'right'\n      }\n    }, mdx(Button, {\n      appearance: Button.appearances.secondary,\n      style: {\n        marginRight: layout.spacingMedium\n      },\n      mdxType: \"Button\"\n    }, \"Cancel\"), mdx(Button, {\n      mdxType: \"Button\"\n    }, \"Delete record\"))),\n    dont: mdx(Dialog, {\n      disableFocusOnMount: true,\n      mdxType: \"Dialog\"\n    }, mdx(Text.Heading, null, mdx(\"h3\", null, \"Delete record?\")), mdx(Text.P, null, \"This action cannot be reversed. Are you sure you want to delete this record?\"), mdx(\"div\", {\n      style: {\n        textAlign: 'right'\n      }\n    }, mdx(Button, {\n      appearance: Button.appearances.secondary,\n      style: {\n        marginRight: layout.spacingMedium\n      },\n      mdxType: \"Button\"\n    }, \"Yes\"), mdx(Button, {\n      mdxType: \"Button\"\n    }, \"No\"))),\n    mdxType: \"Guideline\"\n  }), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"p\", null, \"WAI-ARIA Patterns: \", mdx(A, {\n    href: \"https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal\",\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    mdxType: \"A\"\n  }, \"Dialog\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"aria-label\",\n    required: true,\n    type: \"string\",\n    desc: \"description of dialog purpose\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"disableCloseButton\",\n    type: \"boolean\",\n    desc: \"removes close button UI\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"disableCloseOnEscape\",\n    type: \"boolean\",\n    desc: \"prevents closing Dialog with escape key\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"disableCloseOnOverlayClick\",\n    type: \"boolean\",\n    desc: \"prevents clicking modal overlay to close Dialog\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"disableFocusOnMount\",\n    type: \"boolean\",\n    desc: \"prevents focus the Dialog on render\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"modal\",\n    type: \"boolean\",\n    desc: \"makes Dialog modal\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"onClose\",\n    type: \"Event => void\",\n    desc: \"callback to be called by various close methods\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"tailPosition\",\n    type: mdx(TypesEnum, {\n      enum: Dialog.tailPositions,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"positions a tail pointer (from Dialog.tailPositions)\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"returnFocus\",\n    type: \"boolean\",\n    desc: \"manage focus; set focus on call where closed\",\n    default: \"true\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Dialog","route":"/components/dialog"},"headings":[{"value":"Dialog","depth":1},{"value":"Examples","depth":2},{"value":"In-app example","depth":3},{"value":"Tail","depth":3},{"value":"Closing","depth":3},{"value":"Modal","depth":3},{"value":"Guidelines","depth":2},{"value":"Accessibility","depth":2},{"value":"Props","depth":2}]}},"pageContext":{"slug":"/components/dialog/","version":"CHANGELOG"}},
    "staticQueryHashes": []}