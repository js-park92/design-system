{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/table",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Table\",\n  \"route\": \"/components/table\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar TypesEnum = makeShortcode(\"TypesEnum\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"table\"\n  }, \"Table\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"Tables are containers for displaying information. They allow users to quickly scan, sort, compare, and take action on large amounts of data.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=10235%3A29842\",\n    install: \"npm install @pluralsight/ps-design-system-table\",\n    import: \"import Table from '@pluralsight/ps-design-system-table'\",\n    packageName: \"table\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"basic-table\"\n  }, \"Basic table\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { layout } from '@pluralsight/ps-design-system-core'\\nimport Avatar from '@pluralsight/ps-design-system-avatar'\\nimport Button from '@pluralsight/ps-design-system-button'\\nimport { MoreIcon } from '@pluralsight/ps-design-system-icon'\\nimport Table from '@pluralsight/ps-design-system-table'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  const [users] = React.useState([\\n    { firstName: 'Lucy', lastName: 'Peck', email: 'lucy.peck@example.com' },\\n    { firstName: 'Jayden', lastName: 'Morales', email: 'jayden.morales@example.com' },\\n    { firstName: 'Milton', lastName: 'Lane', email: 'milton.lane@example.com' }\\n  ])\\n\\n  return (\\n    <Table>\\n      <Table.Head>\\n        <Table.Row>\\n          <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\">\\n            First name\\n          </Table.Header>\\n          <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\">\\n            Last name\\n          </Table.Header>\\n          <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\">\\n            Email\\n          </Table.Header>\\n          <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\"></Table.Header>\\n        </Table.Row>\\n      </Table.Head>\\n\\n      <Table.Body>\\n        {users.map((user, i) => (\\n          <Table.Row key={i}>\\n            <Table.Header role=\\\"rowheader\\\" scope=\\\"row\\\">\\n              <FlexContainer>\\n                <Avatar alt=\\\"avatar\\\" name={user.firstName} size=\\\"xSmall\\\" />\\n                <HorzSpacer />\\n                <span>{user.firstName}</span>\\n              </FlexContainer>\\n            </Table.Header>\\n            <Table.Cell>{user.lastName}</Table.Cell>\\n            <Table.Cell>{user.email}</Table.Cell>\\n            <Table.Cell align=\\\"right\\\">\\n              <Button\\n                icon={<MoreIcon />}\\n                appearance={Button.appearances.flat}\\n                size={Button.sizes.small}\\n              />\\n            </Table.Cell>\\n          </Table.Row>\\n        ))}\\n      </Table.Body>\\n    </Table>\\n  )\\n}\\n\\nconst FlexContainer: React.FC = props => (\\n  <div style={{ display: 'flex', alignItems: 'center' }} {...props} />\\n)\\n\\nconst HorzSpacer: React.FC = props => (\\n  <div\\n    style={{\\n      display: 'inline-block',\\n      width: layout.spacingSmall\\n    }}\\n    {...props}\\n  />\\n)\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"table-with-drawers\"\n  }, \"Table with drawers\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { layout } from '@pluralsight/ps-design-system-core'\\nimport Avatar from '@pluralsight/ps-design-system-avatar'\\nimport Button from '@pluralsight/ps-design-system-button'\\nimport { CaretDownIcon, CaretRightIcon, MoreIcon } from '@pluralsight/ps-design-system-icon'\\nimport Table from '@pluralsight/ps-design-system-table'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  const [users] = React.useState([\\n    { id: '1', firstName: 'Lucy', lastName: 'Peck', email: 'lucy.peck@example.com' },\\n    { id: '2', firstName: 'Jayden', lastName: 'Morales', email: 'jayden.morales@example.com' },\\n    { id: '3', firstName: 'Milton', lastName: 'Lane', email: 'milton.lane@example.com' }\\n  ])\\n\\n  const initialState = [users[1].id]\\n  const [expandedIds, setExpandedIds] = React.useState(initialState)\\n\\n  const expand = (user: { id: string }) => {\\n    const next = expandedIds.concat(user.id)\\n    setExpandedIds(next)\\n  }\\n  const collapse = (user: { id: string }) => {\\n    const next = expandedIds.filter(str => str !== user.id)\\n    setExpandedIds(next)\\n  }\\n\\n  return (\\n    <Table>\\n      <Table.Head>\\n        <Table.Row>\\n          <Table.Cell />\\n          <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\">\\n            First name\\n          </Table.Header>\\n          <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\">\\n            Last name\\n          </Table.Header>\\n          <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\">\\n            Email\\n          </Table.Header>\\n        </Table.Row>\\n      </Table.Head>\\n\\n      <Table.Body>\\n        {users.map((user, i) => {\\n          const expanded = expandedIds.includes(user.id)\\n          const toggle = expanded ? collapse : expand\\n\\n          return (\\n            <React.Fragment key={i}>\\n              <Table.Row>\\n                <Table.Cell>\\n                  <ExpandButton\\n                    expanded={expanded}\\n                    onClick={() => toggle(user)}\\n                  />\\n                </Table.Cell>\\n                <Table.Cell>{user.firstName}</Table.Cell>\\n                <Table.Cell>{user.lastName}</Table.Cell>\\n                <Table.Cell>{user.email}</Table.Cell>\\n              </Table.Row>\\n\\n              <Table.Drawer expanded={expanded} colSpan={4}>\\n                <div>\\n                  Drawer Content\\n                </div>\\n              </Table.Drawer>\\n            </React.Fragment>\\n          )\\n        })}\\n      </Table.Body>\\n    </Table>\\n  )\\n}\\n\\n\\ninterface ExpandButtonProps extends React.ComponentProps<typeof Button> {\\n  expanded: boolean\\n}\\n\\nconst ExpandButton: React.FC<ExpandButtonProps> = props => {\\n  const {\\n    appearance = 'flat',\\n    expanded,\\n    size = 'xSmall',\\n    title = 'Expand/Collapse additional content',\\n    ...rest\\n  } = props\\n\\n  const icon = expanded ? <CaretDownIcon /> : <CaretRightIcon />\\n\\n  return (\\n    <Button\\n      appearance={appearance}\\n      icon={icon}\\n      size={size}\\n      title={title}\\n      {...rest}\\n    />\\n  )\\n}\\n\\nconst FlexContainer: React.FC = props => (\\n  <div style={{ display: 'flex', alignItems: 'center' }} {...props} />\\n)\\n\\nconst HorzSpacer: React.FC = props => (\\n  <div\\n    style={{\\n      display: 'inline-block',\\n      width: layout.spacingSmall\\n    }}\\n    {...props}\\n  />\\n)\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"sticky-headers\"\n  }, \"Sticky headers\"), mdx(\"p\", null, \"Column headers can be stuck relative to a scrollable container.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { layout } from '@pluralsight/ps-design-system-core'\\nimport Avatar from '@pluralsight/ps-design-system-avatar'\\nimport Table from '@pluralsight/ps-design-system-table'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  const [users] = React.useState([\\n    { firstName: 'Lucy', lastName: 'Peck', email: 'lucy.peck@example.com' },\\n    { firstName: 'Jayden', lastName: 'Morales', email: 'jayden.morales@example.com' },\\n    { firstName: 'Milton', lastName: 'Lane', email: 'milton.lane@example.com' },\\n    { firstName: 'Lucy', lastName: 'Peck', email: 'lucy.peck@example.com' },\\n    { firstName: 'Jayden', lastName: 'Morales', email: 'jayden.morales@example.com' },\\n    { firstName: 'Milton', lastName: 'Lane', email: 'milton.lane@example.com' }\\n  ])\\n\\n  return (\\n    <div style={{ height: 200 }}>\\n      <Table scrollable>\\n        <Table.Head>\\n          <Table.Row>\\n            <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\" sticky>\\n              First name\\n            </Table.Header>\\n            <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\" sticky>\\n              Last name\\n            </Table.Header>\\n            <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\" sticky>\\n              Email\\n            </Table.Header>\\n          </Table.Row>\\n        </Table.Head>\\n\\n        <Table.Body>\\n          {users.map((user, i) => (\\n            <Table.Row key={i}>\\n              <Table.Header role=\\\"rowheader\\\" scope=\\\"row\\\">\\n                <FlexContainer>\\n                  <Avatar alt=\\\"avatar\\\" name={user.firstName} size=\\\"xSmall\\\" />\\n                  <HorzSpacer />\\n                  <span>{user.firstName}</span>\\n                </FlexContainer>\\n              </Table.Header>\\n              <Table.Cell>{user.lastName}</Table.Cell>\\n              <Table.Cell>{user.email}</Table.Cell>\\n            </Table.Row>\\n          ))}\\n        </Table.Body>\\n      </Table>\\n    </div>\\n  )\\n}\\n\\nconst FlexContainer: React.FC = props => (\\n  <div style={{ display: 'flex', alignItems: 'center' }} {...props} />\\n)\\n\\nconst HorzSpacer: React.FC = props => (\\n  <div\\n    style={{\\n      display: 'inline-block',\\n      width: layout.spacingSmall\\n    }}\\n    {...props}\\n  />\\n)\\n\\nexport default Example\\n\")), mdx(\"p\", null, \"Row headers can also be stuck relative to a scrollable container.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { layout } from '@pluralsight/ps-design-system-core'\\nimport Avatar from '@pluralsight/ps-design-system-avatar'\\nimport Checkbox from '@pluralsight/ps-design-system-checkbox'\\nimport Table from '@pluralsight/ps-design-system-table'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  const [users] = React.useState([\\n    { firstName: 'Lucy', lastName: 'Peck', email: 'lucy.peck@example.com' },\\n    { firstName: 'Jayden', lastName: 'Morales', email: 'jayden.morales@example.com' },\\n    { firstName: 'Milton', lastName: 'Lane', email: 'milton.lane@example.com' }\\n  ])\\n\\n  return (\\n    <div style={{ width: 250 }}>\\n      <Table scrollable>\\n        <Table.Head>\\n          <Table.Row>\\n            <Table.Cell />\\n            <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\">\\n              First name\\n            </Table.Header>\\n            <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\">\\n              Last name\\n            </Table.Header>\\n            <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\">\\n              Email\\n            </Table.Header>\\n          </Table.Row>\\n        </Table.Head>\\n\\n        <Table.Body>\\n          {users.map((user, i) => (\\n            <Table.Row key={i}>\\n              <Table.Header role=\\\"rowheader\\\" scope=\\\"row\\\" sticky>\\n                <Checkbox />\\n              </Table.Header>\\n              <Table.Header role=\\\"rowheader\\\" scope=\\\"row\\\">\\n                <FlexContainer>\\n                  <Avatar alt=\\\"avatar\\\" name={user.firstName} size=\\\"xSmall\\\" />\\n                  <HorzSpacer />\\n                  <span>{user.firstName}</span>\\n                </FlexContainer>\\n              </Table.Header>\\n              <Table.Cell>{user.lastName}</Table.Cell>\\n              <Table.Cell>{user.email}</Table.Cell>\\n            </Table.Row>\\n          ))}\\n        </Table.Body>\\n      </Table>\\n    </div>\\n  )\\n}\\n\\nconst FlexContainer: React.FC = props => (\\n  <div style={{ display: 'flex', alignItems: 'center' }} {...props} />\\n)\\n\\nconst HorzSpacer: React.FC = props => (\\n  <div\\n    style={{\\n      display: 'inline-block',\\n      width: layout.spacingSmall\\n    }}\\n    {...props}\\n  />\\n)\\n\\nexport default Example\\n\")), mdx(\"p\", null, \"To position the sticky header relative to the viewport, the Design System\\nexports a renderContainer component to track positioning and update the column\\nheaders accordingly.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { layout } from '@pluralsight/ps-design-system-core'\\nimport Avatar from '@pluralsight/ps-design-system-avatar'\\nimport Table, { StickyContainer } from '@pluralsight/ps-design-system-table'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  const [users] = React.useState([\\n    { firstName: 'Lucy', lastName: 'Peck', email: 'lucy.peck@example.com' },\\n    { firstName: 'Jayden', lastName: 'Morales', email: 'jayden.morales@example.com' },\\n    { firstName: 'Milton', lastName: 'Lane', email: 'milton.lane@example.com' }\\n  ])\\n\\n  return (\\n    <Table renderContainer={StickyContainer}>\\n      <Table.Head>\\n        <Table.Row>\\n          <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\" sticky>\\n            First name\\n          </Table.Header>\\n          <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\" sticky>\\n            Last name\\n          </Table.Header>\\n          <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\" sticky>\\n            Email\\n          </Table.Header>\\n        </Table.Row>\\n      </Table.Head>\\n\\n      <Table.Body>\\n        {users.map((user, i) => (\\n          <Table.Row key={i}>\\n            <Table.Header role=\\\"rowheader\\\" scope=\\\"row\\\">\\n              <FlexContainer>\\n                <Avatar alt=\\\"avatar\\\" name={user.firstName} size=\\\"xSmall\\\" />\\n                <HorzSpacer />\\n                <span>{user.firstName}</span>\\n              </FlexContainer>\\n            </Table.Header>\\n            <Table.Cell>{user.lastName}</Table.Cell>\\n            <Table.Cell>{user.email}</Table.Cell>\\n          </Table.Row>\\n        ))}\\n      </Table.Body>\\n    </Table>\\n  )\\n}\\n\\nconst FlexContainer: React.FC = props => (\\n  <div style={{ display: 'flex', alignItems: 'center' }} {...props} />\\n)\\n\\nconst HorzSpacer: React.FC = props => (\\n  <div\\n    style={{\\n      display: 'inline-block',\\n      width: layout.spacingSmall\\n    }}\\n    {...props}\\n  />\\n)\\n\\nexport default Example\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"NOTE: Sticky headers are an advanced feature and are expected to gracefully degrade in non evergreen/modern browsers.\")), mdx(\"h2\", {\n    \"id\": \"usage-with-react-table\"\n  }, \"Usage with react-table\"), mdx(\"p\", null, \"The Design System aims to provide the UI building block necessary for great\\ninterfaces but does not implement some of the more advanced features you might\\nneed to build an interactive table. When you need more advanced features we\\nsuggest you use a library like \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/tannerlinsley/react-table\"\n  }, \"react-table\"), \"\\nto ease implementation.\"), mdx(\"h3\", {\n    \"id\": \"basic-react-table-usage\"\n  }, \"Basic react-table usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Table from '@pluralsight/ps-design-system-table'\\n\\nimport React from 'react'\\nimport { Column, useTable } from 'react-table'\\n\\nconst Example: React.FC = () => {\\n  const columns = React.useMemo<Column[]>(() => [\\n    { Header: 'First name', accessor: user => user.firstName, title: \\\"First name\\\" },\\n    { Header: 'Last name', accessor: user => user.lastName, title: 'Last name' }\\n  ], [])\\n  const data = React.useMemo(() => [\\n    { firstName: 'Lucy', lastName: 'Peck' },\\n    { firstName: 'Jayden', lastName: 'Morales' },\\n    { firstName: 'Milton', lastName: 'Lane' },\\n    { firstName: 'Dwayne', lastName: 'Kelly' }\\n  ], [])\\n\\n  const table = useTable({ columns, data })\\n\\n  return (\\n    <Table {...table.getTableProps()}>\\n      <Table.Head>\\n      {table.headerGroups.map(group => (\\n        <Table.Row {...group.getHeaderGroupProps()}>\\n        {group.headers.map(column => (\\n          <Table.Header {...column.getHeaderProps({ title: column.title })}>\\n            {column.render('Header')}\\n          </Table.Header>\\n        ))}\\n        </Table.Row>\\n      ))}\\n      </Table.Head>\\n\\n      <Table.Body {...table.getTableBodyProps}>\\n      {table.rows\\n        .map(row => {\\n          table.prepareRow(row)\\n          return row\\n        })\\n        .map(row => (\\n          <Table.Row {...row.getRowProps()}>\\n            {row.cells.map(cell => (\\n              <Table.Cell {...cell.getCellProps()}>\\n                {cell.render('Cell')}\\n              </Table.Cell>\\n            ))}\\n          </Table.Row>\\n        ))}\\n      </Table.Body>\\n    </Table>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"sorting\"\n  }, \"Sorting\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import ScreenReaderOnly from '@pluralsight/ps-design-system-screenreaderonly'\\nimport Table from '@pluralsight/ps-design-system-table'\\nimport { useUniqueId } from '@pluralsight/ps-design-system-util'\\n\\nimport React from 'react'\\nimport { Column, useTable, useSortBy } from 'react-table'\\n\\nconst Example: React.FC = () => {\\n  const columns = React.useMemo<Column[]>(() => [\\n    { Header: 'First name', accessor: user => user.firstName, title: \\\"First name\\\" },\\n    { Header: 'Last name', accessor: user => user.lastName, title: 'Last name' }\\n  ], [])\\n  const data = React.useMemo(() => [\\n    { firstName: 'Lucy', lastName: 'Peck' },\\n    { firstName: 'Jayden', lastName: 'Morales' },\\n    { firstName: 'Milton', lastName: 'Lane' },\\n    { firstName: 'Dwayne', lastName: 'Kelly' }\\n  ], [])\\n\\n  const table = useTable({ columns, data }, useSortBy)\\n\\n  const captionId = useUniqueId()\\n  const title = 'Employees'\\n  const initialCaption = `${title}: Not sorted`\\n  const [caption, setCaption] = React.useState(initialCaption)\\n\\n  React.useEffect(() => {\\n    const [activeSortRule] = table.state.sortBy\\n    if (!activeSortRule) {\\n      setCaption(initialCaption)\\n      return\\n    }\\n    const { id: ruleId, desc } = activeSortRule\\n    const ruleDir = desc ? 'descending' : 'ascending'\\n\\n    setCaption(`${title} sorted by ${ruleId}: ${ruleDir} order`)\\n  }, [table.state.sortBy, initialCaption])\\n\\n  return (\\n    <Table {...table.getTableProps()} aria-labelledby={captionId}>\\n      <caption aria-live=\\\"polite\\\" id={captionId}>\\n        <ScreenReaderOnly>{caption}</ScreenReaderOnly>\\n      </caption>\\n\\n      <Table.Head>\\n      {table.headerGroups.map(group => (\\n        <Table.Row {...group.getHeaderGroupProps()}>\\n        {group.headers.map(column => {\\n          const { canSort, isSorted, isSortedDesc } = column\\n\\n          const sort = isSorted ? (isSortedDesc ? 'desc' : 'asc') : false\\n          const title: string = (column as any).title\\n\\n          const sortByProps = column.getSortByToggleProps()\\n          const headerProps = column.getHeaderProps(sortByProps)\\n\\n          return (\\n            <Table.Header\\n              {...headerProps}\\n              role=\\\"columnheader\\\"\\n              scope=\\\"col\\\"\\n              sort={canSort ? sort : undefined}\\n              title={title}\\n            >\\n              {column.render('Header')}\\n            </Table.Header>\\n          )\\n        })}\\n        </Table.Row>\\n      ))}\\n      </Table.Head>\\n\\n      <Table.Body {...table.getTableBodyProps}>\\n      {table.rows\\n        .map(row => {\\n          table.prepareRow(row)\\n          return row\\n        })\\n        .map(row => (\\n          <Table.Row {...row.getRowProps()}>\\n            {row.cells.map(cell => (\\n              <Table.Cell {...cell.getCellProps()}>\\n                {cell.render('Cell')}\\n              </Table.Cell>\\n            ))}\\n          </Table.Row>\\n        ))}\\n      </Table.Body>\\n    </Table>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"multi-select\"\n  }, \"Multi select\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport Checkbox from '@pluralsight/ps-design-system-checkbox'\\nimport { layout } from '@pluralsight/ps-design-system-core'\\nimport { ChatIcon, MoveIcon } from '@pluralsight/ps-design-system-icon'\\nimport ScreenReaderOnly from '@pluralsight/ps-design-system-screenreaderonly'\\nimport Table from '@pluralsight/ps-design-system-table'\\n\\nimport React from 'react'\\nimport { Column, useTable, useRowSelect } from 'react-table'\\n\\nconst selectionHook = (hooks: Hooks<any>) => {\\n  hooks.visibleColumns.push(columns => [\\n    {\\n      Cell: SelectionCell,\\n      Header: SelectionHeader,\\n      disableGroupBy: true,\\n      id: '_selection'\\n    },\\n    ...columns\\n  ])\\n}\\n\\nconst SelectionCell: React.FC<CellProps<any>> = props => {\\n  const { row } = props\\n  return <TableCheckbox {...row.getToggleRowSelectedProps()} />\\n}\\n\\nconst SelectionHeader: React.FC<HeaderProps<any>> = props => {\\n  const { getToggleAllRowsSelectedProps } = props\\n  const style = { width: 1 }\\n  return <TableCheckbox {...getToggleAllRowsSelectedProps({ style })} />\\n}\\n\\ninterface TableCheckboxProps extends Omit<HTMLPropsFor<'input'>, 'ref'> {\\n  indeterminate?: boolean\\n}\\nconst TableCheckbox: React.FC<TableCheckboxProps> = props => {\\n  const { onChange, ...rest } = props\\n  return <Checkbox onCheck={onChange} {...rest} />\\n}\\n\\nconst Example: React.FC = () => {\\n  const columns = React.useMemo<Column[]>(() => [\\n    { Header: 'First name', accessor: user => user.firstName, title: \\\"First name\\\" },\\n    { Header: 'Last name', accessor: user => user.lastName, title: 'Last name' }\\n  ], [])\\n  const data = React.useMemo(() => [\\n    { firstName: 'Lucy', lastName: 'Peck' },\\n    { firstName: 'Jayden', lastName: 'Morales' },\\n    { firstName: 'Milton', lastName: 'Lane' },\\n    { firstName: 'Dwayne', lastName: 'Kelly' }\\n  ], [])\\n\\n  const table = useTable({ columns, data }, useRowSelect, selectionHook)\\n\\n  const actionsDisabled = React.useMemo(\\n    () => Object.keys(table.state.selectedRowIds).length <= 0,\\n    [table.state.selectedRowIds]\\n  )\\n\\n  return (\\n    <div>\\n      <FlexContainer>\\n        <Button\\n          appearance=\\\"secondary\\\"\\n          disabled={actionsDisabled}\\n          icon={<MoveIcon />}\\n        >\\n          Move to team\\n        </Button>\\n\\n        <HorzSpacer />\\n\\n        <Button\\n          appearance=\\\"secondary\\\"\\n          disabled={actionsDisabled}\\n          icon={<ChatIcon />}\\n        >\\n          Send message\\n        </Button>\\n      </FlexContainer>\\n\\n      <br />\\n\\n      <Table {...table.getTableProps()}>\\n        <Table.Head>\\n        {table.headerGroups.map(group => (\\n          <Table.Row {...group.getHeaderGroupProps()}>\\n          {group.headers.map(column => {\\n            const title: string = (column as any).title\\n\\n            return (\\n              <Table.Header\\n                {...column.getHeaderProps()}\\n                role=\\\"columnheader\\\"\\n                scope=\\\"col\\\"\\n                style={{ width: column.id === '_selection' ? 1 : undefined }}\\n                title={title}\\n              >\\n                {column.render('Header')}\\n              </Table.Header>\\n            )\\n          })}\\n          </Table.Row>\\n        ))}\\n        </Table.Head>\\n\\n        <Table.Body {...table.getTableBodyProps}>\\n        {table.rows\\n          .map(row => {\\n            table.prepareRow(row)\\n            return row\\n          })\\n          .map(row => (\\n            <Table.Row selected={row.isSelected} {...row.getRowProps()}>\\n              {row.cells.map(cell => (\\n                <Table.Cell {...cell.getCellProps()}>\\n                  {cell.render('Cell')}\\n                </Table.Cell>\\n              ))}\\n            </Table.Row>\\n          ))}\\n        </Table.Body>\\n      </Table>\\n    </div>\\n  )\\n}\\n\\n\\nconst FlexContainer: React.FC = props => (\\n  <div style={{ display: 'flex', alignItems: 'center' }} {...props} />\\n)\\n\\nconst HorzSpacer: React.FC = props => (\\n  <div style={{ display: 'inline-block', width: layout.spacingSmall }} {...props} />\\n)\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"row-expandcollapse\"\n  }, \"Row expand/collapse\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport Checkbox from '@pluralsight/ps-design-system-checkbox'\\nimport { layout } from '@pluralsight/ps-design-system-core'\\nimport { CaretDownIcon, CaretLeftIcon, CaretRightIcon } from '@pluralsight/ps-design-system-icon'\\nimport ScreenReaderOnly from '@pluralsight/ps-design-system-screenreaderonly'\\nimport Table from '@pluralsight/ps-design-system-table'\\n\\nimport React from 'react'\\nimport { Column, useExpanded, useTable } from 'react-table'\\n\\nconst expanderHook = (hooks: Hooks<any>) => {\\n  hooks.visibleColumns.push(columns => [\\n    {\\n      Cell: ExpanderCell,\\n      Header: ExpanderHeader,\\n      disableGroupBy: true,\\n      id: '_expander'\\n    },\\n    ...columns\\n  ])\\n}\\n\\nconst ExpanderCell: React.FC<CellProps<any>> = props => {\\n  const { row } = props\\n  if (!row.canExpand) return null\\n\\n  const style = {\\n    paddingLeft: `calc(${layout.spacingLarge} * ${row.depth})`\\n  }\\n\\n  const icon = row.isExpanded ? <CaretDownIcon /> : <CaretRightIcon />\\n\\n  return (\\n    <span {...row.getToggleRowExpandedProps({ style })}>\\n      <Button\\n        appearance=\\\"flat\\\"\\n        icon={icon}\\n        size=\\\"xSmall\\\"\\n        title=\\\"Expand/Collapse additional content\\\"\\n      />\\n    </span>\\n  )\\n}\\n\\nconst ExpanderHeader: React.FC<HeaderProps<any>> = props => {\\n  const { getToggleAllRowsExpandedProps, isAllRowsExpanded } = props\\n  const icon = isAllRowsExpanded ? <CaretDownIcon /> : <CaretRightIcon />\\n  return (\\n    <span {...getToggleAllRowsExpandedProps()}>\\n      <Button\\n        appearance=\\\"flat\\\"\\n        icon={icon}\\n        size=\\\"xSmall\\\"\\n        title=\\\"Expand/Collapse additional content\\\"\\n        {...getToggleAllRowsExpandedProps()}\\n      />\\n    </span>\\n  )\\n}\\n\\nconst Example: React.FC = () => {\\n  const columns = React.useMemo<Column[]>(() => [\\n    { Header: 'First name', accessor: user => user.firstName, title: \\\"First name\\\" },\\n    { Header: 'Last name', accessor: user => user.lastName, title: 'Last name' }\\n  ], [])\\n  const data = React.useMemo(() => [\\n    {\\n      firstName: 'Lucy',\\n      lastName: 'Peck',\\n      subRows: [\\n        { firstName: 'Milton', lastName: 'Lane' },\\n        { firstName: 'Dwayne', lastName: 'Kelly' }\\n      ]\\n    },\\n    {\\n      firstName: 'Jayden',\\n      lastName: 'Morales',\\n      subRows: [\\n        { firstName: 'Milton', lastName: 'Lane' },\\n        { firstName: 'Dwayne', lastName: 'Kelly' }\\n      ]\\n    },\\n  ], [])\\n\\n  const table = useTable({ columns, data }, useExpanded, expanderHook)\\n\\n  return (\\n    <Table {...table.getTableProps()}>\\n      <Table.Head>\\n      {table.headerGroups.map(group => (\\n        <Table.Row {...group.getHeaderGroupProps()}>\\n        {group.headers.map(column => {\\n          const title: string = (column as any).title\\n\\n          return (\\n            <Table.Header\\n              {...column.getHeaderProps()}\\n              role=\\\"columnheader\\\"\\n              scope=\\\"col\\\"\\n              style={{ width: column.id === '_expander' ? 1 : undefined }}\\n              title={title}\\n            >\\n              {column.render('Header')}\\n            </Table.Header>\\n          )\\n        })}\\n        </Table.Row>\\n      ))}\\n      </Table.Head>\\n\\n      <Table.Body {...table.getTableBodyProps}>\\n      {table.rows\\n        .map(row => {\\n          table.prepareRow(row)\\n          return row\\n        })\\n        .map(row => (\\n          <Table.Row {...row.getRowProps()}>\\n            {row.cells.map(cell => (\\n              <Table.Cell {...cell.getCellProps()}>\\n                {cell.render('Cell')}\\n              </Table.Cell>\\n            ))}\\n          </Table.Row>\\n        ))}\\n      </Table.Body>\\n    </Table>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"pagination\"\n  }, \"Pagination\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport { layout } from '@pluralsight/ps-design-system-core'\\nimport Dropdown from '@pluralsight/ps-design-system-dropdown'\\nimport { CaretLeftIcon, CaretRightIcon } from '@pluralsight/ps-design-system-icon'\\nimport Table from '@pluralsight/ps-design-system-table'\\nimport { P } from '@pluralsight/ps-design-system-text'\\n\\nimport React from 'react'\\nimport { TableInstance, Column, useTable, usePagination } from 'react-table'\\n\\nconst Example: React.FC = () => {\\n  const columns = React.useMemo<Column[]>(() => [\\n    { Header: 'First name', accessor: user => user.firstName, title: \\\"First name\\\" },\\n    { Header: 'Last name', accessor: user => user.lastName, title: 'Last name' }\\n  ], [])\\n  const data = React.useMemo(() => [\\n    { firstName: 'Lucy', lastName: 'Peck' },\\n    { firstName: 'Jayden', lastName: 'Morales' },\\n    { firstName: 'Milton', lastName: 'Lane' },\\n    { firstName: 'Dwayne', lastName: 'Kelly' },\\n    { firstName: 'Don', lastName: 'Morgan' },\\n    { firstName: 'Camila', lastName: 'Turner' },\\n    { firstName: 'Gabe', lastName: 'Austin' },\\n    { firstName: 'Jeanne', lastName: 'Pierce' },\\n    { firstName: 'Scarlette', lastName: 'Obrien' },\\n    { firstName: 'Jimmie', lastName: 'Carpenter' }\\n  ], [])\\n\\n  const initialState = { pageSize: 2 }\\n  const table = useTable({ columns, data, initialState }, usePagination)\\n\\n  return (\\n    <div>\\n      <Table {...table.getTableProps()}>\\n        <Table.Head>\\n        {table.headerGroups.map(group => (\\n          <Table.Row {...group.getHeaderGroupProps()}>\\n          {group.headers.map(column => (\\n            <Table.Header {...column.getHeaderProps({ title: column.title })}>\\n              {column.render('Header')}\\n            </Table.Header>\\n          ))}\\n          </Table.Row>\\n        ))}\\n        </Table.Head>\\n\\n        <Table.Body {...table.getTableBodyProps}>\\n        {table.page\\n          .map(row => {\\n            table.prepareRow(row)\\n            return row\\n          })\\n          .map(row => (\\n            <Table.Row {...row.getRowProps()}>\\n              {row.cells.map(cell => (\\n                <Table.Cell {...cell.getCellProps()}>\\n                  {cell.render('Cell')}\\n                </Table.Cell>\\n              ))}\\n            </Table.Row>\\n          ))}\\n        </Table.Body>\\n      </Table>\\n\\n      <FlexContainer>\\n        <Paginator table={table} />\\n      </FlexContainer>\\n    </div>\\n  )\\n}\\n\\ninterface PaginatorProps {\\n  perPageOptions?: number[]\\n  table: TableInstance\\n}\\nconst Paginator: React.FC<PaginatorProps> = props => {\\n  const { perPageOptions = [2, 5, 10], table } = props\\n  const { pageIndex, pageSize } = table.state\\n\\n  const handlePrevPage = () => table.previousPage()\\n  const handleNextPage = () => table.nextPage()\\n\\n  const total = table.rows.length\\n  const cursorStart = pageIndex * pageSize + 1\\n  const cursorEnd = Math.min(cursorStart + pageSize - 1, total)\\n\\n  return (\\n    <div style={{ display: 'flex', marginBottom: layout.spacingMedium }}>\\n      <Button\\n        appearance=\\\"secondary\\\"\\n        disabled={!table.canPreviousPage}\\n        icon={<CaretLeftIcon />}\\n        onClick={handlePrevPage}\\n        title=\\\"Previous page\\\"\\n      />\\n      <HorzSpacer />\\n      <Button\\n        appearance=\\\"secondary\\\"\\n        disabled={!table.canNextPage}\\n        icon={<CaretRightIcon />}\\n        onClick={handleNextPage}\\n        title=\\\"Next page\\\"\\n      />\\n\\n      <HorzSpacer />\\n\\n      <P>\\n        {cursorStart.toLocaleString()}-{cursorEnd.toLocaleString()} of{' '}\\n        {total.toLocaleString()}\\n      </P>\\n\\n      <HorzSpacer />\\n\\n      <Dropdown\\n        appearance=\\\"subtle\\\"\\n        onChange={(_evt, value) => {\\n          table.setPageSize(Number(value))\\n        }}\\n        menu={\\n          <>\\n            {perPageOptions.map(option => (\\n              <Dropdown.Item key={option} value={option}>\\n                {String(option) + ' rows'}\\n              </Dropdown.Item>\\n            ))}\\n          </>\\n        }\\n        value={pageSize}\\n      />\\n    </div>\\n  )\\n}\\n\\nconst FlexContainer: React.FC = props => (\\n  <div style={{ display: 'flex', alignItems: 'center' }} {...props} />\\n)\\n\\nconst HorzSpacer: React.FC = props => (\\n  <div style={{ display: 'inline-block', width: layout.spacingSmall }} {...props} />\\n)\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"usage-with-react-beautiful-dnd\"\n  }, \"Usage with react-beautiful-dnd\"), mdx(\"p\", null, \"Table row drag and drop can be accomplished using a library such as\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/atlassian/react-beautiful-dnd\"\n  }, \"react-beautiful-dnd\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { colorsTextIcon } from '@pluralsight/ps-design-system-core'\\nimport Table from '@pluralsight/ps-design-system-table'\\nimport { useTheme } from '@pluralsight/ps-design-system-theme'\\n\\nimport React from 'react'\\nimport { DragDropContext, DraggableProvided, DraggableStateSnapshot, DropResult, Droppable, DroppableProvided, Draggable } from 'react-beautiful-dnd'\\n\\nconst Example: React.FC = () => {\\n  const [data, setData] = React.useState(() => [\\n    { id: 'lucy.peck', firstName: 'Lucy', lastName: 'Peck' },\\n    { id: 'jayden-morales', firstName: 'Jayden', lastName: 'Morales' },\\n    { id: 'milton-lane', firstName: 'Milton', lastName: 'Lane' },\\n    { id: 'dwayne-kelly', firstName: 'Dwayne', lastName: 'Kelly' },\\n    { id: 'don-morgan', firstName: 'Don', lastName: 'Morgan' },\\n    { id: 'camila-turner', firstName: 'Camila', lastName: 'Turner' },\\n    { id: 'gabe-austin', firstName: 'Gabe', lastName: 'Austin' },\\n    { id: 'jeanne-pierce', firstName: 'Jeanne', lastName: 'Pierce' },\\n    { id: 'scarlette-obrien', firstName: 'Scarlette', lastName: 'Obrien' },\\n    { id: 'jimmie-carpenter', firstName: 'Jimmie', lastName: 'Carpenter' }\\n  ])\\n\\n  const handleDragEnd = (result: DropResult) => {\\n    const { destination, source } = result\\n\\n    if (!destination) return\\n    if (destination.index === source.index) return\\n\\n    const nextData = reorder(data, source.index, destination.index)\\n    setData(nextData)\\n  }\\n\\n  return (\\n    <DragDropContext onDragEnd={handleDragEnd}>\\n      <Table>\\n        <Table.Head>\\n          <Table.Row>\\n            <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\" />\\n            <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\">\\n              First name\\n            </Table.Header>\\n            <Table.Header role=\\\"columnheader\\\" scope=\\\"col\\\">\\n              Last name\\n            </Table.Header>\\n          </Table.Row>\\n        </Table.Head>\\n\\n        <Droppable droppableId=\\\"droppable-body\\\">\\n          {({ droppableProps, placeholder, innerRef }: DroppableProvided) => (\\n            <Table.Body ref={ref => { innerRef(ref) }} {...droppableProps}>\\n              {data.map((user, i) => (\\n                <Draggable draggableId={user.id} key={user.id} index={i}>\\n                  {(\\n                    provided: DraggableProvided,\\n                    snapshot: DraggableStateSnapshot\\n                  ) => (\\n                    <DraggableRow\\n                      key={i}\\n                      ref={provided.innerRef}\\n                      provided={provided}\\n                      snapshot={snapshot}\\n                    >\\n                      <Table.Cell>{user.firstName}</Table.Cell>\\n                      <Table.Cell>{user.lastName}</Table.Cell>\\n                    </DraggableRow>\\n                  )}\\n                </Draggable>\\n              ))}\\n\\n              {placeholder}\\n            </Table.Body>\\n          )}\\n        </Droppable>\\n      </Table>\\n    </DragDropContext>\\n  )\\n}\\n\\ninterface DraggableRowProps extends React.ComponentProps<typeof Table.Row> {\\n  provided: DraggableProvided\\n  snapshot: DraggableStateSnapshot\\n}\\nconst DraggableRow = React.forwardRef<HTMLTableRowElement, DraggableRowProps>(\\n  (props, ref) => {\\n    const { children, provided, snapshot, ...rest } = props\\n\\n    return (\\n      <Table.Row ref={ref} {...provided.draggableProps} {...rest}>\\n        <Table.Cell style={{ width: 1 }}>\\n          <Handle {...provided.dragHandleProps} />\\n        </Table.Cell>\\n        {children}\\n      </Table.Row>\\n    )\\n  }\\n)\\n\\nconst Handle: React.FC = props => {\\n  const dark = useTheme() === 'dark'\\n  const [cols, rows, gutter, size] = [2, 4, 2, 2]\\n\\n  const matrix = new Array(rows).fill(new Array(cols).fill(null))\\n  const shadow = matrix.map((c, i: number) =>\\n    c.map((_r: any, j: number) => {\\n      const x = j * size + j * gutter\\n      const y = i * size + i * gutter\\n\\n      return `${x}px ${y}px`\\n    })\\n  )\\n\\n  return (\\n    <>\\n      <div {...props} className=\\\"handle\\\" />\\n      <style jsx>{`\\n        .handle {\\n          color: ${dark ? colorsTextIcon.lowOnDark : colorsTextIcon.lowOnLight};\\n          cursor: grab;\\n          display: inline-block;\\n          height: ${(size + gutter) * rows}px;\\n          position: relative;\\n          width: ${(size + gutter) * cols}px;\\n        }\\n        .handle:before {\\n          background-color: currentColor;\\n          box-shadow: ${shadow.toString()};\\n          content: ' ';\\n          height: ${size}px;\\n          left: ${gutter}px;\\n          position: absolute;\\n          top: ${gutter}px;\\n          width: ${size}px;\\n        }\\n      `}</style>\\n    </>\\n  )\\n}\\n\\nconst reorder = (list: unknown[], startIndex: number, endIndex: number): any[] => {\\n  const result = Array.from(list)\\n  const [removed] = result.splice(startIndex, 1)\\n  result.splice(endIndex, 0, removed)\\n\\n  return result\\n}\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"table-1\"\n  }, \"Table\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"renderContainer\",\n    type: \"(props) => React.ReactNode\",\n    desc: \"container render prop\",\n    default: \"(p) => <div {...p} />\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"scrollable\",\n    type: \"boolean\",\n    desc: \"enables horizontal scrolling\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"tablecell\"\n  }, \"Table.Cell\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"align\",\n    type: mdx(TypesEnum, {\n      enum: Table.alignments,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"text alignment\",\n    default: Table.alignments.left,\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"tableheader\"\n  }, \"Table.Header\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"align\",\n    type: mdx(TypesEnum, {\n      enum: Table.alignments,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"text alignment\",\n    default: Table.alignments.left,\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"role\",\n    required: true,\n    type: \"columnheader | rowheader\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"scope\",\n    required: true,\n    type: \"col | row\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"sort\",\n    type: \"true | asc | desc\",\n    desc: \"column sorting options\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"sticky\",\n    type: \"boolean\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"title\",\n    type: \"string\",\n    desc: \"accessible title. required when using sortable columns\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"tablerow\"\n  }, \"Table.Row\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"expanded\",\n    type: \"boolean\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"selected\",\n    type: \"boolean\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Table","route":"/components/table"},"headings":[{"value":"Table","depth":1},{"value":"Examples","depth":2},{"value":"Basic table","depth":3},{"value":"Table with drawers","depth":3},{"value":"Sticky headers","depth":3},{"value":"Usage with react-table","depth":2},{"value":"Basic react-table usage","depth":3},{"value":"Sorting","depth":3},{"value":"Multi select","depth":3},{"value":"Row expand/collapse","depth":3},{"value":"Pagination","depth":3},{"value":"Usage with react-beautiful-dnd","depth":2},{"value":"Accessibility","depth":2},{"value":"Props","depth":2},{"value":"Table","depth":3},{"value":"Table.Cell","depth":3},{"value":"Table.Header","depth":3},{"value":"Table.Row","depth":3}]}},"pageContext":{"slug":"/components/table/","version":"CHANGELOG"}},
    "staticQueryHashes": []}