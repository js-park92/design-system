{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/switch",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Switch\",\n  \"route\": \"/components/switch\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Intro = makeShortcode(\"Intro\");\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Usage = makeShortcode(\"Usage\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar A = makeShortcode(\"A\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar TypesEnum = makeShortcode(\"TypesEnum\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"switch\"\n  }, \"Switch\"), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"Switches allow users to turn an individual option on or off. They are usually used to activate or deactivate a specific setting.\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=10235%3A29933\",\n    install: \"npm install @pluralsight/ps-design-system-switch\",\n    import: \"import Switch from '@pluralsight/ps-design-system-switch'\",\n    packageName: \"switch\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"sizes--colors\"\n  }, \"Sizes & Colors\"), mdx(\"p\", null, \"Switches come in two sizes and two colors.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Switch from '@pluralsight/ps-design-system-switch'\\n\\nfunction Example() {\\n  return (\\n    <div className=\\\"example-grid--col-2\\\">\\n      <Switch size={Switch.sizes.large} color={Switch.colors.blue} checked>\\n        Large blue\\n      </Switch>\\n      <Switch size={Switch.sizes.small} color={Switch.colors.blue} checked>\\n        Small blue\\n      </Switch>\\n      <Switch size={Switch.sizes.large} color={Switch.colors.green} checked>\\n        Large green\\n      </Switch>\\n      <Switch size={Switch.sizes.small} color={Switch.colors.green} checked>\\n        Small green\\n      </Switch>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"label-alignment\"\n  }, \"Label alignment\"), mdx(\"p\", null, \"Labels will provide additional context around the usage of the switch and can be aligned to the left or right of the switch\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Switch from '@pluralsight/ps-design-system-switch'\\n\\nfunction Example() {\\n  return (\\n    <div className=\\\"example-grid--col-2\\\">\\n      <Switch\\n        size={Switch.sizes.large}\\n        color={Switch.colors.blue}\\n        checked\\n        labelAlign=\\\"right\\\"\\n      >\\n        Large blue\\n      </Switch>\\n      <Switch\\n        size={Switch.sizes.small}\\n        color={Switch.colors.blue}\\n        checked\\n        labelAlign=\\\"right\\\"\\n      >\\n        Small blue\\n      </Switch>\\n      <Switch\\n        size={Switch.sizes.large}\\n        color={Switch.colors.green}\\n        checked\\n        labelAlign=\\\"right\\\"\\n      >\\n        Large green\\n      </Switch>\\n      <Switch\\n        size={Switch.sizes.small}\\n        color={Switch.colors.green}\\n        labelAlign=\\\"right\\\"\\n        checked\\n      >\\n        Small green\\n      </Switch>\\n      <Switch\\n        size={Switch.sizes.large}\\n        color={Switch.colors.blue}\\n        labelAlign=\\\"left\\\"\\n        checked\\n      >\\n        Large blue\\n      </Switch>\\n      <Switch\\n        size={Switch.sizes.small}\\n        color={Switch.colors.blue}\\n        labelAlign=\\\"left\\\"\\n        checked\\n      >\\n        Small blue\\n      </Switch>\\n      <Switch\\n        size={Switch.sizes.large}\\n        color={Switch.colors.green}\\n        labelAlign=\\\"left\\\"\\n        checked\\n      >\\n        Large blue\\n      </Switch>\\n      <Switch\\n        size={Switch.sizes.small}\\n        color={Switch.colors.green}\\n        labelAlign=\\\"left\\\"\\n        checked\\n      >\\n        Small green\\n      </Switch>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"disabled\"\n  }, \"Disabled\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Switch from '@pluralsight/ps-design-system-switch'\\n\\nfunction Example() {\\n  return (\\n    <div className=\\\"example-grid--col-2\\\">\\n      <Switch\\n        size={Switch.sizes.large}\\n        color={Switch.colors.blue}\\n        checked\\n        disabled\\n      >\\n        Large blue\\n      </Switch>\\n      <Switch\\n        size={Switch.sizes.small}\\n        color={Switch.colors.blue}\\n        checked\\n        disabled\\n      >\\n        Small blue\\n      </Switch>\\n      <Switch\\n        size={Switch.sizes.large}\\n        color={Switch.colors.green}\\n        checked\\n        disabled\\n      >\\n        Large blue\\n      </Switch>\\n      <Switch\\n        size={Switch.sizes.small}\\n        color={Switch.colors.green}\\n        checked\\n        disabled\\n      >\\n        Small green\\n      </Switch>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"error-state\"\n  }, \"Error state\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Switch from '@pluralsight/ps-design-system-switch'\\n\\nfunction Example() {\\n  return (\\n    <div className=\\\"example-grid--col-2\\\">\\n      <Switch\\n        size={Switch.sizes.large}\\n        color={Switch.colors.blue}\\n        checked\\n        error\\n      >\\n        Large blue\\n      </Switch>\\n      <Switch\\n        size={Switch.sizes.small}\\n        color={Switch.colors.blue}\\n        checked\\n        error\\n      >\\n        Small blue\\n      </Switch>\\n      <Switch\\n        size={Switch.sizes.large}\\n        color={Switch.colors.green}\\n        checked\\n        error\\n      >\\n        Large blue\\n      </Switch>\\n      <Switch\\n        size={Switch.sizes.small}\\n        color={Switch.colors.green}\\n        checked\\n        error\\n      >\\n        Small green\\n      </Switch>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"p\", null, \"WAI-ARIA Patterns: \", mdx(A, {\n    href: \"https://www.w3.org/TR/wai-aria-practices-1.2/#checkbox\",\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    mdxType: \"A\"\n  }, \"Checkbox\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"checked\",\n    type: \"boolean\",\n    desc: \"shows a toggled-on switch\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"color\",\n    type: mdx(TypesEnum, {\n      enum: Switch.colors,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"track color (from <code>Switch.colors</code>)\",\n    default: \"blue\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"disabled\",\n    type: \"boolean\",\n    desc: \"standard input disable flag\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"error\",\n    type: \"boolean\",\n    desc: \"error state flag\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"labelAlign\",\n    type: mdx(TypesEnum, {\n      enum: Switch.labelAligns,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"label position (from <code>Switch.labelAligns</code>)\",\n    default: \"right\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"size\",\n    type: mdx(TypesEnum, {\n      enum: Switch.sizes,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"label position (from <code>Switch.sizes</code>)\",\n    default: \"large\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Switch","route":"/components/switch"},"headings":[{"value":"Switch","depth":1},{"value":"Examples","depth":2},{"value":"Sizes & Colors","depth":3},{"value":"Label alignment","depth":3},{"value":"Disabled","depth":3},{"value":"Error state","depth":3},{"value":"Accessibility","depth":2},{"value":"Props","depth":2}]}},"pageContext":{"slug":"/components/switch/","version":"CHANGELOG"}},
    "staticQueryHashes": []}