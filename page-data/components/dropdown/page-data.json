{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/dropdown",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Dropdown\",\n  \"route\": \"/components/dropdown\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar A = makeShortcode(\"A\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar TypesEnum = makeShortcode(\"TypesEnum\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"dropdown\"\n  }, \"Dropdown\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"A form input for making a single selection from a list of items.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/PSDS-Web-Components?node-id=13432%3A513\",\n    install: \"npm install @pluralsight/ps-design-system-dropdown\",\n    import: \"import Dropdown from '@pluralsight/ps-design-system-dropdown'\",\n    packageName: \"dropdown\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"controlling-with-value\"\n  }, \"Controlling with value\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Dropdown from '@pluralsight/ps-design-system-dropdown'\\nimport Button from '@pluralsight/ps-design-system-button'\\n\\nfunction Example() {\\n  const options = [\\n    { value: 'beg', label: 'Beginner' },\\n    { value: 'int', label: 'Intermediate' },\\n    { value: 'adv', label: 'Advanced' }\\n  ]\\n  const [value, setValue] = React.useState(options[1].value)\\n  return (\\n    <div className=\\\"example-flex-column\\\">\\n      <Dropdown\\n        label=\\\"Level\\\"\\n        placeholder=\\\"Select\\\"\\n        onChange={(evt, value, label) => setValue(value)}\\n        menu={options.map(opt => (\\n          <Dropdown.Item key={opt.value} value={opt.value}>\\n            {opt.label}\\n          </Dropdown.Item>\\n        ))}\\n        value={value}\\n      />\\n      <div>Selected: {value}</div>\\n      <div>\\n        <Button\\n          appearance=\\\"secondary\\\"\\n          size=\\\"xSmall\\\"\\n          onClick={() => setValue('beg')}\\n        >\\n          Set Beginner\\n        </Button>\\n      </div>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"label\"\n  }, \"Label\"), mdx(\"p\", null, \"Primary identification of a dropdown comes through the label. Usage hints are given in the placeholder. Supporting text and error messaging is set in the subLabel.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Dropdown from '@pluralsight/ps-design-system-dropdown'\\n\\nconst Comp = () => (\\n  <div className=\\\"example-flex-column\\\">\\n    <Dropdown\\n      label=\\\"Level\\\"\\n      placeholder=\\\"Select level\\\"\\n      subLabel=\\\"Which audience is this course aimed at?\\\"\\n      menu={\\n        <>\\n          <Dropdown.Item>Beginner</Dropdown.Item>\\n          <Dropdown.Item>Intermediate</Dropdown.Item>\\n          <Dropdown.Item>Advanced</Dropdown.Item>\\n        </>\\n      }\\n    />\\n  </div>\\n)\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"appearance\"\n  }, \"Appearance\"), mdx(\"p\", null, \"When using the dark theme, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"subtle\"), \" appearance is available. (Switch theme to dark)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Dropdown from '@pluralsight/ps-design-system-dropdown'\\n\\nconst Comp = () => (\\n  <Dropdown\\n    appearance={Dropdown.appearances.subtle}\\n    label=\\\"Level\\\"\\n    placeholder=\\\"Select level\\\"\\n    menu={\\n      <React.Fragment>\\n        <Dropdown.Item>Beginner</Dropdown.Item>\\n        <Dropdown.Item>Intermediate</Dropdown.Item>\\n        <Dropdown.Item>Advanced</Dropdown.Item>\\n      </React.Fragment>\\n    }\\n  />\\n)\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"sizes\"\n  }, \"Sizes\"), mdx(\"p\", null, \"For table rows, step down to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"small\"), \" size.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Dropdown from '@pluralsight/ps-design-system-dropdown'\\n\\nconst Comp = () => (\\n  <div className=\\\"example-flex-column\\\">\\n    <Dropdown\\n      placeholder=\\\"Medium dropdown\\\"\\n      menu={\\n        <>\\n          <Dropdown.Item>Beginner</Dropdown.Item>\\n          <Dropdown.Item>Intermediate</Dropdown.Item>\\n          <Dropdown.Item>Advanced</Dropdown.Item>\\n        </>\\n      }\\n    />\\n    <Dropdown\\n      size={Dropdown.sizes.small}\\n      placeholder=\\\"Small dropdown\\\"\\n      menu={\\n        <>\\n          <Dropdown.Item>Beginner</Dropdown.Item>\\n          <Dropdown.Item>Intermediate</Dropdown.Item>\\n          <Dropdown.Item>Advanced</Dropdown.Item>\\n        </>\\n      }\\n    />\\n  </div>\\n)\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"disabled\"\n  }, \"Disabled\"), mdx(\"p\", null, \"Disabled dropdowns are unmodifiable, not interactive, and diminished visually.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Dropdown from '@pluralsight/ps-design-system-dropdown'\\n\\nconst Comp = () => (\\n  <Dropdown disabled label=\\\"Can't touch this\\\" placeholder=\\\"Just try it\\\" />\\n)\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"error\"\n  }, \"Error\"), mdx(\"p\", null, \"Error states are engaged with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"error\"), \" flag. Error-related messaging is sent to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"subLabel\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Dropdown from '@pluralsight/ps-design-system-dropdown'\\n\\nconst Comp = () => (\\n  <Dropdown\\n    error\\n    label=\\\"Level\\\"\\n    placeholder=\\\"Select level\\\"\\n    menu={\\n      <>\\n        <Dropdown.Item>Beginner</Dropdown.Item>\\n        <Dropdown.Item>Intermediate</Dropdown.Item>\\n        <Dropdown.Item>Advanced</Dropdown.Item>\\n      </>\\n    }\\n  />\\n)\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"customizing-with-icon\"\n  }, \"Customizing with icon\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Dropdown, { useDropdown } from '@pluralsight/ps-design-system-dropdown'\\nimport { CalendarIcon } from '@pluralsight/ps-design-system-icon'\\n\\ninterface DropdownWithIconProps extends HTMLAttributes<HTMLButtonElement> {\\n  icon: React.ReactNode\\n  menu: React.ReactNode\\n}\\n\\nconst DropdownWithIcon = React.forwardRef<\\n  HTMLButtonElement,\\n  DropdownWithIconProps\\n>(({ icon, ...props }, forwardedRef) => {\\n  const allProps = useDropdown(props, forwardedRef)\\n  return (\\n    <Dropdown.Layout\\n      {...allProps.layout}\\n      label={<Dropdown.Label {...allProps.label} />}\\n      menu={\\n        <DropdownContext.Provider {...allProps.value}>\\n          <Dropdown.Menu {...allProps.menu} />\\n        </DropdownContext.Provider>\\n      }\\n      subLabel={<Dropdown.SubLabel {...allProps.subLabel} />}\\n      button={\\n        <Dropdown.Button {...allProps.button}>\\n          {icon}\\n          <div style={{ height: '100%', position: 'relative', flex: 1 }}>\\n            <Dropdown.Selected {...allProps.selected} />\\n          </div>\\n        </Dropdown.Button>\\n      }\\n    />\\n  )\\n})\\nfunction Example() {\\n  return (\\n    <DropdownWithIcon\\n      icon={<CalendarIcon style={{ marginRight: 8 }} />}\\n      menu={\\n        <>\\n          <Dropdown.Item>Trailing 14 Days</Dropdown.Item>\\n          <Dropdown.Item>Last Month</Dropdown.Item>\\n          <Dropdown.Item>Trailing 30 Days</Dropdown.Item>\\n          <Dropdown.Item>Last Quater</Dropdown.Item>\\n          <Dropdown.Item>Trailing 90 Days</Dropdown.Item>\\n          <Dropdown.Item>Custom</Dropdown.Item>\\n        </>\\n      }\\n    />\\n  )\\n}\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"customizing-with-dynamic-icon\"\n  }, \"Customizing with dynamic icon\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React, { HTMLAttributes } from 'react'\\nimport Dropdown, { useDropdown } from '@pluralsight/ps-design-system-dropdown'\\nimport { CalendarIcon } from '@pluralsight/ps-design-system-icon'\\n\\ninterface DropdownWithIconProps\\n  extends Omit<HTMLAttributes<HTMLButtonElement>, 'onChange'> {\\n  icon: React.ReactNode\\n  onChange?: (e: React.MouseEvent, value: React.ReactText) => void\\n  menu: React.ReactNode\\n}\\n\\nconst DropdownWithIcon = React.forwardRef<\\n  HTMLButtonElement,\\n  DropdownWithIconProps\\n>(({ icon, ...props }, forwardedRef) => {\\n  const allProps = useDropdown(props, forwardedRef)\\n  return (\\n    <Dropdown.Layout\\n      {...allProps.layout}\\n      label={<Dropdown.Label {...allProps.label} />}\\n      menu={\\n        <DropdownContext.Provider {...allProps.value}>\\n          <Dropdown.Menu {...allProps.menu} />\\n        </DropdownContext.Provider>\\n      }\\n      subLabel={<Dropdown.SubLabel {...allProps.subLabel} />}\\n      button={\\n        <Dropdown.Button {...allProps.button}>\\n          {icon}\\n          <div style={{ height: '100%', position: 'relative', flex: 1 }}>\\n            <Dropdown.Selected {...allProps.selected} />\\n          </div>\\n        </Dropdown.Button>\\n      }\\n    />\\n  )\\n})\\nfunction Example() {\\n  const [selected, setSelected] = React.useState<null | string>()\\n  const values = {\\n    channel: {\\n      value: 'channel',\\n      icon: <ChannelIcon style={{ marginRight: 8 }} />,\\n      label: 'Channel'\\n    },\\n    analytics: {\\n      value: 'analytics',\\n      icon: <AnalyticsIcon style={{ marginRight: 8 }} />,\\n      label: 'Analytics'\\n    },\\n    authorKit: {\\n      value: 'authorKit',\\n      icon: <AuthorKitIcon style={{ marginRight: 8 }} />,\\n      label: 'Author Kit'\\n    },\\n    labs: {\\n      value: 'labs',\\n      icon: <LabsIcon style={{ marginRight: 8 }} />,\\n      label: 'Labs'\\n    }\\n  }\\n  const handleChange = (e: React.MouseEvent, value: React.ReactText) => {\\n    setSelected(value)\\n  }\\n  const icon = values[selected] ? (\\n    values[selected].icon\\n  ) : (\\n    <div style={{ width: 24, height: 24, marginRight: 8 }} />\\n  )\\n  return (\\n    <DropdownWithIcon\\n      icon={icon}\\n      onChange={handleChange}\\n      menu={Object.values(values).map(({ value, icon, label }) => (\\n        <Dropdown.Item value={value} key={value} icon={icon}>\\n          {label}\\n        </Dropdown.Item>\\n      ))}\\n    />\\n  )\\n}\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"menu-scrolling\"\n  }, \"Menu scrolling\"), mdx(\"p\", null, \"The dropdown component menu has a max height of 400px and will scroll for content needing more vertical space.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Dropdown from '@pluralsight/ps-design-system-dropdown'\\n\\nconst Example = () => (\\n  <Dropdown\\n    label=\\\"Max height example\\\"\\n    menu={\\n      <>\\n        <Dropdown.Item>One item</Dropdown.Item>\\n        <Dropdown.Item>Two item</Dropdown.Item>\\n        <Dropdown.Item>Three item</Dropdown.Item>\\n        <Dropdown.Item>Four item</Dropdown.Item>\\n        <Dropdown.Item>Five item</Dropdown.Item>\\n        <Dropdown.Item>Six item</Dropdown.Item>\\n        <Dropdown.Item>Seven item</Dropdown.Item>\\n        <Dropdown.Item>Eight item</Dropdown.Item>\\n        <Dropdown.Item>Nine item</Dropdown.Item>\\n        <Dropdown.Item>Ten item</Dropdown.Item>\\n        <Dropdown.Item>Eleven item</Dropdown.Item>\\n        <Dropdown.Item>Twelve item</Dropdown.Item>\\n        <Dropdown.Item>Thirteen item</Dropdown.Item>\\n        <Dropdown.Item>Fourteen item</Dropdown.Item>\\n        <Dropdown.Item>Fifteen item</Dropdown.Item>\\n      </>\\n    }\\n  />\\n)\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" No manual audit\", mdx(\"p\", null, \"WAI-ARIA Patterns: \", mdx(A, {\n    href: \"https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\",\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    mdxType: \"A\"\n  }, \"Listbox\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"dropdown-1\"\n  }, \"Dropdown\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"appearance\",\n    type: mdx(TypesEnum, {\n      enum: Dropdown.appearances,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"visual style (from Dropdown.appearances)\",\n    default: \"default\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"disabled\",\n    type: \"boolean\",\n    desc: \"standard input disabled flag\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"error\",\n    type: \"boolean\",\n    desc: \"error state flag\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"label\",\n    type: \"string\",\n    desc: \"identifying string for dropdown\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"menu\",\n    type: \"Dropdown.Item(s)\",\n    desc: \"menu items for dropdown\",\n    default: \"<span></span>\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"onChange\",\n    type: \"(Event, value, label) => void\",\n    desc: \"triggered when an item selected\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"placeholder\",\n    type: \"string\",\n    desc: \"in-field usage hint\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"size\",\n    type: mdx(TypesEnum, {\n      enum: Dropdown.sizes,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"sets dropdown size (from Dropdown.sizes)\",\n    default: \"medium\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"subLabel\",\n    type: \"string\",\n    desc: \"supporting text or error messaging\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"uniqueId\",\n    type: \"(prefix: string) => string\",\n    desc: \"override internal id generation for test stability\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"dropdownitem\"\n  }, \"Dropdown.Item\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"disabled\",\n    type: \"boolean\",\n    desc: \"visually disabled, non-interactive\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"icon\",\n    type: \"*Icon\",\n    desc: \"An Icon component\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"onClick\",\n    type: \"(Event, value) => void\",\n    desc: \"override default onClick behavior passed to Dropdown.props.onChange\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"value\",\n    type: \"string | number\",\n    desc: \"value sent to ActionMenu#onChange\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Dropdown","route":"/components/dropdown"},"headings":[{"value":"Dropdown","depth":1},{"value":"Examples","depth":2},{"value":"Controlling with value","depth":3},{"value":"Label","depth":3},{"value":"Appearance","depth":3},{"value":"Sizes","depth":3},{"value":"Disabled","depth":3},{"value":"Error","depth":3},{"value":"Customizing with icon","depth":3},{"value":"Customizing with dynamic icon","depth":3},{"value":"Menu scrolling","depth":3},{"value":"Accessibility","depth":2},{"value":"Props","depth":2},{"value":"Dropdown","depth":3},{"value":"Dropdown.Item","depth":3}]}},"pageContext":{"slug":"/components/dropdown/","version":"CHANGELOG"}},
    "staticQueryHashes": []}