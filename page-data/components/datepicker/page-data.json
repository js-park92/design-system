{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/datepicker",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Datepicker\",\n  \"route\": \"/components/datepicker\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Intro = makeShortcode(\"Intro\");\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Usage = makeShortcode(\"Usage\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"date-picker\"\n  }, \"Date picker\"), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"DatePicker allows us to build date picker components of varying patterns using the `useDayzed` hook from \", mdx(\"a\", {\n    href: \"https://github.com/deseretdigital/dayzed\",\n    target: \"_blank\"\n  }, \"dayzed\"), \". These components allow us to make single date, multi-date or date range selectors.\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(\"h2\", {\n    \"id\": \"components\"\n  }, \"Components\"), mdx(Usage, {\n    install: \"npm install @pluralsight/ps-design-system-datepicker\",\n    import: \"import { DatePicker, /* ... */ } from '@pluralsight/ps-design-system-datepicker'\",\n    packageName: \"datepicker\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"datepicker\"\n  }, \"DatePicker\"), mdx(\"p\", null, \"This is a very similar descendant of the prevous DatePicker. It is a convenience wrapper around the common case. The API is familiar but has some differences. It is a controlled component with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \". It takes an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onSelect\"), \" prop that returns a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/deseretdigital/dayzed/blob/ebf1de1ceb9695738895f8b08bf45ad9a894fe00/typings/dayzed.d.ts#L9-L16\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"dayzed.DateObj\")), \" each time a valid date is selected.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport { DatePicker } from '@pluralsight/ps-design-system-datepicker'\\nimport React from 'react'\\n\\nconst Example = () => {\\n  const [date, setDate] = React.useState(new Date(1999, 11, 31))\\n  return (\\n    <div>\\n      <div>\\n        <Button onClick={() => setDate(new Date(2000, 0, 1))}>Go Y2K!</Button>\\n      </div>\\n      <div>\\n        <DatePicker\\n          label=\\\"Party time\\\"\\n          onSelect={(evt, dateObj) => (setDate(dateObj.date))}\\n          value={date}\\n        />\\n      </div>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(TypesTable, {\n    defaultColumn: false,\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"onSelect\",\n    type: \"(evt: SyntheticEvent, selectedDate: DateObj) => void\",\n    desc: \"callback that return DateObj\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"value\",\n    type: \"Date\",\n    desc: \"date to set picker to\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"calendar\"\n  }, \"Calendar\"), mdx(\"p\", null, \"Calendar is a top-level component for creating a calendar. When used in concert with the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/deseretdigital/dayzed\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"useDayzed\")), \" hook, it takes all returned props except \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getDateProps\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"noRender\",\n    \"noRender\": true\n  }, \"import { useDayzed } from 'dayzed'\\nimport { Calendar } from '@pluralsight/ps-design-system-datepicker'\\n\\nreturn (\\n  <Calendar {...useDayzed({\\n  /** basic config **/\\n  })}>\\n    /** renderProp of CalendarDay or custom CalendarDay **/\\n  </Calendar>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"calendarday\"\n  }, \"CalendarDay\"), mdx(\"p\", null, \"CalendarDay is to be used as a renderProp to pass through date props to each Calendar grid button\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"noRender\",\n    \"noRender\": true\n  }, \"import { useDayzed } from 'dayzed'\\nimport { CalendarDayProps,  CalendarDay, Calendar} from '@pluralsight/ps-design-system-datepicker'\\n\\nconst { getDateProps, ...dayzedData } = useDayzed({\\n  /** See dayzed documentation section of props**/\\n})\\n\\nreturn (\\n// <Calendar {...useDayzed({\\n  /** basic config **/\\n   })}>\\n    {(props: CalendarDayProps) => <CalendarDay {...props} />}\\n// </Calendar>\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"functions\"\n  }, \"Functions\"), mdx(\"h3\", {\n    \"id\": \"useisinrange\"\n  }, \"useIsInRange\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useIsInRange\"), \" hook is used for every date picker.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Parameters\"), \": an object\"), mdx(TypesTable, {\n    defaultColumn: false,\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"selected\",\n    required: true,\n    type: \"Date[]\",\n    desc: \"selected date on the picker\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"p\", null, \"The hook will return an object with these properties:\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Returns:\"), \" an object\"), mdx(TypesTable, {\n    defaultColumn: false,\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"onMouseEnter\",\n    required: true,\n    type: \"React.MouseEvent => void\",\n    desc: \"event handler to attach to the <button />\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"onMouseLeave\",\n    required: true,\n    type: \"React.MouseEvent => void\",\n    desc: \"event handler to attach to Calendar\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"isInRange\",\n    required: true,\n    type: \"string\",\n    desc: \"className(s) to merge into `button` className\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"noRender\",\n    \"noRender\": true\n  }, \"import { useDayzed } from 'dayzed'\\nimport {\\n  Calendar,\\n  CalendarDay,\\n  CalendarDayProps,\\n  useIsInRange\\n} from '@pluralsight/ps-design-system-datepicker'\\n\\nconst [selected, setSelected] = React.useState<Date[] | undefined>()\\n\\nconst { getDateProps, ...dayzedData } = useDayzed({\\n  /** config props**/\\n})\\n\\nconst { onMouseLeave, onMouseEnter, isInRange } = useIsInRange(selected)\\n\\nreturn (\\n  <Calendar {...dayzedData} onMouseLeave={onMouseLeave}>\\n    {(props: CalendarDayProps) => {\\n      const { dateObj } = props\\n      return (\\n        <CalendarDay\\n          {...props}\\n          className={isInRange(dateObj.date)}\\n          onMouseEnter={() => onMouseEnter(dateObj.date)}\\n        />\\n      )\\n    }}\\n  </Calendar>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"onrangedateselected\"\n  }, \"onRangeDateSelected\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onRangeDateSelected\"), \" hook is a helper which returns a function to pass to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useDayzed\"), \" hook in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onDateSelected\"), \" parameter.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Parameters\"), \": an object\"), mdx(TypesTable, {\n    defaultColumn: false,\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"onSelect\",\n    type: \"(event: React.SyntheticEvent, selectedDate: dazyed.DateObj): void\",\n    desc: \"callback for side effects when a date is selected\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"selected\",\n    required: true,\n    type: \"Date[]\",\n    desc: \"the selected date\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"setSelected\",\n    required: true,\n    type: \"React.Dispatch<React.SetStateAction<Date[]>>\",\n    desc: \"the set state action for the selected date\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"p\", null, \"Pass the return value directly to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onDateSelect\"), \" as seen in the example below.\"), mdx(\"p\", null, \"Please refer to the dayzed typings for information on the shape of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/deseretdigital/dayzed/blob/ebf1de1ceb9695738895f8b08bf45ad9a894fe00/typings/dayzed.d.ts#L9-L16\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"dayzed.DateObj\"), \" interface\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"noRender\",\n    \"noRender\": true\n  }, \"import { useDayzed, DateObj } from 'dayzed'\\nimport {\\n  Calendar,\\n  CalendarDay,\\n  CalendarDayProps,\\n  useIsInRange,\\n  onRangeDateSelected\\n} from '@pluralsight/ps-design-system-datepicker'\\n\\nconst [selected, setSelected] = React.useState<Date[] | undefined>()\\n\\nconst { onMouseLeave, onMouseEnter, isInRange } = useIsInRange(selected)\\n\\nreturn (\\n  <Calendar\\n    {... useDayzed({\\n      selected,\\n      onDateSelected: onRangeDateSelected({\\n        selected,\\n        setSelected,\\n        // onSelect (optional)\\n      }),\\n      // ...rest of config\\n    })}\\n    onMouseLeave={onMouseLeave}\\n  >\\n    {(props: CalendarDayProps) => {\\n      const { dateObj } = props\\n      return (\\n        <CalendarDay\\n          {...props}\\n          className={isInRange(dateObj.date)}\\n          onMouseEnter={() => onMouseEnter(dateObj.date)}\\n        />\\n      )\\n    }}\\n  </Calendar>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"onmultidateselected\"\n  }, \"onMultiDateSelected\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onMultiDateSelected\"), \" hook is similar to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onRangeDateSelected\"), \" hook, except that it is used for date pickers where discrete dates are being selected.  It is a helper which returns a function to pass to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useDayzed\"), \" hook in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onDateSelected\"), \" parameter.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Parameters\"), \": an object\"), mdx(TypesTable, {\n    defaultColumn: false,\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"onSelect\",\n    type: \"(event: React.SyntheticEvent, selectedDate: dazyed.DateObj): void\",\n    desc: \"callback for side effects when a date is selected\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"selected\",\n    required: true,\n    type: \"Date[]\",\n    desc: \"the selected date\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"setSelected\",\n    required: true,\n    type: \"React.Dispatch<React.SetStateAction<Date[]>>\",\n    desc: \"the set state action for the selected date\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"p\", null, \"Pass the return value directly to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onDateSelected\"), \" as seen in the example below.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"noRender\",\n    \"noRender\": true\n  }, \"import { useDayzed, DateObj } from 'dayzed'\\nimport {\\n  Calendar,\\n  CalendarDay,\\n  CalendarDayProps,\\n  onMultiDateSelected\\n} from '@pluralsight/ps-design-system-datepicker'\\n\\nconst [selected, setSelected] = React.useState<Date[]>([])\\n\\nreturn (\\n  <Calendar {...useDayzed({\\n    selected,\\n    onDateSelected: onMultiDateSelected({\\n      selected,\\n      setSelected,\\n      // onSelect (optional)\\n    })\\n    // ...rest of config\\n  })}>\\n     {(props: CalendarDayProps) => <CalendarDay {...props} />}\\n  </Calendar>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"handledateselectchange\"\n  }, \"handleDateSelectChange\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handleDateSelectChange\"), \" is a convenience hook for creating the React state management that supports bi-directional updates between a date picker internal state and any other UI that displays the selected date, such as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TextInput\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Parameters:\"), \" an object\"), mdx(TypesTable, {\n    defaultColumn: false,\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"dateFormat\",\n    optional: true,\n    type: \"string\",\n    desc: \"a <a href='https://date-fns.org/v2.16.1/docs/format'>date-fns compatible format string</a>\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"selected\",\n    required: true,\n    type: \"Date\",\n    desc: \"the selected date\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"setSelected\",\n    required: true,\n    type: \"React.Dispatch<React.SetStateAction<Date>>\",\n    desc: \"the set state action for the selected date\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"value\",\n    required: true,\n    type: \"string\",\n    desc: \"formatted date value as string\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Returns:\"), \" an array\"), mdx(TypesTable, {\n    defaultColumn: false,\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"[0]\",\n    required: true,\n    type: \"string\",\n    desc: \"the selected date as a string\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"[1]\",\n    required: true,\n    type: \"React.ChangeEventHandler<HTMLInputElement>\",\n    desc: \"the handle change callback to be placed on a text input\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"noRender\",\n    \"noRender\": true\n  }, \"import { useDayzed, DateObj } from 'dayzed'\\nimport { ValueOf } from '@pluralsight/ps-design-system-util'\\nimport TextInput from '@pluralsight/ps-design-system-textinput'\\nimport {Calendar, CalendarDay, CalendarDayProps,} from '@pluralsight/ps-design-system-datepicker'\\nimport React from 'react'\\n\\nconst [selected, setSelected] = React.useState<Date | undefined>()\\n\\n  const [value, setValue] = React.useState<string>('')\\n\\n  const dateFormat = 'MM/dd/yyyy'\\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = evt => {\\n    const nextValue = evt.target.value\\n    setValue(nextValue)\\n    handleDateSelectChange({\\n      selected,\\n      setSelected,\\n      value: nextValue,\\n      dateFormat\\n    })\\n  }\\n\\nreturn (\\n  <>\\n    <TextInput\\n      ref={inputRef as React.RefObject<HTMLInputElement>}\\n      onChange={handleChange}\\n      value={value}\\n    />\\n    <Calendar\\n      {...useDayzed({\\n        // ... rest of config\\n      })}\\n    >\\n      {(props: CalendarDayProps) => <CalendarDay {...props} />}\\n    </Calendar>\\n  </>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"handlerangeselectchange\"\n  }, \"handleRangeSelectChange\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handleRangeSelectChange\"), \" is like the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handleDateSelectChange\"), \" hook except it's designed to work with two inputs representing the start and end of a date range.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Parameters:\"), \" an object\"), mdx(TypesTable, {\n    defaultColumn: false,\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"dateFormat\",\n    optional: true,\n    type: \"string\",\n    desc: \"a <a href='https://date-fns.org/v2.16.1/docs/format'>date-fns compatible format string</a>\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"selected\",\n    required: true,\n    type: \"Date\",\n    desc: \"the selected date\",\n    mdxType: \"TypesProp\"\n  }), \"/>\", mdx(TypesProp, {\n    name: \"setSelected\",\n    required: true,\n    type: \"React.Dispatch<React.SetStateAction<Date>>\",\n    desc: \"the set state action for the selected date\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"start\",\n    required: true,\n    type: \"boolean\",\n    desc: \"distinguishes the first date in the range from the end date\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"value\",\n    required: true,\n    type: \"Date[]\",\n    desc: \"Array of formatted date strings\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Returns:\"), \" an array\"), mdx(TypesTable, {\n    defaultColumn: false,\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"[0]\",\n    required: true,\n    type: \"string\",\n    desc: \"the selected date as a string\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"[1]\",\n    required: true,\n    type: \"React.ChangeEventHandler<HTMLInputElement>\",\n    desc: \"the handle change callback to be placed on a text input\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"p\", null, \"Two calls to the hook as usual, with one being used for an input for the start date and another for the input of the end date.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"noRender\",\n    \"noRender\": true\n  }, \"import { useDayzed, DateObj } from 'dayzed'\\nimport { ValueOf } from '@pluralsight/ps-design-system-util'\\nimport TextInput from '@pluralsight/ps-design-system-textinput'\\nimport {\\n  Calendar,\\n  CalendarDay,\\n  CalendarDayProps,\\n  useIsInRange,\\n  onRangeDateSelected,\\n  handleRangeSelectChange\\n} from '@pluralsight/ps-design-system-datepicker'\\nconst [selected, setSelected] = React.useState<Date[] | undefined>()\\n  const [startValue, setStartValue] = React.useState<string>('')\\n  const [endValue, setEndValue] = React.useState<string>('')\\n  const { onMouseLeave, onMouseEnter, isInRange } = useIsInRange(selected)\\n  const dateFormat = 'MM/dd/yyyy'\\n  const onStartChange: React.ChangeEventHandler<HTMLInputElement> = evt => {\\n    const nextValue = evt.target.value\\n    setStartValue(nextValue)\\n    handleRangeSelectChange({\\n      dateFormat,\\n      selected,\\n      setSelected,\\n      start: true,\\n      value: nextValue\\n    })\\n  }\\n\\n  const onEndChange: React.ChangeEventHandler<HTMLInputElement> = evt => {\\n    const nextValue = evt.target.value\\n    setEndValue(nextValue)\\n    handleRangeSelectChange({\\n      dateFormat,\\n      selected,\\n      setSelected,\\n      start: false,\\n      value: nextValue\\n    })\\n  }\\n\\nreturn (\\n  <>\\n    <TextInput onChange={onStartChange} value={startValue} />\\n    <TextInput onChange={onEndChange} value={endValue} />\\n    <br />\\n    <Calendar\\n      {... useDayzed({\\n        // ...rest of config\\n      })}\\n      onMouseLeave={onMouseLeave}\\n    >\\n      {(props: CalendarDayProps) => {\\n        const { dateObj } = props\\n        return (\\n          <CalendarDay\\n            {...props}\\n            className={isInRange(dateObj.date)}\\n            onMouseEnter={() => onMouseEnter(dateObj.date)}\\n          />\\n        )\\n      }}\\n    </Calendar>\\n  </>\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"single-date\"\n  }, \"Single date\"), mdx(\"p\", null, \"For this first example, here are steps that to be considered when determining how to configure a date picker. Most other examples don't have these steps but should be similar. Learn this example well first in order to understand the rest more easily.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a new state object & setter \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"selected: Date\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setSelected: React.Dispatch<React.SetStateAction<Date | undefined>>\"), \" then optionally set the intial date.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onDateSelected\"), \" callback that will update the selected state when a calendar date is clicked along with any side effects desired.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Pass \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"selected\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setSelected\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onDateSelected\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useDayzed\"), \" hook from the dayzed library along with any other \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/deseretdigital/dayzed#props\"\n  }, \"dayzed props\"), \" desired.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { useDayzed, DateObj } from 'dayzed'\\nimport { format } from 'date-fns'\\nimport { colorsBackgroundLight, type, colorsTextIcon, colorsBackgroundDark, layout } from '@pluralsight/ps-design-system-core'\\nimport {Calendar, CalendarDay, CalendarDayProps} from '@pluralsight/ps-design-system-datepicker'\\nimport React from 'react'\\n\\nfunction Example() {\\n const [selected, setSelected] = React.useState<Date | undefined>(\\n    new Date('05/13/2020')\\n  )\\n  const [value, setValue] = React.useState<string | undefined>('05/13/2020')\\n  const onDateSelected = (dateObj: DateObj, evt: React.SyntheticEvent) => {\\n    setSelected(dateObj.date)\\n    setValue(format(dateObj.date, 'MM/dd/yyyy'))\\n  }\\n    return (\\n      <Calendar {...useDayzed({\\n        date: selected || new Date('05/30/2020'),\\n        selected,\\n        onDateSelected\\n      })}>\\n         {(props: CalendarDayProps) => <CalendarDay {...props} />}\\n      </Calendar>\\n    )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"single-date-controlled-by-external-state\"\n  }, \"Single date controlled by external state\"), mdx(\"p\", null, \"Calendar updates can also be triggered by setting the shared state object selected via an onClick handler passed to a button.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { useDayzed, DateObj } from 'dayzed'\\nimport { format } from 'date-fns'\\nimport { colorsBackgroundLight, type, colorsTextIcon, colorsBackgroundDark, layout } from '@pluralsight/ps-design-system-core'\\nimport Button from '@pluralsight/ps-design-system-button'\\nimport {Calendar, CalendarDay, CalendarDayProps} from '@pluralsight/ps-design-system-datepicker'\\nimport React from 'react'\\n\\nconst Example = () => {\\n  const [selected, setSelected] = React.useState<Date | undefined>()\\n    const onDateSelected = (dateObj: DateObj, evt: React.SyntheticEvent) => {\\n      setSelected(dateObj.date)\\n    }\\n\\n    const handleClick = () => {\\n      setSelected(new Date('05/13/2020'))\\n    }\\n    return (\\n      <>\\n        <Button onClick={handleClick}>5/13/2020</Button>\\n        <br />\\n        <Calendar {...useDayzed({\\n          date: selected || new Date('05/30/2020'),\\n          selected,\\n          onDateSelected\\n        })}>\\n           {(props: CalendarDayProps) => <CalendarDay {...props} />}\\n        </Calendar>\\n      </>\\n    )\\n}\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"range\"\n  }, \"Range\"), mdx(\"p\", null, \"Range selection setup is a little different from date selection cases, so here's a short tutorial to help learn the concepts.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a new state object & setter \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"selected: Date[]\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setSelected: React.Dispatch<React.SetStateAction<Date[] | undefined>>\"), \" then optionally set the intial date.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Import an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onRangeDateSelected\"), \" callback that will update the selected state when a calendar date is clicked along\\nwith any side effects desired using the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onSelect\"), \" argument.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Pass \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"selected\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setSelected\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onRangeDateSelected\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useDayzed\"), \"\\nhook from the dayzed library along with any other \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/deseretdigital/dayzed#props\"\n  }, \"dayzed props\"), \" desired.\\npattern to apply styles and handlers to buttons that represent individual dates in a month.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Import and setup \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useIsInRange\"), \" hook and pass the return to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Calendar\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CalendarDay\"), \" as shown below\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { useDayzed, DateObj } from 'dayzed'\\nimport { format } from 'date-fns'\\nimport { colorsBackgroundLight, type, colorsTextIcon, colorsBackgroundDark, layout } from '@pluralsight/ps-design-system-core'\\nimport {Calendar, CalendarDay, CalendarDayProps, useIsInRange, onRangeDateSelected} from '@pluralsight/ps-design-system-datepicker'\\nimport React from 'react'\\n\\nconst Example = () => {\\n  const [selected, setSelected] = React.useState<Date[] | undefined>()\\n  const { onMouseLeave, onMouseEnter, isInRange } = useIsInRange(selected)\\n  return (\\n    <Calendar\\n      {...useDayzed({\\n        selected,\\n        onDateSelected: onRangeDateSelected({\\n          selected,\\n          setSelected,\\n          // onSelect: (event: React.SyntheticEvent<Element, Event>, selectedDate: DateObj): void\\n        }),\\n        date: new Date('05/30/2020')\\n      })}\\n      onMouseLeave={onMouseLeave}\\n    >\\n      {(props: CalendarDayProps) => {\\n        const { dateObj } = props\\n        return (\\n          <CalendarDay\\n            {...props}\\n            className={isInRange(dateObj.date)}\\n            onMouseEnter={() => onMouseEnter(dateObj.date)}\\n          />\\n        )\\n      }}\\n    </Calendar>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"range-controlled-by-external-state\"\n  }, \"Range controlled by external state\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { useDayzed, DateObj } from 'dayzed'\\nimport { format } from 'date-fns'\\nimport { colorsBackgroundLight, type, colorsTextIcon, colorsBackgroundDark, layout } from '@pluralsight/ps-design-system-core'\\nimport Button from '@pluralsight/ps-design-system-button'\\nimport {Calendar, CalendarDay, CalendarDayProps, useIsInRange, onRangeDateSelected} from '@pluralsight/ps-design-system-datepicker'\\nimport React from 'react'\\n\\n  const Example = () => {\\n    const [selected, setSelected] = React.useState<Date[]>([])\\n    const { onMouseLeave, onMouseEnter, isInRange } = useIsInRange(selected)\\n\\n    const handleClick = () => {\\n      setSelected([new Date('05/13/2020'), new Date('05/30/2020')])\\n    }\\n    return (\\n      <>\\n        <Button onClick={handleClick}>5/13/2020 - 05/30/2020</Button>\\n        <br/>\\n        <Calendar\\n          {...useDayzed({\\n            monthsToDisplay: 2,\\n            selected,\\n            onDateSelected: onRangeDateSelected({\\n              selected,\\n              setSelected,\\n              // onSelect: (event: React.SyntheticEvent<Element, Event>, selectedDate: DateObj): void\\n            }),\\n            date: new Date('05/30/2020')\\n          })}\\n          onMouseLeave={onMouseLeave}\\n        >\\n          {(props: CalendarDayProps) => {\\n            const { dateObj } = props\\n            return (\\n              <CalendarDay\\n                {...props}\\n                className={isInRange(dateObj.date)}\\n                onMouseEnter={() => onMouseEnter(dateObj.date)}\\n              />\\n            )\\n          }}\\n        </Calendar>\\n      </>\\n    )\\n  }\\n  export default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"range-with-bi-directional-updates\"\n  }, \"Range with bi-directional updates\"), mdx(\"p\", null, \"External \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TextInput\"), \" with range selection can be used to update the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Calendar\"), \" and vice versa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { useDayzed, DateObj } from 'dayzed'\\nimport { format } from 'date-fns'\\nimport { colorsBackgroundLight, type, colorsTextIcon, colorsBackgroundDark, layout } from '@pluralsight/ps-design-system-core'\\nimport TextInput from '@pluralsight/ps-design-system-textinput'\\nimport {Calendar, CalendarDay, CalendarDayProps, useIsInRange, onRangeDateSelected, handleRangeSelectChange} from '@pluralsight/ps-design-system-datepicker'\\nimport React from 'react'\\n\\n  const Example = () => {\\n    const [selected, setSelected] = React.useState<Date[] | undefined>()\\n    const [startValue, setStartValue] = React.useState<string>('')\\n    const [endValue, setEndValue] = React.useState<string>('')\\n    const { onMouseLeave, onMouseEnter, isInRange } = useIsInRange(selected)\\n    const dateFormat = 'MM/dd/yyyy'\\n    const onStartChange: React.ChangeEventHandler<HTMLInputElement> = evt => {\\n      const nextValue = evt.target.value\\n      setStartValue(nextValue)\\n      handleRangeSelectChange({\\n        dateFormat,\\n        selected,\\n        setSelected,\\n        start: true,\\n        value: nextValue\\n      })\\n    }\\n\\n    const onEndChange: React.ChangeEventHandler<HTMLInputElement> = evt => {\\n      const nextValue = evt.target.value\\n      setEndValue(nextValue)\\n      handleRangeSelectChange({\\n        dateFormat,\\n        selected,\\n        setSelected,\\n        start: false,\\n        value: nextValue\\n      })\\n    }\\n    return (\\n      <>\\n        <div>\\n        <TextInput onChange={onStartChange} value={startValue} placeholder='mm/dd/yyyy' />\\n        <TextInput onChange={onEndChange} value={endValue} placeholder='mm/dd/yyyy' />\\n        </div>\\n        <br />\\n        <Calendar\\n          {...useDayzed({\\n            monthsToDisplay: 2,\\n            selected,\\n            onDateSelected: onRangeDateSelected({\\n              selected,\\n              setSelected,\\n              // onSelect: (event: React.SyntheticEvent<Element, Event>, selectedDate: DateObj): void\\n            }),\\n            date: new Date('05/30/2020')\\n          })}\\n          onMouseLeave={onMouseLeave}\\n        >\\n          {(props: CalendarDayProps) => {\\n            const { dateObj } = props\\n            return (\\n              <CalendarDay\\n                {...props}\\n                className={isInRange(dateObj.date)}\\n                onMouseEnter={() => onMouseEnter(dateObj.date)}\\n              />\\n            )\\n          }}\\n        </Calendar>\\n      </>\\n    )\\n  }\\n  export default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"multi-date\"\n  }, \"Multi-date\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { useDayzed, DateObj } from 'dayzed'\\nimport { format } from 'date-fns'\\nimport { colorsBackgroundLight, type, colorsTextIcon, colorsBackgroundDark, layout } from '@pluralsight/ps-design-system-core'\\nimport {Calendar, CalendarDay, CalendarDayProps, onMultiDateSelected} from '@pluralsight/ps-design-system-datepicker'\\nimport React from 'react'\\n\\nconst Example = () => {\\n  const [selected, setSelected] = React.useState<Date[]>([])\\n  return (\\n    <Calendar {...useDayzed({\\n      selected,\\n      onDateSelected: onMultiDateSelected({\\n        selected,\\n        setSelected,\\n        // onSelect: (event: React.SyntheticEvent<Element, Event>, selectedDate: DateObj): void\\n      })\\n    })}>\\n      {(props: CalendarDayProps) => <CalendarDay {...props} />}\\n    </Calendar>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"migration-guide-from-v11x-and-before-to-v12x\"\n  }, \"Migration guide from v11.x and before to v12.x\"), mdx(\"h3\", {\n    \"id\": \"custom\"\n  }, \"Custom\"), mdx(\"p\", null, \"This guide is to migrate the old DatePicker to a single datepicker using the new components and functions using a custom setup. This is useful when one needs to grab ref or handle unique logic.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a new state object & setter \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"selected: Date\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setSelected: React.Dispatch<React.SetStateAction<Date | undefined>>\"), \" then optionally set the initial date.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a new state object & setter \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"open: boolean\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setOpen: React.Dispatch<React.SetStateAction<boolean>>\"), \" then set it to false.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onDateSelected\"), \" callback that will update the selected and open states when a calendar date is clicked along with any side effects desired.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Pass \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"selected\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setSelected\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onDateSelected\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useDayzed\"), \" hook from the dayzed library along with any other \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/deseretdigital/dayzed#props\"\n  }, \"dayzed props\"), \" desired.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a handleIconClick callback to be passed to CalendarIcon and will toggle the open state when clicked.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a new state object & setter \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"open: boolean\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setOpen: React.Dispatch<React.SetStateAction<boolean>>\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"handleChange\"), \" callback and pass it \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dateFormat\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"selected\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setSelected\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"value\"), \" to manipulate the calendar using an input as demonstrated below.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { useDayzed, DateObj } from 'dayzed'\\nimport { format } from 'date-fns'\\nimport { colorsBackgroundLight, type, colorsTextIcon, colorsBackgroundDark, layout } from '@pluralsight/ps-design-system-core'\\nimport { CalendarIcon } from '@pluralsight/ps-design-system-icon'\\nimport TextInput from '@pluralsight/ps-design-system-textinput'\\nimport {Calendar, CalendarDay, CalendarDayProps} from '@pluralsight/ps-design-system-datepicker'\\nimport React from 'react'\\n\\nconst Example = () => {\\n  const [selected, setSelected] = React.useState<Date | undefined>()\\n  const [open, setOpen] = React.useState<boolean>(false)\\n  const onDateSelected = (dateObj: DateObj, evt: React.SyntheticEvent) => {\\n    setSelected(dateObj.date)\\n    setOpen(false)\\n  }\\n  const { getDateProps, ...dayzedData } = useDayzed({\\n    date: selected || new Date('05/30/2020'),\\n    selected,\\n    onDateSelected\\n  })\\n  const handleIconClick: React.MouseEventHandler<HTMLDivElement> = evt => {\\n    setOpen(!open)\\n  }\\n  const [value, setValue] = React.useState<string>('')\\n\\n  const dateFormat = 'MM/dd/yyyy'\\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = evt => {\\n    const nextValue = evt.target.value\\n    setValue(nextValue)\\n    handleDateSelectChange({\\n      selected,\\n      setSelected,\\n      value: nextValue,\\n      dateFormat\\n    })\\n  }\\n  return (\\n    <div style={{ display: 'inline-block', position: 'relative'  }}>\\n      <TextInput\\n        onChange={handleChange}\\n        value={value}\\n        placeholder='mm/dd/yyyy'\\n        icon={\\n          <CalendarIcon\\n            onClick={handleIconClick}\\n            style={{ cursor: 'pointer' }}\\n          />\\n        }\\n      />\\n      <br />\\n      {open && (\\n        <Calendar\\n          {...dayzedData}\\n          style={{ position: 'absolute', zIndex: 1, marginTop: 4 }}\\n        >\\n          {(props: CalendarDayProps) => <CalendarDay {...props} />}\\n        </Calendar>\\n      )}\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Datepicker","route":"/components/datepicker"},"headings":[{"value":"Date picker","depth":1},{"value":"Components","depth":2},{"value":"DatePicker","depth":2},{"value":"Calendar","depth":3},{"value":"CalendarDay","depth":3},{"value":"Functions","depth":2},{"value":"useIsInRange","depth":3},{"value":"onRangeDateSelected","depth":3},{"value":"onMultiDateSelected","depth":3},{"value":"handleDateSelectChange","depth":3},{"value":"handleRangeSelectChange","depth":3},{"value":"Examples","depth":2},{"value":"Single date","depth":3},{"value":"Single date controlled by external state","depth":3},{"value":"Range","depth":3},{"value":"Range controlled by external state","depth":3},{"value":"Range with bi-directional updates","depth":3},{"value":"Multi-date","depth":3},{"value":"Migration guide from v11.x and before to v12.x","depth":2},{"value":"Custom","depth":3}]}},"pageContext":{"slug":"/components/datepicker/","version":"CHANGELOG"}},
    "staticQueryHashes": []}