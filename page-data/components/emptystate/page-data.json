{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/emptystate",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Empty state\",\n  \"route\": \"/components/emptystate\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Intro = makeShortcode(\"Intro\");\nvar A = makeShortcode(\"A\");\nvar Usage = makeShortcode(\"Usage\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar TypesEnum = makeShortcode(\"TypesEnum\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"empty-state\"\n  }, \"Empty state\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"Empty state provide explanation of an interface in absence of data. Empty states should orient the user, or communicate benefits of a feature. For general error messages, use the \", mdx(A, {\n    href: \"../errors\",\n    mdxType: \"A\"\n  }, \"error component\"), \" instead.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=10241%3A15\",\n    install: \"npm install @pluralsight/ps-design-system-emptystate\",\n    import: \"import EmptyState from '@pluralsight/ps-design-system-emptystate'\",\n    packageName: \"emptystate\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"p\", null, \"Default full page empty state\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport EmptyState from '@pluralsight/ps-design-system-emptystate'\\nimport Button from '@pluralsight/ps-design-system-button'\\n\\nconst Comp = () => (\\n  <EmptyState\\n    heading={\\n      <EmptyState.Heading>Alohamora wand elf parchment</EmptyState.Heading>\\n    }\\n    caption={\\n      <EmptyState.Caption>\\n        Hedwig Daily Prophet treacle tart full-moon Ollivanders You-Know-Who\\n        cursed. Fawkes maze raw-steak Voldemort Goblin Wars snitch Forbidden\\n        forest grindylows wool socks.\\n      </EmptyState.Caption>\\n    }\\n    illustration={\\n      <EmptyState.Illustration name={EmptyState.Illustration.names.magnify} />\\n    }\\n    actions={\\n      <EmptyState.Actions>\\n        <Button appearance={Button.appearances.stroke}>Do a Thing</Button>\\n      </EmptyState.Actions>\\n    }\\n  />\\n)\\n\\nexport default Comp\\n\")), mdx(\"p\", null, \"Layout scales from \\u2018large\\u2019 to \\u2018small\\u2019 based on container width. OR may be set as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"small\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport EmptyState from '@pluralsight/ps-design-system-emptystate'\\nimport Button from '@pluralsight/ps-design-system-button'\\n\\nconst Comp = () => (\\n  <EmptyState\\n    heading={\\n      <EmptyState.Heading>Alohamora wand elf parchment</EmptyState.Heading>\\n    }\\n    caption={\\n      <EmptyState.Caption>\\n        Hedwig Daily Prophet treacle tart full-moon Ollivanders You-Know-Who\\n        cursed. Fawkes maze raw-steak Voldemort Goblin Wars snitch Forbidden\\n        forest grindylows wool socks.\\n      </EmptyState.Caption>\\n    }\\n    illustration={\\n      <EmptyState.Illustration name={EmptyState.Illustration.names.magnify} />\\n    }\\n    actions={\\n      <EmptyState.Actions>\\n        <Button appearance={Button.appearances.stroke}>Do a Thing</Button>\\n      </EmptyState.Actions>\\n    }\\n    size={EmptyState.sizes.small}\\n  />\\n)\\n\\nexport default Comp\\n\")), mdx(\"h2\", {\n    \"id\": \"alternatives\"\n  }, \"Alternatives\"), mdx(\"p\", null, \"Consider alternatives to empty states. Instead of an empty experience, might there be starter, educational, or sample content to present to users to help them learn about the product and start using it right away?\"), mdx(\"h3\", {\n    \"id\": \"sample-content\"\n  }, \"Sample content\"), mdx(\"p\", null, \"If the screen is intended to be populated with content by a user, consider suggesting samples or recommendations to ease the effort of getting started.\"), mdx(\"h3\", {\n    \"id\": \"educational-content\"\n  }, \"Educational content\"), mdx(\"p\", null, \"A single graphic and message may not be enough to convey the purpose of a feature. Consider animated or video walkthroughs, but keep them brief and dismissible.\"), mdx(\"h3\", {\n    \"id\": \"best-match-suggestion\"\n  }, \"Best match suggestion\"), mdx(\"p\", null, \"If the absence of data occurs due to a user query such as a search, consider displaying a best match instead of nothing at all.\"), mdx(\"h2\", {\n    \"id\": \"copy\"\n  }, \"Copy\"), mdx(\"p\", null, \"Follow \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./patterns/voice-tone\"\n  }, \"voice and tone guidelines\"), \" when writing copy for empty states. Appropriate empty statement consist of a short declarative statement of what occurred, followed by a brief sentence giving more context if necessary. Provide a clear CTA button that\\u2019s no more than 2-3 words. Write clearly and conversationally like you would if you were talking to someone. Try to use an active voice\"), mdx(\"h2\", {\n    \"id\": \"illustration-set\"\n  }, \"Illustration set\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport EmptyState from '@pluralsight/ps-design-system-emptystate'\\nimport { layout } from '@pluralsight/ps-design-system-core'\\nimport ViewToggle from '@pluralsight/ps-design-system-viewtoggle'\\n\\nconst titleize = str =>\\n  str.toLowerCase().replace(/(?:^|\\\\s|-)\\\\S/g, x => x.toUpperCase())\\n\\nconst Comp = () => {\\n  const sizes = Object.values(EmptyState.sizes)\\n  const [activeSize, setActiveSize] = React.useState(sizes[1])\\n  const handleSizeChange = (evt, index) => setActiveSize(sizes[index])\\n  return (\\n    <div>\\n      <style jsx>{`\\n        .container {\\n          position: relative;\\n        }\\n        .toggle {\\n          position: absolute;\\n          top: ${layout.spacingMedium};\\n          left: ${layout.spacingMedium};\\n          z-index: 1;\\n        }\\n        .grid {\\n          display: grid;\\n          grid-template-columns: 1fr 1fr 1fr 1fr;\\n          grid-gap: 1em;\\n          padding-top: ${layout.spacingXXLarge};\\n          padding-bottom: ${layout.spacingMedium};\\n        }\\n      `}</style>\\n      <div className=\\\"container\\\">\\n        <div className=\\\"toggle\\\">\\n          <ViewToggle onSelect={handleSizeChange}>\\n            {sizes.map((id, index) => (\\n              <ViewToggle.Option active={id === activeSize} key={id}>\\n                {titleize(id)}\\n              </ViewToggle.Option>\\n            ))}\\n          </ViewToggle>\\n        </div>\\n        <div className=\\\"grid\\\">\\n          {Object.values(EmptyState.Illustration.names).map(name => (\\n            <EmptyState\\n              key={name}\\n              style={{ alignSelf: 'center', margin: '0', padding: '0' }}\\n              heading={\\n                <EmptyState.Heading style={{ fontSize: 14 }}>\\n                  {name}\\n                </EmptyState.Heading>\\n              }\\n              illustration={<EmptyState.Illustration name={name} />}\\n              size={activeSize}\\n            />\\n          ))}\\n        </div>\\n      </div>\\n    </div>\\n  )\\n}\\n\\nexport default Comp\\n\")), mdx(\"h2\", {\n    \"id\": \"custom-illustration\"\n  }, \"Custom illustration\"), mdx(\"p\", null, \"If no illustration in the standard set is found to be suitable, you may officially \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/pluralsight/design-system/issues/new/choose\"\n  }, \"aire your grievance\"), \", or... consider creating a custom illustration within the guidelines of the predefined style.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport EmptyState from '@pluralsight/ps-design-system-emptystate'\\n\\nconst Comp = () => (\\n  <EmptyState\\n    heading={\\n      <EmptyState.Heading>Alohamora wand elf parchment</EmptyState.Heading>\\n    }\\n    caption={\\n      <EmptyState.Caption>\\n        Hedwig Daily Prophet treacle tart full-moon Ollivanders You-Know-Who\\n        cursed. Fawkes maze raw-steak Voldemort Goblin Wars snitch Forbidden\\n        forest grindylows wool socks.\\n      </EmptyState.Caption>\\n    }\\n    illustration={\\n      <EmptyState.Illustration>\\n        <svg viewBox=\\\"0 0 128 128\\\" aria-hidden role=\\\"img\\\">\\n          <path\\n            fill=\\\"currentColor\\\"\\n            d=\\\"M44.99 43.356v-16.77L109.792 64 44.99 101.414v-16.77l-14.897 8.601v-58.49l14.897 8.601zm0 7.162l-8.695-5.02v37.003l8.695-5.02V50.518zm6.202 30.544v9.609L97.387 64 51.192 37.329v9.608l29.552 17.062-29.552 17.063zm0-7.162l17.147-9.901-17.147-9.9v19.8z\\\"\\n          />\\n        </svg>\\n      </EmptyState.Illustration>\\n    }\\n  />\\n)\\n\\nexport default Comp\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"emptystate\"\n  }, \"EmptyState\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"actions\",\n    type: \"EmptyState.Action\",\n    desc: \"\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"caption\",\n    type: \"EmptyState.Caption\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"heading\",\n    type: \"EmptyState.Heading\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"illustration\",\n    type: \"EmptyState.Illustration\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"size\",\n    type: mdx(TypesEnum, {\n      enum: EmptyState.sizes,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"disable resizing layout and set explicit size (from EmptyState.sizes)\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"emptystateheading\"\n  }, \"EmptyState.Heading\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"as\",\n    type: \"string\",\n    desc: \"heading tagName\",\n    default: \"h1\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"emptystateillustration\"\n  }, \"EmptyState.Illustration\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"name\",\n    type: mdx(TypesEnum, {\n      enum: EmptyState.Illustration.names,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"the illustration name (from Illustration.names)\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Empty state","route":"/components/emptystate"},"headings":[{"value":"Empty state","depth":1},{"value":"Examples","depth":2},{"value":"Alternatives","depth":2},{"value":"Sample content","depth":3},{"value":"Educational content","depth":3},{"value":"Best match suggestion","depth":3},{"value":"Copy","depth":2},{"value":"Illustration set","depth":2},{"value":"Custom illustration","depth":2},{"value":"Accessibility","depth":2},{"value":"Props","depth":2},{"value":"EmptyState","depth":3},{"value":"EmptyState.Heading","depth":3},{"value":"EmptyState.Illustration","depth":3}]}},"pageContext":{"slug":"/components/emptystate/","version":"CHANGELOG"}},
    "staticQueryHashes": []}