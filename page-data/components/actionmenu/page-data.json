{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/actionmenu",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Action menu\",\n  \"route\": \"/components/actionmenu\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar A = makeShortcode(\"A\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar TypesEnum = makeShortcode(\"TypesEnum\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"action-menu\"\n  }, \"Action menu\"), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"Used to perform an action, or to navigate from a list of options.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=10241%3A3\",\n    install: \"npm install @pluralsight/ps-design-system-actionmenu\",\n    import: \"import ActionMenu from '@pluralsight/ps-design-system-actionmenu'\",\n    packageName: \"actionmenu\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"icons\"\n  }, \"Icons\"), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ActionMenu.Icon\"), \" to add context and recognition to action menu items.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport ActionMenu from '@pluralsight/ps-design-system-actionmenu'\\nimport { PencilIcon, ChannelIcon, PlayIcon } from '@pluralsight/ps-design-system-icon'\\n\\nfunction Example() {\\n  return (\\n    <ActionMenu>\\n      <ActionMenu.Item>\\n        <ActionMenu.Icon marginLeft>\\n          <PencilIcon />\\n        </ActionMenu.Icon>\\n        One item\\n      </ActionMenu.Item>\\n      <ActionMenu.Item>\\n        <ActionMenu.Icon marginLeft>\\n          <ChannelIcon />\\n        </ActionMenu.Icon>\\n        Two item\\n      </ActionMenu.Item>\\n      <ActionMenu.Item>\\n        <ActionMenu.Icon marginLeft>\\n          <PlayIcon />\\n        </ActionMenu.Icon>\\n        Three item\\n      </ActionMenu.Item>\\n    </ActionMenu>\\n  )\\n}\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"ellipsis\"\n  }, \"Ellipsis\"), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ActionMenu.Ellipsis\"), \" to add ellipsis to action menu items.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport ActionMenu from '@pluralsight/ps-design-system-actionmenu'\\nfunction Example() {\\n  return (\\n    <ActionMenu>\\n      <ActionMenu.Item>\\n        <ActionMenu.Ellipsis>\\n          One item that has text that goes on forever and onward into the\\n          universes yet to be\\n        </ActionMenu.Ellipsis>\\n      </ActionMenu.Item>\\n      <ActionMenu.Item>\\n        <ActionMenu.Ellipsis>\\n          Another item that takes a long time to explain in the context of\\n          everything that is in a line.\\n        </ActionMenu.Ellipsis>\\n      </ActionMenu.Item>\\n    </ActionMenu>\\n  )\\n}\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"dividers\"\n  }, \"Dividers\"), mdx(\"p\", null, \"Dividers can be useful to separate similar actions. Dividers are applied\\nat the list level, below the assigned list item.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport ActionMenu from '@pluralsight/ps-design-system-actionmenu'\\nfunction Example() {\\n  return (\\n    <ActionMenu>\\n      <ActionMenu.Item>One item</ActionMenu.Item>\\n      <ActionMenu.Divider />\\n      <ActionMenu.Item>Two item</ActionMenu.Item>\\n      <ActionMenu.Item>Three item</ActionMenu.Item>\\n      <ActionMenu.Divider />\\n      <ActionMenu.Item>Four item</ActionMenu.Item>\\n    </ActionMenu>\\n  )\\n}\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"nesting\"\n  }, \"Nesting\"), mdx(\"p\", null, \"Nested menu lists may spawn from parent menu list items.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport ActionMenu from '@pluralsight/ps-design-system-actionmenu'\\nfunction Example() {\\n  return (\\n    <ActionMenu>\\n      <ActionMenu.Item>One item</ActionMenu.Item>\\n      <ActionMenu.Divider />\\n      <ActionMenu.Item\\n        nested={\\n          <React.Fragment>\\n            <ActionMenu.Item>Nest 1</ActionMenu.Item>\\n            <ActionMenu.Item\\n              nested={\\n                <React.Fragment>\\n                  <ActionMenu.Item>Nest nest 1-1</ActionMenu.Item>\\n                  <ActionMenu.Item>Nest nest 1-2</ActionMenu.Item>\\n                  <ActionMenu.Item>Nest nest 1-3</ActionMenu.Item>\\n                </React.Fragment>\\n              }\\n            >\\n              Nest 2\\n            </ActionMenu.Item>\\n            <ActionMenu.Divider />\\n            <ActionMenu.Item\\n              nested={\\n                <React.Fragment>\\n                  <ActionMenu.Item>Nest nest 3-1</ActionMenu.Item>\\n                  <ActionMenu.Item>Nest nest 3-2</ActionMenu.Item>\\n                </React.Fragment>\\n              }\\n            >\\n              Nest 3\\n            </ActionMenu.Item>\\n          </React.Fragment>\\n        }\\n      >\\n        Two item\\n      </ActionMenu.Item>\\n      <ActionMenu.Item>Three item</ActionMenu.Item>\\n      <ActionMenu.Divider />\\n      <ActionMenu.Item>Four item</ActionMenu.Item>\\n    </ActionMenu>\\n  )\\n}\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"disabled-items\"\n  }, \"Disabled Items\"), mdx(\"p\", null, \"To keep items in the menu but make them disabled, mark with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disabled\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport ActionMenu from '@pluralsight/ps-design-system-actionmenu'\\nfunction Example() {\\n  return (\\n    <ActionMenu>\\n      <ActionMenu.Item>Normal, enabled</ActionMenu.Item>\\n      <ActionMenu.Item disabled>Present, but disabled</ActionMenu.Item>\\n      <ActionMenu.Item>Normal, enabled</ActionMenu.Item>\\n    </ActionMenu>\\n  )\\n}\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"origin\"\n  }, \"Origin\"), mdx(\"p\", null, \"The origin prop determines the starting position and direction of nested menus.\\nHere's an example of ActionMenu.origins.bottomLeft in action\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport ActionMenu from '@pluralsight/ps-design-system-actionmenu'\\nfunction Example() {\\n  return (\\n    <div\\n      style={{\\n        height: 300,\\n        width: 300,\\n        display: 'flex',\\n        flexDirection: 'column',\\n        justifyContent: 'flex-end',\\n        alignItems: 'flex-start'\\n      }}\\n    >\\n      <ActionMenu origin={ActionMenu.origins.bottomLeft}>\\n        <ActionMenu.Item\\n          nested={\\n            <React.Fragment>\\n              <ActionMenu.Item>Nest 1</ActionMenu.Item>\\n              <ActionMenu.Item\\n                nested={\\n                  <React.Fragment>\\n                    <ActionMenu.Item>Nest nest 1-1</ActionMenu.Item>\\n                    <ActionMenu.Item>Nest nest 1-2</ActionMenu.Item>\\n                    <ActionMenu.Item>Nest nest 1-3</ActionMenu.Item>\\n                  </React.Fragment>\\n                }\\n              >\\n                Nest 2\\n              </ActionMenu.Item>\\n              <ActionMenu.Divider />\\n              <ActionMenu.Item>Nest 3</ActionMenu.Item>\\n              <ActionMenu.Item\\n                nested={\\n                  <React.Fragment>\\n                    <ActionMenu.Item>Nest nest 2-1</ActionMenu.Item>\\n                    <ActionMenu.Item>Nest nest 2-2</ActionMenu.Item>\\n                  </React.Fragment>\\n                }\\n              >\\n                Nest 4\\n              </ActionMenu.Item>\\n            </React.Fragment>\\n          }\\n        >\\n          One\\n        </ActionMenu.Item>\\n        <ActionMenu.Item>Two</ActionMenu.Item>\\n      </ActionMenu>\\n    </div>\\n  )\\n}\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"p\", null, \"WAI-ARIA Patterns: \", mdx(A, {\n    href: \"https://www.w3.org/TR/wai-aria-practices-1.2/#menu\",\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    mdxType: \"A\"\n  }, \"Menu\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"actionmenu\"\n  }, \"ActionMenu\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"onClose\",\n    type: \"function\",\n    desc: \"triggered when a menu collapses; providing it renders an overlay that triggers this function on click\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"onClick\",\n    type: \"(Event, value) => void\",\n    desc: \"triggered when an item selected via click, enter or space\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"origin\",\n    type: mdx(TypesEnum, {\n      enum: ActionMenu.origins,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"orientation ActionMenu.origins of nested menus\",\n    default: \"topLeft\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"actionmenuitem\"\n  }, \"ActionMenu.Item\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"disabled\",\n    type: \"boolean\",\n    desc: \"visually disabled, non-interactive\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"href\",\n    type: \"string\",\n    desc: \"anchor tag uri\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"nested\",\n    type: \"ActionMenu.Item(s)\",\n    desc: \"nested menu items\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"onClick\",\n    type: \"(Event, value) => void\",\n    desc: \"override default onClick behavior passed to ActionMenu.props.onClick\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"origin\",\n    type: mdx(TypesEnum, {\n      enum: ActionMenu.origins,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"override orientation (from ActionMenu.origins) of items nested menu\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"tagName\",\n    type: \"boolean\",\n    desc: \"ActionMenu.Item trigger element tag (from ActionMenu.tagName)\",\n    default: \"a\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"value\",\n    type: \"string | number\",\n    desc: \"value sent to ActionMenu#onChange\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Action menu","route":"/components/actionmenu"},"headings":[{"value":"Action menu","depth":1},{"value":"Examples","depth":2},{"value":"Icons","depth":3},{"value":"Ellipsis","depth":3},{"value":"Dividers","depth":3},{"value":"Nesting","depth":3},{"value":"Disabled Items","depth":3},{"value":"Origin","depth":3},{"value":"Accessibility","depth":2},{"value":"Props","depth":2},{"value":"ActionMenu","depth":3},{"value":"ActionMenu.Item","depth":3}]}},"pageContext":{"slug":"/components/actionmenu/","version":"18.0.14"}},
    "staticQueryHashes": []}