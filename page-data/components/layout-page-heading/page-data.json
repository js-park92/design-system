{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/layout-page-heading",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Page heading layout\",\n  \"route\": \"/components/layout-page-heading\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Usage = makeShortcode(\"Usage\");\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"page-heading-layout\"\n  }, \"Page heading layout\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=11195%3A26707\",\n    install: \"npm install @pluralsight/ps-design-system-layout\",\n    import: \"import { PageHeadingLayout } from '@pluralsight/ps-design-system-layout\",\n    packageName: \"layout\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(\"h2\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"p\", null, \"Start your layout with this default template of, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PageHeadingLayout\"), \" nested in\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PageWidthLayout\"), \", to achieve standard outer spacing and title style.\"), mdx(\"p\", null, \"If you're using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"actions\"), \", be sure to stay limited to a small number of\\nitems (ie, 2-3).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { colorsBlue, layout } from '@pluralsight/ps-design-system-core'\\nimport Button from '@pluralsight/ps-design-system-button'\\nimport { PageHeadingLayout, PageWidthLayout } from '@pluralsight/ps-design-system-layout'\\nimport { Heading, P } from '@pluralsight/ps-design-system-text'\\nimport Theme from '@pluralsight/ps-design-system-theme'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  return (\\n    <React.Fragment>\\n      <PageWidthLayout>\\n        <PageHeadingLayout\\n          actions={[\\n            <Button key=\\\"btn-1\\\" appearance={Button.appearances.stroke}>\\n              Button\\n            </Button>,\\n            <Button key=\\\"btn-2\\\">Button</Button>\\n          ]}\\n          heading={\\n            <Heading size={Heading.sizes.large}>\\n              <h2>Page title</h2>\\n            </Heading>\\n          }\\n        >\\n          <div className=\\\"outline\\\">\\n            <P>Your page contents here</P>\\n          </div>\\n        </PageHeadingLayout>\\n      </PageWidthLayout>\\n\\n      <style jsx>{`\\n        .outline {\\n          border: 2px dashed ${colorsPink[6]};\\n          min-height: 150px;\\n          padding: ${layout.spacingSmall} 0;\\n        }\\n      `}</style>\\n    </React.Fragment>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"actions\",\n    type: \"React.ReactNode[]\",\n    desc: \"actionable elements to place in the top-right\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"heading\",\n    type: \"React.ReactNode\",\n    desc: \"heading element to display as page title\",\n    required: true,\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Page heading layout","route":"/components/layout-page-heading"},"headings":[{"value":"Page heading layout","depth":1},{"value":"Example","depth":2},{"value":"Props","depth":2}]}},"pageContext":{"slug":"/components/layout-page-heading/","version":"CHANGELOG"}},
    "staticQueryHashes": []}