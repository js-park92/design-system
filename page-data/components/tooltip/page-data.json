{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/tooltip",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Tooltip\",\n  \"route\": \"/components/tooltip\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Intro = makeShortcode(\"Intro\");\nvar A = makeShortcode(\"A\");\nvar Usage = makeShortcode(\"Usage\");\nvar Guideline = makeShortcode(\"Guideline\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar TypesEnum = makeShortcode(\"TypesEnum\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"tooltip\"\n  }, \"Tooltip\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"The purpose of a tooltip is to provide context and explain the function of a user interface element or feature. The content of a tooltip is limited to styled text. If more customization is necessary, consider the\", ' ', mdx(A, {\n    href: \"../dialog\",\n    mdxType: \"A\"\n  }, \"Dialog\"), \" component which builds on the patterns of the tooltip.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=10232%3A2\",\n    install: \"npm install @pluralsight/ps-design-system-tooltip\",\n    import: \"import Tooltip from '@pluralsight/ps-design-system-tooltip\",\n    packageName: \"tooltip\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"triggers\"\n  }, \"Triggers\"), mdx(\"p\", null, \"Tooltips can appear automatically, or be triggered by hover, focus, tap or click.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport * as core from '@pluralsight/ps-design-system-core'\\nimport { Below } from '@pluralsight/ps-design-system-position'\\nimport Tooltip from '@pluralsight/ps-design-system-tooltip'\\nimport React, { useState } from 'react'\\n\\nconst Example: React.FC = () => {\\n  const [isHovered, setHovered] = useState<boolean>(false)\\n  const [isClicked, setClicked] = useState<boolean>(false)\\n\\n  const tooltip = (\\n    <Tooltip tailPosition={Tooltip.tailPositions.topCenter}>Tooltip</Tooltip>\\n  )\\n\\n  return (\\n    <div className=\\\"examples\\\">\\n      <div className=\\\"example\\\">\\n        <Below show={tooltip}>\\n          <Button appearance={Button.appearances.secondary}>Look at me</Button>\\n        </Below>\\n      </div>\\n\\n      <div className=\\\"example\\\">\\n        <Below show={tooltip} when={isHovered}>\\n          <Button\\n            appearance={Button.appearances.secondary}\\n            onMouseEnter={() => setHovered(true)}\\n            onMouseLeave={() => setHovered(false)}\\n          >\\n            Hover me\\n          </Button>\\n        </Below>\\n      </div>\\n\\n      <div className=\\\"example\\\">\\n        <Below show={tooltip} when={isClicked}>\\n          <Button\\n            appearance={Button.appearances.secondary}\\n            onClick={() => setClicked(!isClicked)}\\n          >\\n            Click me\\n          </Button>\\n        </Below>\\n      </div>\\n\\n      <style jsx>{`\\n        .examples {\\n          display: flex;\\n          padding: ${layout.spacingLarge};\\n        }\\n        .example {\\n          margin-right: calc(${layout.spacingLarge} * 2);\\n        }\\n        .example:last-child {\\n          margin-right: 0;\\n        }\\n      `}</style>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"appearance\"\n  }, \"Appearance\"), mdx(\"p\", null, \"Tooltips come in 2 styles. Defaults to basic.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Tooltip from '@pluralsight/ps-design-system-tooltip'\\nimport React from 'react'\\n\\nconst Example: React.FC = () => (\\n  <div className=\\\"example-grid\\\">\\n    <Tooltip appearance={Tooltip.appearances.basic}>basic</Tooltip>\\n    <Tooltip appearance={Tooltip.appearances.accent}>accent</Tooltip>\\n  </div>\\n)\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"tail\"\n  }, \"Tail\"), mdx(\"p\", null, \"Tooltips can be shown with or without a tail (a directional indicator). To make the tail appear, use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tooltip.tailPositions\"), \" option.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Tooltip from '@pluralsight/ps-design-system-tooltip'\\nimport React from 'react'\\n\\nconst Example: React.FC = () => (\\n  <div className=\\\"example-grid\\\">\\n    <Tooltip tailPosition={Tooltip.tailPositions.bottomCenter}>\\n      bottomCenter\\n    </Tooltip>\\n    <Tooltip tailPosition={Tooltip.tailPositions.bottomLeft}>\\n      bottomLeft\\n    </Tooltip>\\n    <Tooltip tailPosition={Tooltip.tailPositions.bottomRight}>\\n      bottomRight\\n    </Tooltip>\\n    <Tooltip tailPosition={Tooltip.tailPositions.leftCenter}>\\n      leftCenter\\n    </Tooltip>\\n    <Tooltip tailPosition={Tooltip.tailPositions.rightCenter}>\\n      rightCenter\\n    </Tooltip>\\n    <Tooltip tailPosition={Tooltip.tailPositions.topCenter}>topCenter</Tooltip>\\n    <Tooltip tailPosition={Tooltip.tailPositions.topLeft}>topLeft</Tooltip>\\n    <Tooltip tailPosition={Tooltip.tailPositions.topRight}>topRight</Tooltip>\\n  </div>\\n)\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"close-button\"\n  }, \"Close button\"), mdx(\"p\", null, \"Tooltips may be persistent until a user interaction closes them. For a close button in the top-right corner of the tooltip, provide a onClose callback.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Tooltip from '@pluralsight/ps-design-system-tooltip'\\nimport React from 'react'\\n\\nconst Example: React.FC = () => (\\n  <Tooltip onClose={_ => alert('close clicked')}>\\n    With a close button for those cases you want the tooltip to persist until\\n    closed.\\n  </Tooltip>\\n)\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"guidelines\"\n  }, \"Guidelines\"), mdx(\"p\", null, \"Tooltips should be written in sentence case.\"), mdx(Guideline, {\n    do: mdx(TooltipGuideline, {\n      mdxType: \"TooltipGuideline\"\n    }, \"Bookmark this course\"),\n    dont: mdx(TooltipGuideline, {\n      mdxType: \"TooltipGuideline\"\n    }, \"Bookmark This Course\"),\n    mdxType: \"Guideline\"\n  }), mdx(\"p\", null, \"Write your tooltips to be concise and scannable.\"), mdx(Guideline, {\n    do: mdx(TooltipGuideline, {\n      mdxType: \"TooltipGuideline\"\n    }, \"Bookmark this course\"),\n    dont: mdx(TooltipGuideline, {\n      mdxType: \"TooltipGuideline\"\n    }, \"Bookmark this course and then you\\u2019ll know its safe and sound. This course will enjoy its new company amongst your other bookmarked courses. At first this course might feel shy, but the other bookmarked courses will be friendly and will help this new course get acclimated and comfortable.\"),\n    mdxType: \"Guideline\"\n  }), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"accent\"), \" appearance to gain user attention in cases such onboarding, introducing functionality, asking for input, or prompting action. A good rule of thumb is accent tooltips appear automatically, while basic tooltips appear as a user clicks or hovers to obtain more context.\"), mdx(Guideline, {\n    do: mdx(TooltipGuideline, {\n      appearance: Tooltip.appearances.accent,\n      mdxType: \"TooltipGuideline\"\n    }, \"We\\u2019ve added a new way keep track of your content. Bookmark this course to view it later.\"),\n    dont: mdx(TooltipGuideline, {\n      appearance: Tooltip.appearances.accent,\n      mdxType: \"TooltipGuideline\"\n    }, \"Bookmark this course\"),\n    mdxType: \"Guideline\"\n  }), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"p\", null, \"WAI-ARIA Patterns: \", mdx(A, {\n    href: \"https://www.w3.org/TR/wai-aria-practices-1.2/#tooltip\",\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    mdxType: \"A\"\n  }, \"Tooltip\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"appearance\",\n    type: mdx(TypesEnum, {\n      enum: Tooltip.appearances,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"visual style (from Tooltip.appearances)\",\n    default: Tooltip.appearances.basic,\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"onClose\",\n    type: \"Event => ()\",\n    desc: \"displays a close button, triggered on click\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"tailPosition\",\n    type: mdx(TypesEnum, {\n      enum: Tooltip.tailPositions,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"positions a tail pointer (from Tooltip.tailPositions)\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Tooltip","route":"/components/tooltip"},"headings":[{"value":"Tooltip","depth":1},{"value":"Examples","depth":2},{"value":"Triggers","depth":3},{"value":"Appearance","depth":3},{"value":"Tail","depth":3},{"value":"Close button","depth":3},{"value":"Guidelines","depth":2},{"value":"Accessibility","depth":2},{"value":"Props","depth":2}]}},"pageContext":{"slug":"/components/tooltip/","version":"CHANGELOG"}},
    "staticQueryHashes": []}