{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/drawer",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Drawer\",\n  \"route\": \"/components/drawer\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar A = makeShortcode(\"A\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"drawer\"\n  }, \"Drawer\"), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"Use for expanding and collapsing content.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=10241%3A1\",\n    install: \"npm install @pluralsight/ps-design-system-drawer\",\n    import: \"import Drawer from '@pluralsight/ps-design-system-drawer'\",\n    packageName: \"drawer\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"p\", null, \"The Drawer can be used as an uncontrolled or controlled component. It consist\\nof two subcomponents Summary and Details. The top-level component Drawer is headless.\\nIt's puporse is to supply context and cordinate the subcomponents.\"), mdx(\"h3\", {\n    \"id\": \"basic-usage\"\n  }, \"Basic usage\"), mdx(\"p\", null, \"Use when there is no need to modify open state or hook into onToggle callback.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport { colorsBackgroundDark, layout } from '@pluralsight/ps-design-system-core'\\nimport Drawer from '@pluralsight/ps-design-system-drawer'\\nimport { BookmarkIcon } from '@pluralsight/ps-design-system-icon'\\nimport Row from '@pluralsight/ps-design-system-row'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <Drawer>\\n      <Drawer.Summary>\\n        <ExampleDrawerSummary />\\n      </Drawer.Summary>\\n      <Drawer.Details>\\n        <ExampleDrawerDetails />\\n      </Drawer.Details>\\n    </Drawer>\\n  )\\n}\\n\\nexport default Example\\n\\nconst ExampleDrawerSummary = () => (\\n  <>\\n    <Row\\n      title=\\\"Building a Web App with ASP.NET Core\\\"\\n      progress={18}\\n      metadata1={['Joe Eames', 'Intermediate', 'Jul 21, 2016']}\\n      image={<div className=\\\"image-placeholder\\\" />}\\n    />\\n    <style>{`\\n      .image-placeholder {\\n        width: 100%;\\n        height: 100%;\\n        background: ${colorsBackgroundDark[3]};\\n      }\\n    `}</style>\\n  </>\\n)\\n\\nconst ExampleDrawerDetails = () => (\\n  <div className=\\\"drawer-panel-example\\\">\\n    <Row\\n      title=\\\"Course Overview\\\"\\n      metadata1={['1m 46s']}\\n      actionBar={[\\n        <Button\\n          size={Button.sizes.small}\\n          appearance={Button.appearances.flat}\\n          icon={<BookmarkIcon />}\\n          key=\\\"bookmark\\\"\\n        />\\n      ]}\\n      size={Row.sizes.small}\\n      actionBarVisible\\n    />\\n    <Row\\n      title=\\\"What is ASP.NET Core?\\\"\\n      metadata1={['39m 28s']}\\n      actionBar={[\\n        <Button\\n          size={Button.sizes.small}\\n          appearance={Button.appearances.flat}\\n          icon={<BookmarkIcon />}\\n          key=\\\"bookmark\\\"\\n        />\\n      ]}\\n      size={Row.sizes.small}\\n      actionBarVisible\\n    />\\n    <style>{`\\n      .drawer-panel-example {\\n        padding: ${layout.spacingXLarge} ${layout.spacingXLarge}\\n          ${layout.spacingMedium} ${layout.spacingXLarge};\\n      }\\n    `}</style>\\n  </div>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"drawer-subcomponents\"\n  }, \"Drawer subcomponents\"), mdx(\"p\", null, \"Styles can be overridden with inline styles or by passing it a new className to either node\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Drawer.Summary\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Default display is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"inline-flex\"), \".\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To center align a child to the right pass it \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"margin-left: auto\"), \" style.\")))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Drawer.Details\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Default display is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"block\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { colorsPink, type } from '@pluralsight/ps-design-system-core'\\nimport Drawer from '@pluralsight/ps-design-system-drawer'\\nimport { BookmarkIcon } from '@pluralsight/ps-design-system-icon'\\nimport Row from '@pluralsight/ps-design-system-row'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <Drawer>\\n      <Drawer.Summary>\\n        <PinkBox>Drawer Summary</PinkBox>\\n      </Drawer.Summary>\\n      <Drawer.Details>\\n        <div style={{ height: 128 }} />\\n      </Drawer.Details>\\n    </Drawer>\\n  )\\n}\\n\\nexport default Example\\n\\nconst PinkBox = props => (\\n  <div className=\\\"pink-box\\\">\\n    <span>{`<${props.children}>`}</span>\\n    <style>{`\\n      .pink-box {\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        border: 2px dashed ${colorsPink[6]};\\n        color: ${colorsPink[6]};\\n        font-size: 16px;\\n        font-family: ${type.fontFamilyCode};\\n        margin-left: auto\\n      }\\n    `}</style>\\n  </div>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"custom-layout\"\n  }, \"Custom layout\"), mdx(\"p\", null, \"If you wish to for example customize the header or body\\nyou can make use of the useDrawerContext hook to provide your own\\nDrawer sub-components.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Drawer, { useDrawerContext } from '@pluralsight/ps-design-system-drawer'\\nimport { Heading } from '@pluralsight/ps-design-system-text'\\nimport React from 'react'\\n\\nconst CustomSummary = ({ children }) => {\\n  const { isOpen, onToggle } = useDrawerContext()\\n  return (\\n    <Heading size={Heading.sizes.medium}>\\n      <h2 onClick={onToggle} style={{ marginBottom: 0, paddingBottom: 16 }}>\\n        {children}\\n      </h2>\\n    </Heading>\\n  )\\n}\\n\\nfunction Example() {\\n  return (\\n    <Drawer>\\n      <CustomSummary>Click to open</CustomSummary>\\n      <Drawer.Details>\\n        <div style={{ height: 128 }} />\\n      </Drawer.Details>\\n    </Drawer>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"controlled-mount-drawer-open-aka-startopen\"\n  }, \"Controlled mount drawer open (AKA startOpen)\"), mdx(\"p\", null, \"When there is a need to modify/observe open state or hook into onToggle callback it's best to use the\\nDrawer as a controlled component. The Drawer only takes two props which allow one to take control of\\ntoggle microinteraction, (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"onToggle\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"isOpen\"), \").\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Drawer from '@pluralsight/ps-design-system-drawer'\\nimport { P } from '@pluralsight/ps-design-system-text'\\nimport React from 'react'\\n\\nconst Example = () => {\\n  const [open, setOpen] = useState(true)\\n  const handleToggle = e => {\\n    /** custom logic **/\\n    setOpen(!open)\\n  }\\n  return (\\n    <Drawer onToggle={handleToggle} isOpen={open}>\\n      <Drawer.Summary>\\n        <P style={{ padding: '10px 0', margin: 0 }}>Click me to open</P>\\n      </Drawer.Summary>\\n      <Drawer.Details>\\n        <P style={{ padding: '10px 0', margin: 0 }}>Drawer Content here</P>\\n      </Drawer.Details>\\n    </Drawer>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"controlled-prevent-clicking-on-drawersummary--from-opening-drawer-\"\n  }, \"Controlled prevent clicking on \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"<Drawer.Summary />\"), \" from opening \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"<Drawer />\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Drawer from '@pluralsight/ps-design-system-drawer'\\nimport { P } from '@pluralsight/ps-design-system-text'\\nimport React from 'react'\\n\\nconst Example = () => {\\n  const [open, setOpen] = useState(false)\\n  const handleToggle = e => {\\n    /** custom logic **/\\n    setOpen(!open)\\n  }\\n  return (\\n    <>\\n      <button onClick={handleToggle}>toggle drawer</button>\\n      <Drawer isOpen={open}>\\n        <Drawer.Summary>\\n          <P style={{ padding: '10px 0', margin: 0 }}>\\n            Clicking me won't toggle drawer\\n          </P>\\n        </Drawer.Summary>\\n        <Drawer.Details>\\n          <P style={{ padding: '10px 0', margin: 0 }}>Drawer Content here</P>\\n        </Drawer.Details>\\n      </Drawer>\\n    </>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"p\", null, \"WAI-ARIA Patterns: \", mdx(A, {\n    href: \"https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\",\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    mdxType: \"A\"\n  }, \"Disclosure\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"drawer-1\"\n  }, \"Drawer\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"children\",\n    type: \"React.ReactNode\",\n    desc: \"content inside the drawer\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"onToggle\",\n    type: \"() => void\",\n    desc: \"triggered when the drawer opens or closes\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Drawer","route":"/components/drawer"},"headings":[{"value":"Drawer","depth":1},{"value":"Examples","depth":2},{"value":"Basic usage","depth":3},{"value":"Drawer subcomponents","depth":3},{"value":"Custom layout","depth":3},{"value":"Controlled mount drawer open (AKA startOpen)","depth":3},{"value":"Controlled prevent clicking on <Drawer.Summary /> from opening <Drawer />","depth":3},{"value":"Accessibility","depth":2},{"value":"Props","depth":2},{"value":"Drawer","depth":3}]}},"pageContext":{"slug":"/components/drawer/","version":"CHANGELOG"}},
    "staticQueryHashes": []}