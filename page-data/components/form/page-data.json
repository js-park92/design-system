{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/form",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Form\",\n  \"route\": \"/components/form\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar FormFocusable = makeShortcode(\"FormFocusable\");\nvar DatePicker = makeShortcode(\"DatePicker\");\nvar Guideline = makeShortcode(\"Guideline\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar A = makeShortcode(\"A\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar TypesEnum = makeShortcode(\"TypesEnum\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"form\"\n  }, \"Form\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"The Form component helps arrange a form full of input controls. The package doesn't provide these controls but it is compatible with them.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/PSDS-Web-Components?node-id=13432%3A468\",\n    install: \"npm install @pluralsight/ps-design-system-form\",\n    import: \"import Form from '@pluralsight/ps-design-system-form'\",\n    packageName: \"form\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"in-app\"\n  }, \"In-app\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Form from '@pluralsight/ps-design-system-form'\\nimport Button from '@pluralsight/ps-design-system-button'\\nimport Banner from '@pluralsight/ps-design-system-banner'\\nimport Checkbox from '@pluralsight/ps-design-system-checkbox'\\nimport DatePicker from '@pluralsight/ps-design-system-datepicker'\\nimport Dropdown from '@pluralsight/ps-design-system-dropdown'\\nimport { Heading } from '@pluralsight/ps-design-system-text'\\nimport TextInput from '@pluralsight/ps-design-system-textinput'\\nimport TextArea from '@pluralsight/ps-design-system-textarea'\\nimport Radio from '@pluralsight/ps-design-system-radio'\\nimport Switch from '@pluralsight/ps-design-system-switch'\\nimport { capitalize } from '@pluralsight/ps-design-system-util'\\n\\nconst validate = state => {\\n  const rules = {\\n    name: { rule: /.+/, message: 'Required' },\\n    level: {\\n      rule: /beginner|intermediate|advanced/,\\n      message: 'Select a valid option'\\n    },\\n    slides: {\\n      rule: /false|true/,\\n      message: 'Turn on or off'\\n    },\\n    demo: {\\n      rule: /false|true/,\\n      message: 'Select a demo option'\\n    },\\n    assessment: {\\n      rule: /false|true/,\\n      message: 'Select an assessment option'\\n    },\\n    desc: { rule: /.+/, message: 'Required' },\\n    publish: { rule: /^\\\\d{2}\\\\/\\\\d{2}\\\\/\\\\d{4}$/, message: 'Required' }\\n  }\\n  return Object.keys(rules).reduce(\\n    (errors, ruleName) => {\\n      if (rules[ruleName].rule.test(state[ruleName])) {\\n        delete errors[ruleName]\\n      } else {\\n        errors[ruleName] = rules[ruleName].message\\n      }\\n      return errors\\n    },\\n    { ...state.errors }\\n  )\\n}\\n\\nconst initialState = {\\n  errors: {},\\n  isSubmitting: false,\\n  isSubmitted: false,\\n  name: '',\\n  level: null,\\n  slides: false,\\n  slidestech: null,\\n  demo: false,\\n  assessment: false,\\n  desc: '',\\n  publish: undefined\\n}\\n\\nclass InAppExample extends React.Component {\\n  constructor() {\\n    super()\\n    this.state = initialState\\n    this.handleSubmit = this.handleSubmit.bind(this)\\n    this.handleChange = this.handleChange.bind(this)\\n    this.reset = this.reset.bind(this)\\n  }\\n\\n  handleChange(evt) {\\n    const { name, value } = evt.target\\n    this.setState({\\n      [name]: value\\n    })\\n  }\\n\\n  handleSubmit(evt) {\\n    evt.preventDefault()\\n\\n    const errors = validate(this.state)\\n    const hasErrors = Object.keys(errors).length > 0\\n\\n    this.setState({ errors })\\n\\n    if (!hasErrors) {\\n      this.setState({ isSubmitting: true }, _ => {\\n        setTimeout(\\n          _ =>\\n            this.setState({ isSubmitting: false, isSubmitted: true }, _ =>\\n              setTimeout(_ => this.reset(), 800)\\n            ),\\n          1500\\n        )\\n      })\\n    }\\n  }\\n\\n  reset(evt) {\\n    this.setState(initialState)\\n  }\\n\\n  render() {\\n    const { state } = this\\n    const errorMsg = name => state.errors[name]\\n    const isError = name => !!errorMsg(name)\\n    const hasErrors = Object.keys(state.errors).length > 0\\n    return (\\n      <div style={{ position: 'relative' }}>\\n        {state.isSubmitted && (\\n          <Banner\\n            color={Banner.colors.green}\\n            style={{ position: 'absolute', top: '0', left: '0' }}\\n          >\\n            Course created!\\n          </Banner>\\n        )}\\n        {hasErrors && (\\n          <Banner\\n            color={Banner.colors.red}\\n            style={{ position: 'absolute', top: '0', left: '0' }}\\n          >\\n            Failed: Sample course form has errors\\n          </Banner>\\n        )}\\n        <form onSubmit={this.handleSubmit}>\\n          <Form.VerticalLayout>\\n            <Heading>\\n              <h2>Course sample form</h2>\\n            </Heading>\\n            <TextInput\\n              error={isError('name')}\\n              onChange={this.handleChange}\\n              name=\\\"name\\\"\\n              label=\\\"Course name\\\"\\n              placeholder=\\\"Title\\\"\\n              subLabel={errorMsg('name') || 'Use Title Case'}\\n              value={state.name}\\n            />\\n            <Dropdown\\n              error={isError('level')}\\n              label=\\\"Course difficulty level\\\"\\n              placeholder=\\\"Choose one\\\"\\n              subLabel={errorMsg('level')}\\n              menu={\\n                <>\\n                  {['beginner', 'intermediate', 'advanced'].map(level => (\\n                    <Dropdown.Item\\n                      name=\\\"level\\\"\\n                      key={level}\\n                      onClick={_ => this.setState({ level })}\\n                    >\\n                      {capitalize(level)}\\n                    </Dropdown.Item>\\n                  ))}\\n                </>\\n              }\\n            />\\n            <DatePicker\\n              error={isError('publish')}\\n              name=\\\"publish\\\"\\n              value={state.publish}\\n              label=\\\"Publish date\\\"\\n              subLabel=\\\"When your course will go live\\\"\\n              onSelect={publish => this.setState({ publish })}\\n            />\\n            <Switch\\n              error={isError('slides')}\\n              checked={state.slides}\\n              name=\\\"slides\\\"\\n              onClick={checked => this.setState({ slides: checked })}\\n            >\\n              Has slides?\\n            </Switch>\\n            <Form.Divider />\\n            <Radio.Group\\n              error={isError('slidestech')}\\n              disabled={!state.slides}\\n              name=\\\"slidestech\\\"\\n              onSelect={(_, slidestech) => this.setState({ slidestech })}\\n              value={state.slidestech}\\n            >\\n              <Radio.Button value=\\\"key\\\" label=\\\"Keynote\\\" />\\n              <Radio.Button value=\\\"pptx\\\" label=\\\"Powerpoint\\\" />\\n            </Radio.Group>\\n            <Form.Divider />\\n            <Checkbox\\n              error={isError('demo')}\\n              checked={state.demo}\\n              name=\\\"demo\\\"\\n              label=\\\"Demo included\\\"\\n              value=\\\"demo\\\"\\n              onCheck={(_, checked, __, name) =>\\n                this.setState({ [name]: checked })\\n              }\\n            />\\n            <Checkbox\\n              error={isError('assessment')}\\n              checked={state.assessment}\\n              name=\\\"assessment\\\"\\n              label=\\\"Assessment included\\\"\\n              value=\\\"assessment\\\"\\n              onCheck={(_, checked, __, name) =>\\n                this.setState({ [name]: checked })\\n              }\\n            />\\n            <TextArea\\n              error={isError('desc')}\\n              label=\\\"Description\\\"\\n              subLabel={errorMsg('desc')}\\n              placeholder=\\\"What is your course about?\\\"\\n              onChange={this.handleChange}\\n              name=\\\"desc\\\"\\n              value={state.desc}\\n            />\\n            <Form.ButtonRow>\\n              <Button loading={state.isSubmitting} onClick={this.handleSubmit}>\\n                Save\\n              </Button>\\n              <Button\\n                appearance={Button.appearances.secondary}\\n                onClick={evt => evt.preventDefault()}\\n              >\\n                Cancel\\n              </Button>\\n            </Form.ButtonRow>\\n          </Form.VerticalLayout>\\n        </form>\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default InAppExample\\n\")), mdx(\"h3\", {\n    \"id\": \"formverticallayout\"\n  }, \"Form.VerticalLayout\"), mdx(\"p\", null, \"Forms should be horizontally left-aligned, with one input control per line, and inputs are stretched to the full container width. Bring your own container. Form.VerticalLayout takes care of the vertical spacing between controls.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Form from '@pluralsight/ps-design-system-form'\\nimport TextInput from '@pluralsight/ps-design-system-textinput'\\n\\nconst Comp = () => (\\n  <div style={{ width: '80%' }}>\\n    <Form.VerticalLayout>\\n      <TextInput placeholder=\\\"Stacked\\\" />\\n      <TextInput placeholder=\\\"In a form\\\" />\\n    </Form.VerticalLayout>\\n  </div>\\n)\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"formdivider\"\n  }, \"Form.Divider\"), mdx(\"p\", null, \"Dividers are simple visual indicators that break form flow and content into logical pieces.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Form from '@pluralsight/ps-design-system-form'\\nimport TextInput from '@pluralsight/ps-design-system-textinput'\\n\\nconst Comp = () => (\\n  <div style={{ width: '80%' }}>\\n    <Form.VerticalLayout>\\n      <TextInput placeholder=\\\"Related stuff\\\" />\\n      <Form.Divider />\\n      <TextInput placeholder=\\\"Other related stuff\\\" />\\n    </Form.VerticalLayout>\\n  </div>\\n)\\n\\nexport default Comp\\n\")), mdx(\"h3\", {\n    \"id\": \"formbuttonrow\"\n  }, \"Form.ButtonRow\"), mdx(\"p\", null, \"Forms commonly have multiple buttons that a user can interact with. Those buttons should be on a single row and left-aligned. Form.ButtonRow will help.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Form from '@pluralsight/ps-design-system-form'\\nimport TextInput from '@pluralsight/ps-design-system-textinput'\\nimport Button from '@pluralsight/ps-design-system-button'\\n\\nconst Comp = () => (\\n  <div style={{ width: '80%' }}>\\n    <Form.VerticalLayout>\\n      <TextInput placeholder=\\\"Related stuff\\\" />\\n      <TextInput placeholder=\\\"Other related stuff\\\" />\\n      <Form.ButtonRow>\\n        <Button>Primary</Button>\\n        <Button appearance={Button.appearances.secondary}>Secondary</Button>\\n      </Form.ButtonRow>\\n    </Form.VerticalLayout>\\n  </div>\\n)\\n\\nexport default Comp\\n\")), mdx(\"h2\", {\n    \"id\": \"form-controls\"\n  }, \"Form controls\"), mdx(\"p\", null, \"Each one of these controls is a separate package. They are mean to be used inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Form\"), \" layout component. Find links to the docs below\"), mdx(FormFocusable, {\n    mdxType: \"FormFocusable\"\n  }, mdx(ControlExample, {\n    title: \"Text Input\",\n    href: \"/components/textinput\",\n    desc: \"For short textual input.\",\n    mdxType: \"ControlExample\"\n  }, mdx(TextInput, {\n    label: \"First name\",\n    placeholder: \"What's your name?\",\n    mdxType: \"TextInput\"\n  })), mdx(ControlExample, {\n    title: \"Checkbox\",\n    href: \"/components/checkbox\",\n    desc: \"For multiple selection.\",\n    mdxType: \"ControlExample\"\n  }, mdx(CheckboxExample, {\n    mdxType: \"CheckboxExample\"\n  })), mdx(ControlExample, {\n    title: \"Switch\",\n    href: \"/components/switch\",\n    desc: \"For on/off selections.\",\n    mdxType: \"ControlExample\"\n  }, mdx(SwitchExample, {\n    mdxType: \"SwitchExample\"\n  })), mdx(ControlExample, {\n    title: \"DatePicker\",\n    href: \"/components/datepicker\",\n    desc: \"For dates.\",\n    mdxType: \"ControlExample\"\n  }, mdx(DatePicker, {\n    label: \"Birthday\",\n    mdxType: \"DatePicker\"\n  })), mdx(ControlExample, {\n    title: \"Tag\",\n    href: \"/components/tag\",\n    desc: \"For dynamic lists.\",\n    mdxType: \"ControlExample\"\n  }, mdx(TagExample, {\n    mdxType: \"TagExample\"\n  }))), mdx(\"h2\", {\n    \"id\": \"guidelines\"\n  }, \"Guidelines\"), mdx(\"p\", null, \"Write labels in sentence case. Uppercase is not optimal for scannability.\"), mdx(Guideline, {\n    do: mdx(TextInput, {\n      label: \"Job title\",\n      mdxType: \"TextInput\"\n    }),\n    dont: mdx(TextInput, {\n      label: \"JOB TITLE\",\n      mdxType: \"TextInput\"\n    }),\n    mdxType: \"Guideline\"\n  }), mdx(\"p\", null, \"Don't rely on the placeholder. Use the label to specify the purpose of each field to avoid usability issues.\"), mdx(Guideline, {\n    do: mdx(Form.VerticalLayout, null, mdx(TextInput, {\n      label: \"Course title\",\n      placeholder: \"What is the name of the course?\",\n      mdxType: \"TextInput\"\n    })),\n    dont: mdx(Form.VerticalLayout, null, mdx(TextInput, {\n      placeholder: \"Course title\",\n      mdxType: \"TextInput\"\n    })),\n    mdxType: \"Guideline\"\n  }), mdx(\"p\", null, \"Specify errors inline. Show where the error occurs and a clear reason for the error so users can find it in context.\"), mdx(Guideline, {\n    do: mdx(Form.VerticalLayout, null, mdx(TextInput, {\n      label: \"Email\",\n      error: true,\n      value: \"jake@example.com\",\n      onChange: function onChange() {},\n      subLabel: \"Not a valid email address\",\n      mdxType: \"TextInput\"\n    }), mdx(TextInput, {\n      label: \"Password\",\n      type: \"Password\",\n      mdxType: \"TextInput\"\n    })),\n    dont: mdx(Form.VerticalLayout, null, mdx(Banner, {\n      color: Banner.colors.red,\n      mdxType: \"Banner\"\n    }, \"Email address is not valid\"), mdx(TextInput, {\n      label: \"Email\",\n      value: \"jake@example.com\",\n      onChange: function onChange() {},\n      mdxType: \"TextInput\"\n    }), mdx(TextInput, {\n      label: \"Password\",\n      type: \"Password\",\n      mdxType: \"TextInput\"\n    })),\n    mdxType: \"Guideline\"\n  }), mdx(\"p\", null, \"Rather than implying a required field with a marker (\", \"*\", \"), consider noting optional fields instead.\"), mdx(Guideline, {\n    do: mdx(Form.VerticalLayout, null, mdx(TextInput, {\n      label: \"Course title\",\n      value: \"My course\",\n      onChange: function onChange() {},\n      mdxType: \"TextInput\"\n    }), mdx(TextInput, {\n      label: \"Author\",\n      placeholder: \"What is the author's name?\",\n      mdxType: \"TextInput\"\n    }), mdx(TextInput, {\n      label: \"Tags\",\n      placeholder: \"Add tags\",\n      subLabel: \"(Optional)\",\n      mdxType: \"TextInput\"\n    })),\n    dont: mdx(Form.VerticalLayout, null, mdx(TextInput, {\n      label: \"Course title *\",\n      value: \"My course\",\n      onChange: function onChange() {},\n      mdxType: \"TextInput\"\n    }), mdx(TextInput, {\n      label: \"Author *\",\n      placeholder: \"What is the author's name?\",\n      mdxType: \"TextInput\"\n    }), mdx(TextInput, {\n      label: \"Tags\",\n      placeholder: \"Add tags\",\n      mdxType: \"TextInput\"\n    })),\n    mdxType: \"Guideline\"\n  }), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Form.Divider\"), \" to group similar fields together into logical groups for users to parse the form more effectively.\"), mdx(Guideline, {\n    do: mdx(Form.VerticalLayout, null, mdx(TextInput, {\n      label: \"Name\",\n      value: \"Jake Trent\",\n      onChange: function onChange() {},\n      mdxType: \"TextInput\"\n    }), mdx(TextInput, {\n      label: \"Role\",\n      placeholder: \"What do you do?\",\n      mdxType: \"TextInput\"\n    }), mdx(Form.Divider, null), mdx(TextInput, {\n      label: \"Address\",\n      mdxType: \"TextInput\"\n    }), mdx(TextInput, {\n      label: \"City\",\n      mdxType: \"TextInput\"\n    }), mdx(Dropdown, {\n      label: \"State\",\n      value: \"AL\",\n      onChange: function onChange() {},\n      menu: mdx(React.Fragment, null, mdx(Dropdown.Item, null, \"AL\")),\n      mdxType: \"Dropdown\"\n    }), mdx(Form.Divider, null), mdx(Dropdown, {\n      label: \"Contact preference\",\n      menu: mdx(React.Fragment, null, mdx(Dropdown.Item, {\n        isActive: true\n      }, \"Email\")),\n      mdxType: \"Dropdown\"\n    })),\n    dont: mdx(Form.VerticalLayout, null, mdx(TextInput, {\n      label: \"Name\",\n      value: \"Jake Trent\",\n      onChange: function onChange() {},\n      mdxType: \"TextInput\"\n    }), mdx(TextInput, {\n      label: \"Role\",\n      placeholder: \"What do you do?\",\n      mdxType: \"TextInput\"\n    }), mdx(TextInput, {\n      label: \"Address\",\n      mdxType: \"TextInput\"\n    }), mdx(TextInput, {\n      label: \"City\",\n      mdxType: \"TextInput\"\n    }), mdx(Dropdown, {\n      label: \"State\",\n      value: \"AL\",\n      onChange: function onChange() {},\n      menu: mdx(React.Fragment, null, mdx(Dropdown.Item, null, \"AL\")),\n      mdxType: \"Dropdown\"\n    }), mdx(Dropdown, {\n      label: \"Contact preference\",\n      menu: mdx(React.Fragment, null, mdx(Dropdown.Item, null, \"Email\")),\n      mdxType: \"Dropdown\"\n    })),\n    mdxType: \"Guideline\"\n  }), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"p\", null, \"WAI-ARIA Patterns: \", mdx(A, {\n    href: \"https://www.w3.org/TR/wai-aria-practices-1.2/#aria_lh_form\",\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    mdxType: \"A\"\n  }, \"Form (landmark region)\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"formverticallayout-1\"\n  }, \"Form.VerticalLayout\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"children\",\n    type: \"ReactNode\",\n    desc: \"form elements that will be aligned and spaced\",\n    required: true,\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"formbuttonrow-1\"\n  }, \"Form.ButtonRow\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"align\",\n    type: mdx(TypesEnum, {\n      enum: Form.ButtonRow.aligns,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"horizontal alignment (from Form.ButtonRow.aligns)\",\n    default: \"left\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"children\",\n    type: \"ReactNode\",\n    desc: \"buttons to be aligned\",\n    required: true,\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Form","route":"/components/form"},"headings":[{"value":"Form","depth":1},{"value":"Examples","depth":2},{"value":"In-app","depth":3},{"value":"Form.VerticalLayout","depth":3},{"value":"Form.Divider","depth":3},{"value":"Form.ButtonRow","depth":3},{"value":"Form controls","depth":2},{"value":"Guidelines","depth":2},{"value":"Accessibility","depth":2},{"value":"Props","depth":2},{"value":"Form.VerticalLayout","depth":3},{"value":"Form.ButtonRow","depth":3}]}},"pageContext":{"slug":"/components/form/","version":"CHANGELOG"}},
    "staticQueryHashes": []}