{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/layout-equal-column",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Equal column\",\n  \"route\": \"/components/layout-equal-column-layout\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar TypesEnum = makeShortcode(\"TypesEnum\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"equal-column\"\n  }, \"Equal column\"), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"Layout content in equal column widths with responsive breakpoints.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/PSDS-Web-Components?node-id=13885%3A38934\",\n    install: \"npm install @pluralsight/ps-design-system-layout\",\n    import: \"import { EqualColumnLayout } from '@pluralsight/ps-design-system-layout'\",\n    packageName: \"layout\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(\"h2\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"p\", null, \"This layout will provide a set number of columns for an arbitrary number of\\nitems. If more items than columns are provided, they will flow into rows.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"USAGE NOTE: The children elements that are supplied to the EqualColumnLayout must be able to accept \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data-css-*\"), \" props. Optionally, you may provide your own semantics for the parent container by passing that as the first child.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { colorsBlue, colorsTextIcon, type, layout } from '@pluralsight/ps-design-system-core'\\nimport { EqualColumnLayout } from '@pluralsight/ps-design-system-layout'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  return (\\n    <React.Fragment>\\n      <EqualColumnLayout count={EqualColumnLayout.counts.two}>\\n        <BlueBox>A</BlueBox>\\n        <BlueBox>B</BlueBox>\\n      </EqualColumnLayout>\\n\\n      <br />\\n\\n      <EqualColumnLayout count={EqualColumnLayout.counts.four}>\\n        <BlueBox>C</BlueBox>\\n        <BlueBox>D</BlueBox>\\n        <BlueBox>E</BlueBox>\\n        <BlueBox>F</BlueBox>\\n      </EqualColumnLayout>\\n\\n      <br />\\n\\n      <EqualColumnLayout count={EqualColumnLayout.counts.three}>\\n        <ul style={{ listStyle: 'none' }}>\\n          <li>\\n            <BlueBox>G</BlueBox>\\n          </li>\\n          <li>\\n            <BlueBox>H</BlueBox>\\n          </li>\\n          <li>\\n            <BlueBox>I</BlueBox>\\n          </li>\\n        </ul>\\n      </EqualColumnLayout>\\n    </React.Fragment>\\n  )\\n}\\n\\nconst BlueBox: React.FC = props => (\\n  <React.Fragment>\\n    <div {...props} className={'bluebox ' + props.className} />\\n\\n    <style jsx>{`\\n      .bluebox {\\n        align-items: center;\\n        background: ${colorsBlue[6]};\\n        color: ${colorsTextIcon.highOnDark};\\n        display: flex;\\n        font-weight: ${type.fontWeightStrong};\\n        height: ${layout.spacingLarge};\\n        justify-content: center;\\n      }\\n    `}</style>\\n  </React.Fragment>\\n)\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"count\",\n    type: mdx(TypesEnum, {\n      enum: EqualColumnLayout.counts,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"number of columns in a row at full width\",\n    default: EqualColumnLayout.counts.four,\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"children\",\n    type: \"single parent el | children array\",\n    desc: \"children must accept data-css-* props\",\n    default: \"div\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Equal column","route":"/components/layout-equal-column-layout"},"headings":[{"value":"Equal column","depth":1},{"value":"Example","depth":2},{"value":"Props","depth":2}]}},"pageContext":{"slug":"/components/layout-equal-column/","version":"CHANGELOG"}},
    "staticQueryHashes": []}