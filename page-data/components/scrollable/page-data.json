{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/scrollable",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Scrollable\",\n  \"route\": \"/components/scrollable\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Usage = makeShortcode(\"Usage\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"scrollable\"\n  }, \"Scrollable\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/PSDS-Web-Components?node-id=12381%3A44\",\n    install: \"npm install @pluralsight/ps-design-system-scrollable\",\n    import: \"import Scrollable from '@pluralsight/ps-design-system-scrollable'\",\n    packageName: \"scrollable\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"default-example\"\n  }, \"Default example\"), mdx(\"p\", null, \"To style the scrollbar simply replace your block level element with the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Scrollable\"), \" component.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { P } from '@pluralsight/ps-design-system-text'\\nimport Scrollable from '@pluralsight/ps-design-system-scrollable'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  return (\\n    <Scrollable style={{ height: 164, outline: '1px dashed pink' }}>\\n      <P>\\n        There's not a thing in the world wrong with washing your brush. With\\n        practice comes confidence. Don't be afraid to make these big decisions.\\n        Once you start, they sort of just make themselves.\\n      </P>\\n\\n      <P>\\n        You can't have light without dark. You can't know happiness unless\\n        you've known sorrow. See. We take the corner of the brush and let it\\n        play back-and-forth. Every day I learn. If we're gonna walk though the\\n        woods, we need a little path. We don't need any guidelines or formats.\\n        All we need to do is just let it flow right out of us.\\n      </P>\\n\\n      <P>\\n        Let's make a nice big leafy tree. Let's go up in here, and start having\\n        some fun God gave you this gift of imagination. Use it. Life is too\\n        short to be alone, too precious. Share it with a friend.\\n      </P>\\n\\n      <P>\\n        I get carried away with this brush cleaning. What the devil. It just\\n        happens - whether or not you worried about it or tried to plan it.\\n        Imagination is the key to painting.\\n      </P>\\n\\n      <P>\\n        Use absolutely no pressure. Just like an angel's wing. We'll put some\\n        happy little leaves here and there. You don't have to spend all your\\n        time thinking about what you're doing, you just let it happen. Just let\\n        your mind wander and enjoy. This should make you happy.\\n      </P>\\n\\n      <P>\\n        Very easy to work these to death. Just a happy little shadow that lives\\n        in there. There are no mistakes. You can fix anything that happens. But\\n        they're very easily killed. Clouds are delicate.\\n      </P>\\n\\n      <P>\\n        We'll throw some happy little limbs on this tree. You better get your\\n        coat out, this is going to be a cold painting. The only thing worse than\\n        yellow snow is green snow.\\n      </P>\\n    </Scrollable>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"customize-content-html-with-render-prop\"\n  }, \"Customize content html with render prop\"), mdx(\"p\", null, \"Instead of rendering the default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \", you can render with your own semantic markup.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { P } from '@pluralsight/ps-design-system-text'\\nimport Scrollable from '@pluralsight/ps-design-system-scrollable'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  return (\\n    <Scrollable\\n      renderContent={(contentProps, contentRef) => <aside {...contentProps} ref={contentRef} />}\\n      style={{ height: 164, outline: '1px dashed pink' }}\\n    >\\n      <P>\\n        There's not a thing in the world wrong with washing your brush. With\\n        practice comes confidence. Don't be afraid to make these big decisions.\\n        Once you start, they sort of just make themselves.\\n      </P>\\n\\n      <P>\\n        You can't have light without dark. You can't know happiness unless\\n        you've known sorrow. See. We take the corner of the brush and let it\\n        play back-and-forth. Every day I learn. If we're gonna walk though the\\n        woods, we need a little path. We don't need any guidelines or formats.\\n        All we need to do is just let it flow right out of us.\\n      </P>\\n\\n      <P>\\n        Let's make a nice big leafy tree. Let's go up in here, and start having\\n        some fun God gave you this gift of imagination. Use it. Life is too\\n        short to be alone, too precious. Share it with a friend.\\n      </P>\\n\\n      <P>\\n        I get carried away with this brush cleaning. What the devil. It just\\n        happens - whether or not you worried about it or tried to plan it.\\n        Imagination is the key to painting.\\n      </P>\\n\\n      <P>\\n        Use absolutely no pressure. Just like an angel's wing. We'll put some\\n        happy little leaves here and there. You don't have to spend all your\\n        time thinking about what you're doing, you just let it happen. Just let\\n        your mind wander and enjoy. This should make you happy.\\n      </P>\\n\\n      <P>\\n        Very easy to work these to death. Just a happy little shadow that lives\\n        in there. There are no mistakes. You can fix anything that happens. But\\n        they're very easily killed. Clouds are delicate.\\n      </P>\\n\\n      <P>\\n        We'll throw some happy little limbs on this tree. You better get your\\n        coat out, this is going to be a cold painting. The only thing worse than\\n        yellow snow is green snow.\\n      </P>\\n    </Scrollable>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"renderContent\",\n    type: \"(props: { children: React.ReactNode, onScroll: React.UIEventHandler, [cssSelector: string]: '' }, ref: React.Ref) => React.ReactNode\",\n    default: \"Renders as a div\",\n    desc: \"Scrollable content render prop\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"children\",\n    required: true,\n    type: \"React.ReactNode\",\n    desc: \"Content to make scrollable\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Scrollable","route":"/components/scrollable"},"headings":[{"value":"Scrollable","depth":1},{"value":"Examples","depth":2},{"value":"Default example","depth":3},{"value":"Customize content html with render prop","depth":3},{"value":"Props","depth":2}]}},"pageContext":{"slug":"/components/scrollable/","version":"CHANGELOG"}},
    "staticQueryHashes": []}