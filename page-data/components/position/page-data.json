{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/position",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Position\",\n  \"route\": \"/components/position\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Intro = makeShortcode(\"Intro\");\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Usage = makeShortcode(\"Usage\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"position\"\n  }, \"Position\"), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"The Position component is a utility meant to help one control position of elements relative to other elements, for example, tooltips above a button.\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(Usage, {\n    install: \"npm install @pluralsight/ps-design-system-position\",\n    import: \"\\nimport {\\n  Above, AboveLeft, AboveRight,\\n  Below, BelowLeft, BelowRight,\\n  LeftOf, RightOf\\n} from '@pluralsight/ps-design-system-position'\\n\",\n    packageName: \"position\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"using-the-react-component\"\n  }, \"Using the React component\"), mdx(\"p\", null, \"The component that you pass to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"show\"), \" prop must be wrapped in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.forwardRef\"), \" and allow the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"style\"), \" prop to be set.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React, { useState } from 'react'\\n\\nimport Button from '@pluralsight/ps-design-system-button'\\nimport Tooltip from '@pluralsight/ps-design-system-tooltip'\\n\\nimport { RightOf } from '@pluralsight/ps-design-system-position'\\n\\nconst Example: React.FC = props => {\\n  const [hovered, setHovered] = useState(false)\\n\\n  const hide = () => setHovered(false)\\n  const show = () => setHovered(true)\\n\\n  return (\\n    <RightOf\\n      show={\\n        <Tooltip tailPosition={Tooltip.tailPositions.leftCenter}>\\n          Tooltip\\n        </Tooltip>\\n      }\\n      when={hovered}\\n    >\\n      <Button\\n        appearance={Button.appearances.secondary}\\n        onMouseEnter={show}\\n        onMouseLeave={hide}\\n      >\\n        Hover me\\n      </Button>\\n    </RightOf>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"portal-override\"\n  }, \"Portal override\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Position\"), \" always renders in a portal, defaulting to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"document.body\"), \". It is\\noften desirable to provide your own node to render within. Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inNode\"), \"\\nprop to pass an element reference.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React, { forward, useLayoutEffect, useRef, useState } from 'react'\\n\\nimport Button from '@pluralsight/ps-design-system-button'\\nimport { PlaceholderIcon } from '@pluralsight/ps-design-system-icon'\\nimport Tooltip from '@pluralsight/ps-design-system-tooltip'\\n\\nimport { Above } from '@pluralsight/ps-design-system-position'\\n\\nconst Example: React.FC = props => {\\n  const portal = useRef<HTMLDivElement>()\\n\\n  const [hasRendered, setHasRendered] = useState(false)\\n  useLayoutEffect(() => {\\n    setHasRendered(true)\\n  }, [])\\n\\n  return (\\n    <React.Fragment>\\n      {hasRendered && (\\n        <div className=\\\"example\\\">\\n          <Above\\n            inNode={portal.current}\\n            show={<Tooltip>Rendered in portal</Tooltip>}\\n          >\\n            <Target />\\n          </Above>\\n        </div>\\n      )}\\n\\n      <div ref={portal} />\\n\\n      <style jsx>{`\\n        .example {\\n          display: flex;\\n          align-items: center;\\n          justify-content: center;\\n          width: 100%;\\n          height: 200px;\\n          outline: 2px dashed lightgrey;\\n        }\\n      `}</style>\\n    </React.Fragment>\\n  )\\n}\\n\\nconst Target = forwardRef<HTMLButtonElement>((_props, ref) => (\\n  <Button\\n    appearance={Button.appearances.flat}\\n    disabled\\n    icon={<PlaceholderIcon />}\\n    title=\\\"Target\\\"\\n    ref={ref}\\n  />\\n))\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"javascript-example\"\n  }, \"Javascript Example\"), mdx(\"p\", null, \"The most important bits of this utility are available in pure JavaScript.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\",\n    \"metastring\": \"noRender startExpanded\",\n    \"noRender\": true,\n    \"startExpanded\": true\n  }, \"import {\\n  above,\\n  aboveLeft,\\n  aboveRight,\\n  above,\\n  belowLeft,\\n  belowRight,\\n  leftOf,\\n  rightOf\\n} from '@pluralsight/ps-design-system-position'\\n\")), mdx(\"p\", null, \"Use the JavaScript function to get the positioning style desired.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React, { useEffect, useRef, useState } from 'react'\\n\\nimport Button from '@pluralsight/ps-design-system-button'\\nimport Tooltip from '@pluralsight/ps-design-system-tooltip'\\n\\nimport { rightOf } from '@pluralsight/ps-design-system-position'\\n\\nconst Example: React.FC = props => {\\n  const button = useRef<HTMLButtonElement>()\\n  const tooltip = useRef<HTMLDivElement>()\\n\\n  const [hovered, setHovered] = useState(false)\\n\\n  const hide = () => setHovered(false)\\n  const show = () => setHovered(true)\\n\\n  const [style, setStyle] = useState({ position: 'absolute' })\\n\\n  useEffect(() => {\\n    if (!button.current || !tooltip.current) return\\n\\n    const nextStyle = rightOf(button.current).styleFor(tooltip.current)\\n    setStyle(nextStyle)\\n  }, [hovered])\\n\\n  return (\\n    <div>\\n      <Button\\n        appearance={Button.appearances.secondary}\\n        onMouseEnter={show}\\n        onMouseLeave={hide}\\n        ref={button}\\n      >\\n        Hover me\\n      </Button>\\n\\n      <Tooltip\\n        ref={tooltip}\\n        style={{ ...style, display: hovered ? 'block' : 'none' }}\\n        visible={false}\\n      >\\n        Tooltip\\n      </Tooltip>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"allow-offscreen\"\n  }, \"Allow Offscreen\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"allowOffscreen\"), \" property allows a developer to enable rendering content outside the viewport.\\nThis is useful when you want to render a tooltip open on page load and the tooltip should render below the fold.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React, { useState } from 'react'\\n\\nimport Button from '@pluralsight/ps-design-system-button'\\nimport Tooltip from '@pluralsight/ps-design-system-tooltip'\\n\\nimport { RightOf } from '@pluralsight/ps-design-system-position'\\n\\nconst Example: React.FC = props => {\\n  const [hovered, setHovered] = useState(true)\\n\\n  const hide = () => setHovered(false)\\n  const show = () => setHovered(true)\\n\\n  return (\\n    <React.Fragment>\\n     <RightOf\\n      allowOffscreen={true}\\n      show={\\n        <Tooltip tailPosition={Tooltip.tailPositions.leftCenter}>\\n          Tooltip open on load\\n        </Tooltip>\\n      }\\n      when={hovered}\\n    >\\n      <Button\\n        appearance={Button.appearances.secondary}\\n        onMouseEnter={show}\\n        onMouseLeave={hide}\\n      >\\n        Hover me\\n      </Button>\\n    </RightOf>\\n\\n      <style jsx>{`\\n        .example {\\n          display: flex;\\n          align-items: center;\\n          justify-content: center;\\n          width: 100%;\\n          height: 200px;\\n          outline: 2px dashed lightgrey;\\n        }\\n      `}</style>\\n    </React.Fragment>\\n  )\\n}\\n\\nconst Target = forwardRef<HTMLButtonElement>((_props, ref) => (\\n  <Button\\n    appearance={Button.appearances.flat}\\n    disabled\\n    icon={<PlaceholderIcon />}\\n    title=\\\"Target\\\"\\n    ref={ref}\\n  />\\n))\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"positions\"\n  }, \"Positions\"), mdx(IframeResizer, {\n    frameBorder: \"0\",\n    src: \"/examples/position\",\n    style: {\n      width: '1px',\n      minWidth: '100%'\n    },\n    mdxType: \"IframeResizer\"\n  }), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"allowOffscreen\",\n    type: \"boolean\",\n    desc: \"allow rendering of positioned element offscreen\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"children\",\n    type: \"React.ReactNode\",\n    desc: \"target element something will be relative to\",\n    required: true,\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"inNode\",\n    type: \"HTMLElement\",\n    desc: \"specific node for portal rendering\",\n    default: \"document.body\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"show\",\n    type: \"React.ReactNode\",\n    desc: \"element placed in relation to target\",\n    required: true,\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"target\",\n    type: \"Ref\",\n    desc: \"reference to custom target\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"when\",\n    type: \"boolean\",\n    desc: \"conditional rendering of positioned element\",\n    default: \"true\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Position","route":"/components/position"},"headings":[{"value":"Position","depth":1},{"value":"Examples","depth":2},{"value":"Using the React component","depth":3},{"value":"Portal override","depth":3},{"value":"Javascript Example","depth":3},{"value":"Allow Offscreen","depth":3},{"value":"Positions","depth":3},{"value":"Props","depth":2}]}},"pageContext":{"slug":"/components/position/","version":"9.0.7"}},
    "staticQueryHashes": []}