{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/text-code",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Code\",\n  \"route\": \"/components/text-code\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"code\"\n  }, \"Code\"), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"For styling monospace type.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=10247%3A6654\",\n    install: \"npm install @pluralsight/ps-design-system-text\",\n    import: \"import { Code } from '@pluralsight/ps-design-system-text'\",\n    packageName: \"text\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(\"h2\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { P, Code } from '@pluralsight/ps-design-system-text'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  return (\\n    <React.Fragment>\\n      <P>\\n        <Code>code block</Code> at the beginning of a paragraph.\\n      </P>\\n      <P>\\n        At the beginning of a paragraph <Code>code block</Code>\\n      </P>\\n      <P>\\n        Wrapping code block\\n        <Code>\\n          buy-in programmatically, or out of the loop. I'll book a meeting so we\\n          can solution this before the sprint is over get buy-in, and closing\\n          these latest prospects is like putting socks on an octopus. Knowledge\\n          is power\\n        </Code> with text on the end.\\n      </P>\\n    </React.Fragment>\\n  )\\n}\\n\\nexport default Example\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Code","route":"/components/text-code"},"headings":[{"value":"Code","depth":1},{"value":"Example","depth":2}]}},"pageContext":{"slug":"/components/text-code/","version":"CHANGELOG"}},
    "staticQueryHashes": []}