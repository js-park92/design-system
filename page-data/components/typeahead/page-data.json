{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/typeahead",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Typeahead\",\n  \"route\": \"/components/viewtoggle\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar A = makeShortcode(\"A\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar TypesEnum = makeShortcode(\"TypesEnum\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"typeahead\"\n  }, \"Typeahead\"), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"Typeahead combines a text entry with a picker menu, allowing users to filter longer lists to only the selections matching a query.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=10235%3A30028\",\n    install: \"npm install @pluralsight/ps-design-system-typeahead\",\n    import: \"import VerticalTabs from '@pluralsight/ps-design-system-typeahead'\",\n    packageName: \"typeahead\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"in-app-example\"\n  }, \"In-app example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Typeahead from '@pluralsight/ps-design-system-typeahead'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  const options = [{label: 'Beginner', value: 'Beginner'}, {label: 'Intermediate', value: 'Intermediate'}, {label: 'Advanced', value: 'Advanced'}]\\n\\n  return (\\n    <Typeahead label=\\\"Level\\\" placeholder=\\\"Select a Level\\\" options={options}/>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"sizes\"\n  }, \"Sizes\"), mdx(\"p\", null, \"The small typeahead is ideal for usage within table rows otherwise use the default, medium size typeahead, in forms for example.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"startExpanded=false\",\n    \"startExpanded\": \"false\"\n  }, \"import Typeahead from '@pluralsight/ps-design-system-typeahead'\\nimport React from 'react'\\nconst options = [{label: 'Beginner', value: 'Beginner'}, {label: 'Intermediate', value: 'Intermediate'}, {label: 'Advanced', value: 'Advanced'}]\\nconst Example: React.FC = props => {\\n  return (\\n    <div className=\\\"example-grid--col-2\\\">\\n      <Typeahead placeholder=\\\"medium typeahead\\\" options={options}/>\\n      <Typeahead placeholder=\\\"small typeahead\\\" size={Typeahead.sizes.small} options={options}/>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"custom-filterfunction\"\n  }, \"Custom filterFunction\"), mdx(\"p\", null, \"The typeahead allows you to pass in a custom filter function that does not use the default String.includes method\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"startExpanded=false noRender\",\n    \"startExpanded\": \"false\",\n    \"noRender\": true\n  }, \"import Typeahead, {TypeaheadFilterFunction} from '@pluralsight/ps-design-system-typeahead'\\nimport React from 'react'\\n\\nconst filterFunction: TypeaheadFilterFunction = (options, inputValue) =>\\n  options.filter(({ label }) =>\\n    `${label}`\\n      .toLowerCase()\\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\\n      .startsWith((inputValue as string).toLowerCase())\\n\\nconst Example: React.FC = props => {\\n  const options = [{label: 'Beginner', value: 'Beginner'}, {label: 'Intermediate', value: 'Intermediate'}, {label: 'Advanced', value: 'Advanced'}]\\n\\n  return (\\n    <Typeahead label=\\\"Level\\\" placeholder=\\\"Select a Level\\\" options={options} filterFunction={filterFunction}/>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"p\", null, \"WAI-ARIA Patterns: \", mdx(A, {\n    href: \"https://www.w3.org/TR/wai-aria-practices-1.2/#combobox\",\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    mdxType: \"A\"\n  }, \"Combobox\"), \", \", mdx(A, {\n    href: \"https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\",\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    mdxType: \"A\"\n  }, \"Listbox\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"typeahead-1\"\n  }, \"Typeahead\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"appearance\",\n    type: mdx(TypesEnum, {\n      enum: Typeahead.appearances,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"visual style (from Typeahead.appearances)\",\n    default: Typeahead.appearances.default,\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"disabled\",\n    type: \"boolean\",\n    desc: \"standard input disable flag\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"error\",\n    type: \"boolean\",\n    desc: \"error state flag\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"filterFunction\",\n    type: \"( options: { label: React.ReactText value: React.ReactText }[], inputValue?: string | undefined ) => { label: React.ReactText value: React.ReactText }[]\",\n    desc: \"optional filter function\",\n    default: \"string includes\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"label\",\n    type: \"string\",\n    desc: \"identifying string for input\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"onChange\",\n    type: \"(Event, nextValue) => void\",\n    desc: \"triggered when value changes\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"options\",\n    required: true,\n    type: \"Option[]\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"placeholder\",\n    type: \"string\",\n    desc: \"in-field usage hint\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"size\",\n    type: mdx(TypesEnum, {\n      enum: Typeahead.sizes,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"horizontal icon placement (from Typeahead.sizes)\",\n    default: Typeahead.sizes.medium,\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"subLabel\",\n    type: \"string\",\n    desc: \"supporting text or error messaging\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"value\",\n    type: \"string\",\n    desc: \"controlled value\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Typeahead","route":"/components/viewtoggle"},"headings":[{"value":"Typeahead","depth":1},{"value":"Examples","depth":2},{"value":"In-app example","depth":3},{"value":"Sizes","depth":3},{"value":"Custom filterFunction","depth":3},{"value":"Accessibility","depth":2},{"value":"Props","depth":2},{"value":"Typeahead","depth":3}]}},"pageContext":{"slug":"/components/typeahead/","version":"CHANGELOG"}},
    "staticQueryHashes": []}