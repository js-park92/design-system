{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/datawell",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Datawell\",\n  \"route\": \"/components/datawell\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar Guideline = makeShortcode(\"Guideline\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"data-well\"\n  }, \"Data well\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"Data well is for displaying a large numeric value with supporting labels.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=10235%3A29840\",\n    install: \"npm install @pluralsight/ps-design-system-datawell\",\n    import: \"import DataWell from '@pluralsight/ps-design-system-datawell'\",\n    packageName: \"datawell\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"labels\"\n  }, \"Labels\"), mdx(\"p\", null, \"Often Data Wells are shown in a row. Data Well is designed to fit inside this experience. Simply wrap them in a flex container. Labels should provide context into the main meaning of the data shown.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \" is always required. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"subLabel\"), \" is optional.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import DataWell from '@pluralsight/ps-design-system-datawell'\\nimport React from 'react'\\n\\nfunction Example() {\\n  return (\\n    <div style={{ display: 'flex' }}>\\n      <DataWell label=\\\"Active learners\\\">7.2 Billion</DataWell>\\n      <DataWell label=\\\"Pluralsight ROI\\\">Vast</DataWell>\\n      <DataWell label=\\\"Lives changed\\\" subLabel=\\\"Up to 11\\\">\\n        11/10\\n      </DataWell>\\n    </div>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"guidelines\"\n  }, \"Guidelines\"), mdx(\"p\", null, \"Keep labels, sublabels, and values short as possible.\"), mdx(Guideline, {\n    do: mdx(DataWell, {\n      label: \"Royalty Payments\",\n      subLabel: \"Last 30 days\",\n      mdxType: \"DataWell\"\n    }, \"$123M\"),\n    dont: mdx(DataWell, {\n      label: \"Royalties Paid to Authors\",\n      subLabel: \"For the period of the last thirty days\",\n      mdxType: \"DataWell\"\n    }, \"$123,456,789.03\"),\n    mdxType: \"Guideline\"\n  }), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"children\",\n    required: true,\n    type: \"React.ReactNode\",\n    desc: \"main data to display\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"label\",\n    required: true,\n    type: \"string\",\n    desc: \"primary explanatory label\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"subLabel\",\n    type: \"string\",\n    desc: \"secondary contextual label\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Datawell","route":"/components/datawell"},"headings":[{"value":"Data well","depth":1},{"value":"Examples","depth":2},{"value":"Labels","depth":3},{"value":"Guidelines","depth":2},{"value":"Accessibility","depth":2},{"value":"Props","depth":2}]}},"pageContext":{"slug":"/components/datawell/","version":"CHANGELOG"}},
    "staticQueryHashes": []}