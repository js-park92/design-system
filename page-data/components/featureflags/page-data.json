{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/featureflags",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Feature flags\",\n  \"route\": \"/components/featureflags\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"feature-flags\"\n  }, \"Feature flags\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"We favor the use of feature flags when a UI change should be released uniformly across the product. This allows teams to independently develop and deploy.\"), mdx(Usage, {\n    install: \"npm install @pluralsight/ps-design-system-featureflags\",\n    import: \"import FeatureFlags from '@pluralsight/ps-design-system-featureflags'\",\n    packageName: \"featureflags\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"p\", null, \"Certain Design System components may need to react to feature flags. Watch for\\nmessaging in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#design-system\"), \" channel for when feature flags are in active\\nuse. Product dev teams will need to request flags from the flag provider as\\nthey normally do. Then feed them to the Design System in this manner.\"), mdx(\"p\", null, \"Import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FeatureFlags\"), \" React context provider:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"noRender startExpanded\",\n    \"noRender\": true,\n    \"startExpanded\": true\n  }, \"import FeatureFlags from '@pluralsight/ps-design-system-featureflags'\\n\")), mdx(\"p\", null, \"And wrap all your Design System code in this provider.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\",\n    \"metastring\": \"noRender startExpanded\",\n    \"noRender\": true,\n    \"startExpanded\": true\n  }, \"import FeatureFlags from '@pluralsight/ps-design-system-featureflags'\\nimport React from 'react'\\n\\nimport { ComponentUsingFlags } from './some/component/path'\\n\\nconst Example: React.FC = props => {\\n  return (\\n    <React.Fragment>\\n      <FeatureFlags flags={{}}>\\n        <ComponentUsingFlags>Original style</ComponentUsingFlags>\\n      </FeatureFlags>\\n\\n      <FeatureFlags flags={{ usingNewStyle: true }}>\\n        <ComponentUsingFlags>New style</ComponentUsingFlags>\\n      </FeatureFlags>\\n    </React.Fragment>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"as-a-utility-component\"\n  }, \"As a utility component\"), mdx(\"p\", null, \"You may also find that you can use the Feature Flags component generally as a\\nutility for your own code.\"), mdx(\"p\", null, \"Import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useFeatureFlags\"), \" React hook to consume the feature Flags\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import Button from '@pluralsight/ps-design-system-button'\\nimport { colorsBlue, colorsOrange } from '@pluralsight/ps-design-system-core'\\nimport { useFeatureFlags } from '@pluralsight/ps-design-system-featureflags'\\nimport React, { HTMLAttributes, useState } from 'react'\\n\\ntype Flag = { [name: string]: string | boolean | number }\\n\\nconst Example: React.FC = () => {\\n  const [flags, setFlags] = useState<Flag[]>({ usingNewStyle: true })\\n  const toggle = () => {\\n    setFlags({ usingNewStyle: !flags.usingNewStyle })\\n  }\\n\\n  return (\\n    <FeatureFlags flags={flags}>\\n      <ComponentUsingFlags onClick={toggle} />\\n    </FeatureFlags>\\n  )\\n}\\n\\nconst ComponentUsingFlags: React.FC<HTMLAttributes<\\n  HTMLButtonElement\\n>> = props => {\\n  const {\\n    flags: { usingNewStyle }\\n  } = useFeatureFlags()\\n\\n  const background = usingNewStyle ? colorsBlue[6] : colorsOrange[6]\\n\\n  return (\\n    <Button style={{ background }} {...props}>\\n      {usingNewStyle ? 'new style' : 'old style'}\\n    </Button>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"children\",\n    type: \"React.ReactNode\",\n    desc: \"children that need this context\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"flags\",\n    type: \"{ [name:string]: string | boolean | number }[]\",\n    desc: \"dictionary of flag names and values\",\n    default: \"{}\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Feature flags","route":"/components/featureflags"},"headings":[{"value":"Feature flags","depth":1},{"value":"Examples","depth":2},{"value":"As a utility component","depth":3},{"value":"Props","depth":2}]}},"pageContext":{"slug":"/components/featureflags/","version":"CHANGELOG"}},
    "staticQueryHashes": []}