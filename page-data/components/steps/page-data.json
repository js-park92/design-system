{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/steps",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Steps\",\n  \"route\": \"/components/steps\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar A = makeShortcode(\"A\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar TypesEnum = makeShortcode(\"TypesEnum\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"steps\"\n  }, \"Steps\"), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"Use the Steps component to display sequential navigation. A step will display an incremental counter and may have a title and description.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=11787%3A47920\",\n    install: \"npm install @pluralsight/ps-design-system-steps\",\n    import: \"import Badge from '@pluralsight/ps-design-system-steps'\",\n    packageName: \"steps\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"orientations\"\n  }, \"Orientations\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Steps\"), \" component can be oriented vertically or horizontally.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Steps from '@pluralsight/ps-design-system-steps'\\n\\nfunction Example() {\\n  return (\\n    <Steps orientation=\\\"vertical\\\">\\n      <Steps.Step status={Steps.statuses.completed}>Finished</Steps.Step>\\n\\n      <Steps.Step\\n        description=\\\"An optional description to provide more detail about this step.\\\"\\n        status={Steps.statuses.current}\\n      >\\n        In Progress\\n      </Steps.Step>\\n\\n      <Steps.Step status={Steps.statuses.incomplete}>Waiting</Steps.Step>\\n    </Steps>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Steps from '@pluralsight/ps-design-system-steps'\\n\\nfunction Example() {\\n  return (\\n    <Steps orientation=\\\"horizontal\\\">\\n      <Steps.Step status={Steps.statuses.completed}>Finished</Steps.Step>\\n\\n      <Steps.Step\\n        description=\\\"An options description to provide more detail about this step.\\\"\\n        status={Steps.statuses.current}\\n      >\\n        In Progress\\n      </Steps.Step>\\n\\n      <Steps.Step status={Steps.statuses.incomplete}>Waiting</Steps.Step>\\n    </Steps>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"sizes\"\n  }, \"Sizes\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" prop will adjust the font and marker dimensions.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Steps from '@pluralsight/ps-design-system-steps'\\n\\nfunction Example() {\\n  return (\\n    <>\\n      <Steps orientation=\\\"horizontal\\\" size=\\\"medium\\\">\\n        <Steps.Step status={Steps.statuses.completed}>Medium</Steps.Step>\\n      </Steps>\\n\\n      <Steps orientation=\\\"horizontal\\\" size=\\\"large\\\">\\n        <Steps.Step status={Steps.statuses.completed}>Large</Steps.Step>\\n      </Steps>\\n    </>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"step-status\"\n  }, \"Step status\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"status\"), \" prop to defined the status of each step.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Steps from '@pluralsight/ps-design-system-steps'\\n\\nfunction Example() {\\n  return (\\n    <Steps orientation=\\\"horizontal\\\" size=\\\"medium\\\">\\n      <Steps.Step status={Steps.statuses.incomplete}>Incomplete</Steps.Step>\\n      <Steps.Step status={Steps.statuses.current}>Current</Steps.Step>\\n      <Steps.Step status={Steps.statuses.completed}>Completed</Steps.Step>\\n    </Steps>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"marker-counters\"\n  }, \"Marker counters\"), mdx(\"p\", null, \"Incremental counters can optionally be hidden using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"counter\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Steps from '@pluralsight/ps-design-system-steps'\\n\\nfunction Example() {\\n  return (\\n    <Steps counter={false} orientation=\\\"horizontal\\\" size=\\\"medium\\\">\\n      <Steps.Step status={Steps.statuses.completed}>Finished</Steps.Step>\\n\\n      <Steps.Step\\n        description=\\\"An optional description to provide more detail about this step.\\\"\\n        status={Steps.statuses.current}\\n      >\\n        In Progress\\n      </Steps.Step>\\n\\n      <Steps.Step status={Steps.statuses.incomplete}>Waiting</Steps.Step>\\n    </Steps>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"interactive\"\n  }, \"Interactive\"), mdx(\"p\", null, \"Add an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \" prop to display the step as interactive.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react'\\nimport Steps from '@pluralsight/ps-design-system-steps'\\n\\nfunction Example() {\\n  const { steps, select } = useData()\\n\\n  return (\\n    <Steps orientation=\\\"vertical\\\">\\n      {steps.map((step, index) => (\\n        <Steps.Step\\n          key={index}\\n          description={step.status === 'current' && step.description}\\n          onClick={() => select(step)}\\n          status={step.status}\\n        >\\n          {step.title}\\n        </Steps.Step>\\n      ))}\\n    </Steps>\\n  )\\n}\\n\\nfunction useData() {\\n  const description =\\n    'An optional description to provide more detail about this step.'\\n  const { statuses } = Steps\\n\\n  const [steps, setSteps] = React.useState([\\n    { description, title: 'Select type', status: statuses.completed },\\n    { description, title: 'Select template', status: statuses.current },\\n    { description, title: 'Add details', status: statuses.incomplete },\\n    { description, title: 'Select goals', status: statuses.incomplete },\\n    { description, title: 'Review', status: statuses.incomplete }\\n  ])\\n\\n  const select = React.useCallback(\\n    nextStep => {\\n      const curIndex = steps.indexOf(nextStep)\\n      if (curIndex < 0) return\\n\\n      setSteps(prev =>\\n        prev.map((step, index) => ({\\n          ...step,\\n          status:\\n            index === curIndex\\n              ? 'current'\\n              : index < curIndex\\n              ? 'completed'\\n              : 'incomplete'\\n        }))\\n      )\\n    },\\n    [steps]\\n  )\\n\\n  return { steps, select }\\n}\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"p\", null, \"WAI-ARIA Patterns: \", mdx(A, {\n    href: \"https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\",\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    mdxType: \"A\"\n  }, \"Disclosure\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"steps-1\"\n  }, \"Steps\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"counter\",\n    desc: \"show/hide the marker counter\",\n    type: \"boolean\",\n    default: \"true\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"orientation\",\n    type: mdx(TypesEnum, {\n      enum: Steps.orientations,\n      mdxType: \"TypesEnum\"\n    }),\n    default: \"vertical\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"size\",\n    type: mdx(TypesEnum, {\n      enum: Steps.sizes,\n      mdxType: \"TypesEnum\"\n    }),\n    default: \"large\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"stepsstep\"\n  }, \"Steps.Step\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"description\",\n    type: \"string\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    desc: \"custom marker\",\n    name: \"marker\",\n    type: \"Marker\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    default: \"(p) => <div {...p} />\",\n    desc: \"render prop for custom marker container\",\n    name: \"renderMarkerContainer\",\n    type: \"(props) => React.ReactNode\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    desc: \"step status\",\n    name: \"status\",\n    required: true,\n    type: mdx(TypesEnum, {\n      enum: Steps.statuses,\n      mdxType: \"TypesEnum\"\n    }),\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Steps","route":"/components/steps"},"headings":[{"value":"Steps","depth":1},{"value":"Examples","depth":2},{"value":"Orientations","depth":3},{"value":"Sizes","depth":3},{"value":"Step status","depth":3},{"value":"Marker counters","depth":3},{"value":"Interactive","depth":3},{"value":"Accessibility","depth":2},{"value":"Props","depth":2},{"value":"Steps","depth":3},{"value":"Steps.Step","depth":3}]}},"pageContext":{"slug":"/components/steps/","version":"CHANGELOG"}},
    "staticQueryHashes": []}