{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/text-heading",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Heading\",\n  \"route\": \"/components/text-heading\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar TypesEnum = makeShortcode(\"TypesEnum\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"heading\"\n  }, \"Heading\"), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"Heading is used to create various levels of typographic hierarchies.\"), mdx(Usage, {\n    figmaUrl: \"https://www.figma.com/file/YsTklBecdddy9RZ3HXddIseD/?node-id=10247%3A6654\",\n    install: \"npm install @pluralsight/ps-design-system-text\",\n    import: \"import { Heading } from '@pluralsight/ps-design-system-text'\",\n    packageName: \"text\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"sizes\"\n  }, \"Sizes\"), mdx(\"p\", null, \"Seven text sizes are available using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" prop. Use with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<h.../>\"), \" tag that is best suited for the semantic structure of the page.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { Heading } from '@pluralsight/ps-design-system-text'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  return (\\n    <React.Fragment>\\n      <Heading size={Heading.sizes.xLarge}>\\n        <h1>Heading xLarge</h1>\\n      </Heading>\\n\\n      <Heading size={Heading.sizes.large}>\\n        <h2>Heading large</h2>\\n      </Heading>\\n\\n      <Heading size={Heading.sizes.medium}>\\n        <h3>Heading medium</h3>\\n      </Heading>\\n\\n      <Heading size={Heading.sizes.small}>\\n        <h4>Heading small</h4>\\n      </Heading>\\n\\n      <Heading size={Heading.sizes.xSmall}>\\n        <h5>Heading xSmall</h5>\\n      </Heading>\\n\\n      <Heading size={Heading.sizes.xXSmall}>\\n        <h6>Heading xXSmall</h6>\\n      </Heading>\\n\\n      <Heading size={Heading.sizes.xXXSmall}>\\n        <h6>Heading xXXSmall</h6>\\n      </Heading>\\n    </React.Fragment>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"colors\"\n  }, \"Colors\"), mdx(\"p\", null, \"Text color can be set to Primary (high contrast) or Secondary (medium contrast) using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import { Heading } from '@pluralsight/ps-design-system-text'\\nimport React from 'react'\\n\\nconst Example: React.FC = props => {\\n  return (\\n    <React.Fragment>\\n      <Heading color={Heading.colors.primary}>\\n        <h1>Primary</h1>\\n      </Heading>\\n\\n      <Heading color={Heading.colors.secondary}>\\n        <h1>Secondary</h1>\\n      </Heading>\\n    </React.Fragment>\\n  )\\n}\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"size\",\n    type: mdx(TypesEnum, {\n      enum: Heading.sizes,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"size of heading (from Heading.sizes)\",\n    default: Heading.sizes.large,\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"color\",\n    type: mdx(TypesEnum, {\n      enum: Heading.colors,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"colorof label (from Heading.colors)\",\n    default: Heading.colors.primary,\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Heading","route":"/components/text-heading"},"headings":[{"value":"Heading","depth":1},{"value":"Examples","depth":2},{"value":"Sizes","depth":3},{"value":"Colors","depth":3},{"value":"Props","depth":2}]}},"pageContext":{"slug":"/components/text-heading/","version":"CHANGELOG"}},
    "staticQueryHashes": []}