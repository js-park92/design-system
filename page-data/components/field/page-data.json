{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/components/field",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Field\",\n  \"route\": \"/components/fidl\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar Intro = makeShortcode(\"Intro\");\nvar Usage = makeShortcode(\"Usage\");\nvar CheckCircleFillIcon = makeShortcode(\"CheckCircleFillIcon\");\nvar WarningFilledIcon = makeShortcode(\"WarningFilledIcon\");\nvar TypesTable = makeShortcode(\"TypesTable\");\nvar TypesProp = makeShortcode(\"TypesProp\");\nvar TypesEnum = makeShortcode(\"TypesEnum\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"field\"\n  }, \"Field\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(Intro, {\n    mdxType: \"Intro\"\n  }, \"The Field suite of components provide the basic building blocks for creating various form controls. These components are provided with the expectation they can be used to create consistent Design System forms.\"), mdx(Usage, {\n    install: \"npm install @pluralsight/ps-design-system-field\",\n    import: \"import Field from '@pluralsight/ps-design-system-field'\",\n    packageName: \"field\",\n    version: props.version,\n    mdxType: \"Usage\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"text-input-field\"\n  }, \"Text input field\"), mdx(\"p\", null, \"An example of creating a basic input field component through composition.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React, { ComponentProps } from 'react'\\nimport Field from '@pluralsight/ps-design-system-field'\\n\\ninterface Props extends ComponentProps<typeof Field> {}\\nconst TextInputField: React.FC<Props> = (props) => {\\n  const { disabled, placeholder, type = 'text', ...rest } = props\\n\\n  const labelId = 'this-needs-to-be-a-unique-label-id-1'\\n  const inputId = 'this-needs-to-be-a-unique-input-id-1'\\n\\n  return (\\n    <Field\\n      disabled={disabled}\\n      label={\\n        <Field.Label htmlFor={inputId} id={labelId}>\\n          Text input label area\\n        </Field.Label>\\n      }\\n      subLabel={\\n        <Field.SubLabel>Area for additional information</Field.SubLabel>\\n      }\\n      {...rest}\\n    >\\n      <Field.Input\\n        disabled={disabled}\\n        id={inputId}\\n        placeholder={placeholder}\\n        type={type}\\n      />\\n    </Field>\\n  )\\n}\\n\\nconst Example = () => <TextInputField />\\n\\nexport default Example\\n\")), mdx(\"p\", null, \"Fields are designed to display inline but can be changed to block display. Doing\\nso will allow the contents to stretch fully to the parent's width.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"You can apply additional styles, like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display\"), \", to the outermost container using the prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"renderContainer\"), \".\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React, { ComponentProps, forwardRef } from 'react'\\nimport Field from '@pluralsight/ps-design-system-field'\\n\\nconst BlockRenderContainer = forwardRef((props, ref) => (\\n  <div ref={ref} {...props} style={{ display: 'block'}} />\\n))\\n\\nconst TextInputField: React.FC<ComponentProps<typeof Field>> = (props) => {\\n  const { disabled, placeholder, type = 'text', ...rest } = props\\n\\n  const labelId = 'this-needs-to-be-a-unique-label-id-1'\\n  const inputId = 'this-needs-to-be-a-unique-input-id-1'\\n\\n  return (\\n    <Field\\n      renderContainer={BlockRenderContainer}\\n      disabled={disabled}\\n      label={\\n        <Field.Label htmlFor={inputId} id={labelId}>\\n        My content stretchs fully to my parent's width\\n        </Field.Label>\\n      }\\n      subLabel={\\n        <Field.SubLabel>Area for additional information</Field.SubLabel>\\n      }\\n      {...rest}\\n    >\\n      <Field.Input\\n        disabled={disabled}\\n        id={inputId}\\n        placeholder={placeholder}\\n        type={type}\\n      />\\n    </Field>\\n  )\\n}\\n\\nconst Example = () => <TextInputField />\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"text-area-field\"\n  }, \"Text area field\"), mdx(\"p\", null, \"An example of creating a basic textarea field component that grows with the content.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React, { ComponentProps, RefObject } from 'react'\\nimport Field from '@pluralsight/ps-design-system-field'\\n\\ninterface Props extends ComponentProps<typeof Field> {}\\nconst TextAreaField: React.FC<Props> = (props) => {\\n  const { disabled, placeholder, ...rest } = props\\n\\n  const [value, setValue] = useState<string>('')\\n\\n  const labelId = 'this-needs-to-be-a-unique-label-id-2'\\n  const areaId = 'this-needs-to-be-a-unique-area-id-2'\\n\\n  const areaRef = useRef<HTMLTextAreaElement>(null)\\n  useAutoGrow(areaRef, value)\\n\\n  return (\\n    <Field\\n      disabled={disabled}\\n      label={\\n        <Field.Label htmlFor={areaId} id={labelId}>\\n          Text area label area\\n        </Field.Label>\\n      }\\n      subLabel={\\n        <Field.SubLabel>Area for additional information</Field.SubLabel>\\n      }\\n      {...rest}\\n    >\\n      <Field.TextArea\\n        ref={areaRef}\\n        disabled={disabled}\\n        id={areaId}\\n        onChange={evt => {\\n          setValue(evt.target.value)\\n        }}\\n        placeholder={placeholder}\\n        value={value}\\n      />\\n    </Field>\\n  )\\n}\\n\\nfunction useAutoGrow(\\n  ref: RefObject<HTMLTextAreaElement | undefined>,\\n  value: string\\n) {\\n  useEffect(() => {\\n    if (!ref.current) return\\n    const { current: el } = ref\\n\\n    el.style.height = 'inherit'\\n\\n    const computed = window.getComputedStyle(el)\\n\\n    const height =\\n      parseInt(computed.getPropertyValue('border-top-width'), 10) +\\n      parseInt(computed.getPropertyValue('padding-top'), 10) +\\n      el.scrollHeight +\\n      parseInt(computed.getPropertyValue('padding-bottom'), 10) +\\n      parseInt(computed.getPropertyValue('border-bottom-width'), 10)\\n\\n    el.style.height = String(height) + 'px'\\n  }, [ref, value])\\n}\\n\\nconst Example = () => <TextAreaField />\\n\\nexport default Example\\n\")), mdx(\"h3\", {\n    \"id\": \"advanced-examples-integrating-downshift\"\n  }, \"Advanced examples integrating downshift\"), mdx(\"p\", null, \"Here are some examples of building more complicated fields using the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/downshift-js/downshift\"\n  }, \"downshift\"), \" headless library.\"), mdx(\"h4\", {\n    \"id\": \"tags-field\"\n  }, \"Tags Field\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React, { useMemo } from 'react'\\n\\nimport { layout } from '@pluralsight/ps-design-system-core'\\nimport { CloseIcon } from '@pluralsight/ps-design-system-icon'\\nimport Tag from '@pluralsight/ps-design-system-tag'\\n\\nimport Field from '@pluralsight/ps-design-system-field'\\nimport { useMultipleSelection } from 'downshift'\\n\\nconst GUTTER_SIZE = 2\\n\\ninterface Props extends ComponentProps<typeof Field> {}\\nconst TagField: React.FC<Props> = (props) => {\\n  const { disabled, placeholder, ...rest } = props\\n\\n  const options = useMemo(() => [\\n    { label: 'Hydrogen', value: 'H' },\\n    { label: 'Helium', value: 'He' },\\n    { label: 'Lithium', value: 'Li' },\\n    { label: 'Beryllium', value: 'Be' },\\n    { label: 'Boron', value: 'B' },\\n    { label: 'Carbon', value: 'C' },\\n    { label: 'Nitrogren', value: 'N' },\\n    { label: 'Oxygen', value: 'O' },\\n    { label: 'Fluorine', value: 'F' },\\n  ], [])\\n\\n  const labelId = 'this-needs-to-be-a-unique-label-id-3'\\n  const inputId = 'this-needs-to-be-a-unique-input-id-3'\\n\\n  const [filterTerm, setFilterTerm] = useState('')\\n\\n  const handleFilterTermChange = evt => {\\n    setFilterTerm(evt.target.value)\\n  }\\n\\n  const initialSelectedItems = useMemo(() => [options[1].value], [options])\\n  const {\\n    addSelectedItem,\\n    getDropdownProps,\\n    getSelectedItemProps,\\n    removeSelectedItem,\\n    selectedItems\\n  } = useMultipleSelection({ initialSelectedItems })\\n\\n  const handleAddSelected = (evt, item) => {\\n    evt.stopPropagation()\\n\\n    setFilterTerm('')\\n    addSelectedItem(item)\\n  }\\n\\n  const handleRemoveSelected = (evt, item) => {\\n    evt.stopPropagation()\\n    removeSelectedItem(item)\\n  }\\n\\n  const unselectedOptions = useMemo(() => {\\n    return options.filter(option => !selectedItems.includes(option.value))\\n  }, [options, selectedItems])\\n\\n  const filterResults = useMemo(() => {\\n    if (!filterTerm) return unselectedOptions\\n\\n    return unselectedOptions.filter(option =>\\n      option.label.toLowerCase().includes(filterTerm)\\n    )\\n  }, [filterTerm, unselectedOptions])\\n\\n  return (\\n    <>\\n      <Field\\n        label={\\n          <Field.Label htmlFor={inputId} id={labelId}>\\n            Some label text\\n          </Field.Label>\\n        }\\n        renderTag={RenderTagNoPadding}\\n        size={Field.sizes.small}\\n        {...rest}\\n      >\\n        <Pills>\\n          {selectedItems.map((selectedItem, index) => {\\n            const option = options.find(o => o.value === selectedItem)\\n            if (!option) return null\\n\\n            return (\\n              <Pill\\n                key={`selected-item-${index}`}\\n                onRequestRemove={e => handleRemoveSelected(e, selectedItem)}\\n                {...getSelectedItemProps({ selectedItem, index })}\\n              >\\n                {option.label}\\n              </Pill>\\n            )\\n          })}\\n\\n          <CustomInput\\n            disabled={disabled}\\n            placeholder={placeholder}\\n            id={inputId}\\n            onChange={handleFilterTermChange}\\n            value={filterTerm}\\n            {...getDropdownProps()}\\n          />\\n        </Pills>\\n\\n      </Field>\\n\\n\\n      <div\\n        style={{\\n          border: '2px dashed pink',\\n          margin: '20px 0',\\n          maxHeight: 200,\\n          overflow: 'scroll',\\n          padding: 20\\n        }}\\n      >\\n\\n        <p>Filtered Options</p>\\n        <ul>\\n          {filterResults.map((option, index) => (\\n            <li key={`filter-result-${index}`}>\\n              <span>{option.label} </span>\\n              <button onClick={e => handleAddSelected(e, option.value)}>\\n                add\\n              </button>\\n            </li>\\n          ))}\\n        </ul>\\n      </div>\\n    </>\\n  )\\n\\n}\\n\\nconst RenderTagNoPadding: React.FC = p => (\\n  <div {...p} style={{ padding: 0 }} />\\n)\\n\\nconst Pills = forwardRef((props, ref) => {\\n  const { children, ...rest } = props\\n\\n  const styles = {\\n    alignItems: 'center',\\n    display: 'flex',\\n    flex: 1,\\n    flexWrap: 'wrap',\\n    maxHeight: 75,\\n    overflowY: 'scroll',\\n    padding: `${layout.spacingXSmall}`,\\n    width: '100%'\\n  }\\n\\n  return (\\n    <div ref={ref} {...rest} style={styles}>\\n      {children}\\n    </div>\\n  )\\n})\\n\\ninterface PillProps extends ComponentProps<typeof Tag> {\\n  onRequestRemove: React.MouseEventHandler\\n}\\nconst Pill = forwardRef<HTMLDivElement, PillProps>((props, ref) => {\\n  const { children, onRequestRemove, ...rest } = props\\n\\n  const styles = { margin: `calc(${GUTTER_SIZE}px / 2)` }\\n\\n  return (\\n    <div ref={ref} {...rest} style={styles}>\\n      <Tag\\n        icon={<CloseIcon onClick={onRequestRemove} />}\\n        isPressed\\n        size={Tag.sizes.small}\\n      >\\n        {children}\\n      </Tag>\\n    </div>\\n  )\\n})\\n\\nconst CustomInput = forwardRef<HTMLInputElement, React.ComponentProps<typeof Field.Input>>((props, ref) => {\\n  const Container = useMemo(\\n    () =>\\n      forwardRef((p, r) => (\\n        <div\\n          ref={r}\\n          {...p}\\n          style={{ margin: `calc(${GUTTER_SIZE}px / 2)` }}\\n        />\\n      )),\\n    []\\n  )\\n\\n  return (\\n    <Field.Input\\n      ref={ref}\\n      renderContainer={Container}\\n      type=\\\"text\\\"\\n      {...props}\\n      style={{ minWidth: 50 }}\\n    />\\n  )\\n})\\n\\nconst Example = () => <TagField />\\n\\n\\nexport default Example\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WCAG 2.1 AA Compliance\")), mdx(CheckCircleFillIcon, {\n    color: \"green\",\n    size: \"xSmall\",\n    mdxType: \"CheckCircleFillIcon\"\n  }), \" 100% axe-core tests\", mdx(\"br\", null), mdx(WarningFilledIcon, {\n    color: \"red\",\n    size: \"xSmall\",\n    mdxType: \"WarningFilledIcon\"\n  }), \" Manual audit\", mdx(\"h2\", {\n    \"id\": \"props\"\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"field-1\"\n  }, \"Field\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"children\",\n    type: \"ReactNode\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"disabled\",\n    type: \"boolean\",\n    desc: \"disabled state\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"error\",\n    type: \"boolean\",\n    desc: \"error state\",\n    default: \"false\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"label\",\n    type: \"ReactNode\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"prefix\",\n    type: \"ReactNode\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"renderContainer\",\n    type: \"(props, ref) => ReactNode\",\n    desc: \"render prop used to replace container with custom element\",\n    default: \"(props, ref) => <div ref={ref} {...props} />\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"renderTag\",\n    type: \"(props) => ReactNode\",\n    desc: \"render prop used to replace field tag with custom element\",\n    default: \"(props) => <div {...props} />\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"size\",\n    type: mdx(TypesEnum, {\n      enum: Field.sizes,\n      mdxType: \"TypesEnum\"\n    }),\n    desc: \"size (from Field.sizes)\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"subLabel\",\n    type: \"ReactNode\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"suffix\",\n    type: \"ReactNode\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"fieldlabel\"\n  }, \"Field.Label\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"children\",\n    type: \"ReactNode\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"fieldsublabel\"\n  }, \"Field.SubLabel\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"children\",\n    type: \"ReactNode\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"fieldinput\"\n  }, \"Field.Input\"), mdx(\"p\", null, \"An unstyled \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"input\"), \" element that can be used inside the Field.\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"renderContainer\",\n    type: \"(props, ref) => ReactNode\",\n    desc: \"render prop used to replace container with custom element\",\n    default: \"(props, ref) => <div ref={ref} {...props} />\",\n    mdxType: \"TypesProp\"\n  }), mdx(TypesProp, {\n    name: \"renderTag\",\n    type: \"(props, ref) => ReactNode\",\n    desc: \"render prop used to replace the default input\",\n    default: \"(props, ref) => <input ref={ref} {...props} />\",\n    mdxType: \"TypesProp\"\n  })), mdx(\"h3\", {\n    \"id\": \"fieldtextarea\"\n  }, \"Field.TextArea\"), mdx(\"p\", null, \"An unstyled \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"textarea\"), \" element that can be used inside the Field.\"), mdx(TypesTable, {\n    mdxType: \"TypesTable\"\n  }, mdx(TypesProp, {\n    name: \"renderContainer\",\n    type: \"(props, ref) => ReactNode\",\n    desc: \"render prop used to replace container with custom element\",\n    default: \"(props, ref) => <div ref={ref} {...props} />\",\n    mdxType: \"TypesProp\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Field","route":"/components/fidl"},"headings":[{"value":"Field","depth":1},{"value":"Examples","depth":2},{"value":"Text input field","depth":3},{"value":"Text area field","depth":3},{"value":"Advanced examples integrating downshift","depth":3},{"value":"Tags Field","depth":4},{"value":"Accessibility","depth":2},{"value":"Props","depth":2},{"value":"Field","depth":3},{"value":"Field.Label","depth":3},{"value":"Field.SubLabel","depth":3},{"value":"Field.Input","depth":3},{"value":"Field.TextArea","depth":3}]}},"pageContext":{"slug":"/components/field/","version":"5.0.12"}},
    "staticQueryHashes": []}