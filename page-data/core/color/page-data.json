{
    "componentChunkName": "component---src-templates-page-tsx",
    "path": "/core/color",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"Color\",\n  \"route\": \"/core/color\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TableOfContents = makeShortcode(\"TableOfContents\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"color\"\n  }, \"Color\"), mdx(TableOfContents, _extends({}, props, {\n    mdxType: \"TableOfContents\"\n  })), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Colors are available from the core package. Colors are usable in CSS:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \"@import '@pluralsight/ps-design-system-core';\\n\\n.mySelector {\\n  color: var(--ps-colors-blue-6);\\n}\\n\")), mdx(\"p\", null, \"Colors are also usable in JavaScript:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\",\n    \"metastring\": \"noRender startExpanded\",\n    \"noRender\": true,\n    \"startExpanded\": true\n  }, \"import {\\n  colorsBlue\\n  /* other named exports */\\n} from '@pluralsight/ps-design-system-core'\\n\\nmyCssInJsSolution({\\n  color: colorsBlue[6]\\n})\\n\")), mdx(\"h2\", {\n    \"id\": \"background-colors\"\n  }, \"Background colors\"), mdx(\"p\", null, \"There are three background colors available to use for surfaces in the app. The lower the number, the lower the elevation of the surface.  Background 1 Is the app background.\"), mdx(\"p\", null, \"Dark\"), mdx(Colors, {\n    id: \"backgroundDark\",\n    mdxType: \"Colors\"\n  }), mdx(\"p\", null, \"Light\"), mdx(Colors, {\n    id: \"backgroundLight\",\n    mdxType: \"Colors\"\n  }), mdx(\"h2\", {\n    \"id\": \"utility-color\"\n  }, \"Utility color\"), mdx(\"p\", null, \"Use utility color with transparency to lighten or darken backgrounds beyond the three colors provided.\"), mdx(\"p\", null, \"Utility base coma seperated values\"), mdx(Colors, {\n    id: \"utilityBase\",\n    mdxType: \"Colors\"\n  }), mdx(\"p\", null, \"Utility with transparency on a dark background\"), mdx(Colors, {\n    id: \"utilityDarkBg\",\n    mdxType: \"Colors\"\n  }), mdx(\"p\", null, \"Utility with transparency on a light background\"), mdx(Colors, {\n    id: \"utilityLightBg\",\n    mdxType: \"Colors\"\n  }), mdx(\"h2\", {\n    \"id\": \"primary-action--text-link-colors\"\n  }, \"Primary action & text link colors\"), mdx(Colors, {\n    id: \"primaryActionBg\",\n    mdxType: \"Colors\"\n  }), mdx(Colors, {\n    id: \"primaryActionText\",\n    mdxType: \"Colors\"\n  }), mdx(\"h2\", {\n    \"id\": \"status-colors\"\n  }, \"Status colors\"), mdx(Colors, {\n    id: \"status\",\n    mdxType: \"Colors\"\n  }), mdx(\"h2\", {\n    \"id\": \"text--icon-colors\"\n  }, \"Text & icon colors\"), mdx(\"p\", null, \"On dark backgrounds\"), mdx(Colors, {\n    id: \"textIconDark\",\n    mdxType: \"Colors\"\n  }), mdx(\"p\", null, \"On light backgrounds\"), mdx(Colors, {\n    id: \"textIconLight\",\n    mdxType: \"Colors\"\n  }), mdx(\"h2\", {\n    \"id\": \"border-colors\"\n  }, \"Border colors\"), mdx(\"p\", null, \"On dark backgrounds\"), mdx(Colors, {\n    id: \"borderDark\",\n    mdxType: \"Colors\"\n  }), mdx(\"p\", null, \"On light backgrounds\"), mdx(Colors, {\n    id: \"borderLight\",\n    mdxType: \"Colors\"\n  }), mdx(\"h2\", {\n    \"id\": \"brand-gradients\"\n  }, \"Brand gradients\"), mdx(Colors, {\n    id: \"brand\",\n    mdxType: \"Colors\"\n  }), mdx(\"h2\", {\n    \"id\": \"code-colors\"\n  }, \"Code colors\"), mdx(Colors, {\n    id: \"code\",\n    mdxType: \"Colors\"\n  }), mdx(\"h2\", {\n    \"id\": \"neutrals\"\n  }, \"Neutrals\"), mdx(Colors, {\n    id: \"neutrals\",\n    mdxType: \"Colors\"\n  }), mdx(\"h2\", {\n    \"id\": \"all-colors\"\n  }, \"All colors\"), mdx(\"p\", null, \"These are additional colors beyond the core set. They can be used for things like illustrations, complex data visualizations, etc.\"), mdx(Colors, {\n    id: \"blue\",\n    mdxType: \"Colors\"\n  }), mdx(Colors, {\n    id: \"teal\",\n    mdxType: \"Colors\"\n  }), mdx(Colors, {\n    id: \"green\",\n    mdxType: \"Colors\"\n  }), mdx(Colors, {\n    id: \"lime\",\n    mdxType: \"Colors\"\n  }), mdx(Colors, {\n    id: \"yellow\",\n    mdxType: \"Colors\"\n  }), mdx(Colors, {\n    id: \"orange\",\n    mdxType: \"Colors\"\n  }), mdx(Colors, {\n    id: \"red\",\n    mdxType: \"Colors\"\n  }), mdx(Colors, {\n    id: \"pink\",\n    mdxType: \"Colors\"\n  }), mdx(Colors, {\n    id: \"purple\",\n    mdxType: \"Colors\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"name":"Color","route":"/core/color"},"headings":[{"value":"Color","depth":1},{"value":"Usage","depth":2},{"value":"Background colors","depth":2},{"value":"Utility color","depth":2},{"value":"Primary action & text link colors","depth":2},{"value":"Status colors","depth":2},{"value":"Text & icon colors","depth":2},{"value":"Border colors","depth":2},{"value":"Brand gradients","depth":2},{"value":"Code colors","depth":2},{"value":"Neutrals","depth":2},{"value":"All colors","depth":2}]}},"pageContext":{"slug":"/core/color/","version":"CHANGELOG"}},
    "staticQueryHashes": []}